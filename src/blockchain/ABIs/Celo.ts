// Generated by @wagmi/cli@1.0.0 on 5/24/2023 at 10:57:23 AM
import {
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Proxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const proxyABI = [
  { payable: false, stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Migrations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const migrationsABI = [
  { payable: false, stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'last_completed_migration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'completed', internalType: 'uint256', type: 'uint256' }],
    name: 'setCompleted',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'new_address', internalType: 'address', type: 'address' }],
    name: 'upgrade',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Initializable
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const initializableABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'testingDeployment', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// UsingRegistry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const usingRegistryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AccountsProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accountsProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AttestationsProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const attestationsProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BlockchainParametersProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const blockchainParametersProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DoubleSigningSlasherProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const doubleSigningSlasherProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DowntimeSlasherProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const downtimeSlasherProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ElectionProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const electionProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EpochRewardsProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const epochRewardsProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EscrowProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const escrowProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExchangeBRLProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeBrlProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExchangeEURProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeEurProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExchangeProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FederatedAttestationsProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const federatedAttestationsProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FeeCurrencyWhitelistProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const feeCurrencyWhitelistProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GasPriceMinimumProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gasPriceMinimumProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GoldTokenProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const goldTokenProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceApproverMultiSigProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceApproverMultiSigProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GrandaMentoProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const grandaMentoProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockedGoldProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockedGoldProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetaTransactionWalletProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metaTransactionWalletProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetaTransactionWalletDeployerProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metaTransactionWalletDeployerProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OdisPaymentsProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const odisPaymentsProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RegistryProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReserveProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reserveProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReserveSpenderMultiSigProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reserveSpenderMultiSigProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableTokenBRLProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenBrlProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableTokenEURProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenEurProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableTokenProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SortedOraclesProxy
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sortedOraclesProxyABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address', indexed: true }],
    name: 'ImplementationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerSet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getImplementation',
    outputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: '_getOwner',
    outputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'callbackData', internalType: 'bytes', type: 'bytes' },
    ],
    name: '_setAndInitializeImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'implementation', internalType: 'address', type: 'address' }],
    name: '_setImplementation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: '_transferOwnership',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Accounts
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const accountsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'account', internalType: 'address', type: 'address', indexed: true }],
    name: 'AccountCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'dataEncryptionKey', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'AccountDataEncryptionKeySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'metadataURL', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'AccountMetadataURLSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'name', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'AccountNameSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'walletAddress', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AccountWalletAddressSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AttestationSignerAuthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'AttestationSignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'DefaultSignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'DefaultSignerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'IndexedSignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'IndexedSignerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'LegacySignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'LegacySignerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'url', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'OffchainStorageRootAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'url', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'OffchainStorageRootRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'beneficiary', internalType: 'address', type: 'address', indexed: true },
      { name: 'fraction', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PaymentDelegationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'SignerAuthorizationCompleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'SignerAuthorizationStarted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'SignerAuthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
      { name: 'role', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'SignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ValidatorSignerAuthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'ValidatorSignerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'VoteSignerAuthorized',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'oldSigner', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'VoteSignerRemoved',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EIP712_AUTHORIZE_SIGNER_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'authorizedBy',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712DomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'offchainStorageRoots',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setEip712DomainSeparator',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'dataEncryptionKey', internalType: 'bytes', type: 'bytes' },
      { name: 'walletAddress', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setAccount',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'setName',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'walletAddress', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setWalletAddress',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dataEncryptionKey', internalType: 'bytes', type: 'bytes' }],
    name: 'setAccountDataEncryptionKey',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'metadataURL', internalType: 'string', type: 'string' }],
    name: 'setMetadataURL',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'url', internalType: 'bytes', type: 'bytes' }],
    name: 'addStorageRoot',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'removeStorageRoot',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getOffchainStorageRoots',
    outputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'beneficiary', internalType: 'address', type: 'address' },
      { name: 'fraction', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setPaymentDelegation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deletePaymentDelegation',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getPaymentDelegation',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setIndexedSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeSignerWithSignature',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeVoteSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeValidatorSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithPublicKey',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithKeys',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeAttestationSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'completeSignerAuthorization',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isLegacySigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isDefaultSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isIndexedSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'isSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'removeDefaultSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'removeIndexedSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'removeSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeVoteSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeValidatorSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'removeAttestationSigner',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'attestationSignerToAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'validatorSignerToAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'voteSignerToAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'signerToAccount',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'role', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isLegacyRole',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '_account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getLegacySigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getDefaultSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getIndexedSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getVoteSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getValidatorSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAttestationSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hasLegacySigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hasDefaultSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'hasIndexedSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'string', type: 'string' },
    ],
    name: 'hasAuthorizedSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'hasAuthorizedVoteSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'hasAuthorizedValidatorSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'hasAuthorizedAttestationSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getName',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getMetadataURL',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountsToQuery', internalType: 'address[]', type: 'address[]' }],
    name: 'batchGetMetadataURL',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getDataEncryptionKey',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getWalletAddress',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isAccount',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'isAuthorizedSigner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'role', internalType: 'bytes32', type: 'bytes32' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getRoleAuthorizationSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GasPriceMinimum
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const gasPriceMinimumABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'adjustmentSpeed', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'AdjustmentSpeedSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'gasPriceMinimumFloor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GasPriceMinimumFloorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gasPriceMinimum', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'GasPriceMinimumUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'targetDensity', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TargetDensitySet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'adjustmentSpeed',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasPriceMinimum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'gasPriceMinimumFloor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetDensity',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_registryAddress', internalType: 'address', type: 'address' },
      { name: '_gasPriceMinimumFloor', internalType: 'uint256', type: 'uint256' },
      { name: '_targetDensity', internalType: 'uint256', type: 'uint256' },
      { name: '_adjustmentSpeed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_adjustmentSpeed', internalType: 'uint256', type: 'uint256' }],
    name: 'setAdjustmentSpeed',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_targetDensity', internalType: 'uint256', type: 'uint256' }],
    name: 'setTargetDensity',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_gasPriceMinimumFloor', internalType: 'uint256', type: 'uint256' }],
    name: 'setGasPriceMinimumFloor',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tokenAddress', internalType: 'address', type: 'address' }],
    name: 'getGasPriceMinimum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'blockGasTotal', internalType: 'uint256', type: 'uint256' },
      { name: 'blockGasLimit', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateGasPriceMinimum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'blockGasTotal', internalType: 'uint256', type: 'uint256' },
      { name: 'blockGasLimit', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getUpdatedGasPriceMinimum',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FeeCurrencyWhitelist
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const feeCurrencyWhitelistABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'whitelist',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'tokenAddress', internalType: 'address', type: 'address' }],
    name: 'addToken',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWhitelist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GoldToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const goldTokenABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'comment', internalType: 'string', type: 'string', indexed: false }],
    name: 'TransferComment',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'transferWithComment',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'circulatingSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'increaseSupply',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBurnedAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetaTransactionWallet
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metaTransactionWalletABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'eip712DomainSeparator', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'EIP712DomainSeparatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'guardian', internalType: 'address', type: 'address', indexed: true }],
    name: 'GuardianSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'nonce', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'returnData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'MetaTransactionExecution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'signer', internalType: 'address', type: 'address', indexed: true }],
    name: 'SignerSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'data', internalType: 'bytes', type: 'bytes', indexed: false },
      { name: 'returnData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'TransactionExecution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'newSigner', internalType: 'address', type: 'address', indexed: true }],
    name: 'WalletRecovered',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EIP712_EXECUTE_META_TRANSACTION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712DomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'guardian',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'nonce',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'signer',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_signer', internalType: 'address', type: 'address' }],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_signer', internalType: 'address', type: 'address' }],
    name: 'setSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_guardian', internalType: 'address', type: 'address' }],
    name: 'setGuardian',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSigner', internalType: 'address', type: 'address' }],
    name: 'recoverWallet',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setEip712DomainSeparator',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getMetaTransactionDigest',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: '_nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'getMetaTransactionSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'executeMetaTransaction',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'executeTransaction',
    outputs: [{ name: '', internalType: 'bytes', type: 'bytes' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destinations', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'dataLengths', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'executeTransactions',
    outputs: [
      { name: '', internalType: 'bytes', type: 'bytes' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MetaTransactionWalletDeployer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const metaTransactionWalletDeployerABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'wallet', internalType: 'address', type: 'address', indexed: true },
      { name: 'implementation', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'WalletDeployed',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'implementation', internalType: 'address', type: 'address' },
      { name: 'initCallData', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deploy',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MultiSig
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multiSigABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Confirmation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'returnData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'Execution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'internalRequired', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InternalRequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerAddition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerRemoval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'required', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'RequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Revocation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'Submission',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_OWNER_COUNT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'confirmations',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'internalRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'required',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transactionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_required', internalType: 'uint256', type: 'uint256' },
      { name: '_internalRequired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'replaceOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_required', internalType: 'uint256', type: 'uint256' }],
    name: 'changeRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_internalRequired', internalType: 'uint256', type: 'uint256' }],
    name: 'changeInternalRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'isConfirmed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmationCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmations',
    outputs: [{ name: '_confirmations', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionIds',
    outputs: [{ name: '_transactionIds', internalType: 'uint256[]', type: 'uint256[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'string', type: 'string', indexed: false },
      { name: 'identifierHash', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'addr', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RegistryUpdated',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'registry',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'string', type: 'string' },
      { name: 'addr', internalType: 'address', type: 'address' },
    ],
    name: 'setAddressFor',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifierHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAddressForOrDie',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifierHash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getAddressFor',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifier', internalType: 'string', type: 'string' }],
    name: 'getAddressForStringOrDie',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifier', internalType: 'string', type: 'string' }],
    name: 'getAddressForString',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifierHashes', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'sender', internalType: 'address', type: 'address' },
    ],
    name: 'isOneOf',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Freezer
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const freezerABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isFrozen',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'freeze',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'target', internalType: 'address', type: 'address' }],
    name: 'unfreeze',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TransferWhitelist
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const transferWhitelistABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'addr', internalType: 'address', type: 'address', indexed: true }],
    name: 'WhitelistedAddress',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'addr', internalType: 'address', type: 'address', indexed: true }],
    name: 'WhitelistedAddressRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'contractIdentifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
    ],
    name: 'WhitelistedContractIdentifier',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'whitelistedContractIdentifiers',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newAddress', internalType: 'address', type: 'address' }],
    name: 'whitelistAddress',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'removedAddress', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeAddress',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'contractIdentifier', internalType: 'bytes32', type: 'bytes32' }],
    name: 'whitelistRegisteredContract',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumberOfWhitelistedContractIdentifiers',
    outputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_whitelist', internalType: 'address[]', type: 'address[]' }],
    name: 'setDirectlyWhitelistedAddresses',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_registeredContracts', internalType: 'bytes32[]', type: 'bytes32[]' }],
    name: 'setWhitelistedContractIdentifiers',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWhitelist',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'selfDestruct',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Election
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const electionABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'flag', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'AllowedToVoteOverMaxNumberOfGroups',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'electabilityThreshold', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ElectabilityThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'min', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ElectableValidatorsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'EpochRewardsDistributedToVoters',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'maxNumGroupsVotedFor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MaxNumGroupsVotedForSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'units', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupActiveVoteRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'group', internalType: 'address', type: 'address', indexed: true }],
    name: 'ValidatorGroupMarkedEligible',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'group', internalType: 'address', type: 'address', indexed: true }],
    name: 'ValidatorGroupMarkedIneligible',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupPendingVoteRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'units', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupVoteActivated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupVoteCast',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'allowedToVoteOverMaxNumberOfGroups',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'cachedVotesByAccount',
    outputs: [{ name: 'totalVotes', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'electabilityThreshold',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'electableValidators',
    outputs: [
      { name: 'min', internalType: 'uint256', type: 'uint256' },
      { name: 'max', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxNumGroupsVotedFor',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'minElectableValidators', internalType: 'uint256', type: 'uint256' },
      { name: 'maxElectableValidators', internalType: 'uint256', type: 'uint256' },
      { name: '_maxNumGroupsVotedFor', internalType: 'uint256', type: 'uint256' },
      { name: '_electabilityThreshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'min', internalType: 'uint256', type: 'uint256' },
      { name: 'max', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setElectableValidators',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getElectableValidators',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxNumGroupsVotedFor', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxNumGroupsVotedFor',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'threshold', internalType: 'uint256', type: 'uint256' }],
    name: 'setElectabilityThreshold',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getElectabilityThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
    ],
    name: 'vote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'activate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'activateForAccount',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'group', internalType: 'address', type: 'address' },
    ],
    name: 'hasActivatablePendingVotes',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePending',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeAllActive',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeActive',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getTotalVotesByAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'group', internalType: 'address', type: 'address' },
    ],
    name: 'updateTotalVotesByAccountForGroup',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getPendingVotesForGroupByAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getActiveVotesForGroupByAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getTotalVotesForGroupByAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getActiveVoteUnitsForGroupByAccount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getActiveVoteUnitsForGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getTotalVotesForGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getActiveVotesForGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getPendingVotesForGroup',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getGroupEligibility',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'totalEpochRewards', internalType: 'uint256', type: 'uint256' },
      { name: 'uptimes', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'getGroupEpochRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
    ],
    name: 'distributeEpochRewards',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'markGroupIneligible',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
    ],
    name: 'markGroupEligible',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getGroupsVotedForByAccount',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'canReceiveVotes',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'getNumVotesReceivable',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEligibleValidatorGroups',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalVotesForEligibleValidatorGroups',
    outputs: [
      { name: 'groups', internalType: 'address[]', type: 'address[]' },
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'electValidatorSigners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'minElectableValidators', internalType: 'uint256', type: 'uint256' },
      { name: 'maxElectableValidators', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'electNValidatorSigners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentValidatorSigners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'flag', internalType: 'bool', type: 'bool' }],
    name: 'setAllowedToVoteOverMaxNumberOfGroups',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lessers', internalType: 'address[]', type: 'address[]' },
      { name: 'greaters', internalType: 'address[]', type: 'address[]' },
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'forceDecrementVotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// EpochRewards
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const epochRewardsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'partner', internalType: 'address', type: 'address', indexed: true },
      { name: 'fraction', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'CarbonOffsettingFundSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'CommunityRewardFractionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'underspendAdjustmentFactor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'overspendAdjustmentFactor',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'RewardsMultiplierParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'payment', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TargetValidatorEpochPaymentSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TargetVotingGoldFractionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'adjustmentFactor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TargetVotingYieldParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'target', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TargetVotingYieldSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'fraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TargetVotingYieldUpdated',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'carbonOffsettingPartner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'startTime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetValidatorEpochPayment',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'targetVotingYieldInitial', internalType: 'uint256', type: 'uint256' },
      { name: 'targetVotingYieldMax', internalType: 'uint256', type: 'uint256' },
      { name: 'targetVotingYieldAdjustmentFactor', internalType: 'uint256', type: 'uint256' },
      { name: 'rewardsMultiplierMax', internalType: 'uint256', type: 'uint256' },
      {
        name: 'rewardsMultiplierUnderspendAdjustmentFactor',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'rewardsMultiplierOverspendAdjustmentFactor',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: '_targetVotingGoldFraction', internalType: 'uint256', type: 'uint256' },
      { name: '_targetValidatorEpochPayment', internalType: 'uint256', type: 'uint256' },
      { name: '_communityRewardFraction', internalType: 'uint256', type: 'uint256' },
      { name: '_carbonOffsettingPartner', internalType: 'address', type: 'address' },
      { name: '_carbonOffsettingFraction', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTargetVotingYieldParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRewardsMultiplierParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setCommunityRewardFraction',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCommunityRewardFraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'partner', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setCarbonOffsettingFund',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCarbonOffsettingFraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setTargetVotingGoldFraction',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTargetVotingGoldFraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setTargetValidatorEpochPayment',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256' },
      { name: 'underspendAdjustmentFactor', internalType: 'uint256', type: 'uint256' },
      { name: 'overspendAdjustmentFactor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setRewardsMultiplierParameters',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'max', internalType: 'uint256', type: 'uint256' },
      { name: 'adjustmentFactor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTargetVotingYieldParameters',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'targetVotingYield', internalType: 'uint256', type: 'uint256' }],
    name: 'setTargetVotingYield',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTargetGoldTotalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTargetVoterRewards',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTargetTotalEpochPaymentsInGold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRewardsMultiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getVotingGoldFraction',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updateTargetVotingYield',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isReserveLow',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'calculateTargetEpochRewards',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Governance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'approver', internalType: 'address', type: 'address', indexed: true }],
    name: 'ApproverSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'concurrentProposals', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ConcurrentProposalsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address', indexed: true },
      { name: 'functionId', internalType: 'bytes4', type: 'bytes4', indexed: true },
      { name: 'threshold', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ConstitutionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'dequeueFrequency', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DequeueFrequencySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'executionStageDuration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ExecutionStageDurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: true }],
    name: 'HotfixApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: true }],
    name: 'HotfixExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'epoch', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'HotfixPrepared',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'whitelister', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'HotfixWhitelisted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minDeposit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinDepositSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'baselineQuorumFactor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ParticipationBaselineQuorumFactorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'baselineUpdateFactor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ParticipationBaselineUpdateFactorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'participationBaseline', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ParticipationBaselineUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'participationFloor', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ParticipationFloorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalDequeued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ProposalExpired',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'proposer', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionCount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'deposit', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'revokedUpvotes', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalUpvoteRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'upvotes', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalUpvoted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalVoteRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'yesVotes', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'noVotes', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalVoteRevokedV2',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'weight', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalVoted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'yesVotes', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'noVotes', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ProposalVotedV2',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'queueExpiry', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'QueueExpirySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'referendumStageDuration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ReferendumStageDurationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'approver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'concurrentProposals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dequeueFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'dequeued',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'emptyIndices',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hotfixes',
    outputs: [
      { name: 'executed', internalType: 'bool', type: 'bool' },
      { name: 'approved', internalType: 'bool', type: 'bool' },
      { name: 'preparedEpoch', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastDequeue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minDeposit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'proposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'queueExpiry',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'refundedDeposits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stageDurations',
    outputs: [
      { name: 'approval', internalType: 'uint256', type: 'uint256' },
      { name: 'referendum', internalType: 'uint256', type: 'uint256' },
      { name: 'execution', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_approver', internalType: 'address', type: 'address' },
      { name: '_concurrentProposals', internalType: 'uint256', type: 'uint256' },
      { name: '_minDeposit', internalType: 'uint256', type: 'uint256' },
      { name: '_queueExpiry', internalType: 'uint256', type: 'uint256' },
      { name: '_dequeueFrequency', internalType: 'uint256', type: 'uint256' },
      { name: 'referendumStageDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'executionStageDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'participationBaseline', internalType: 'uint256', type: 'uint256' },
      { name: 'participationFloor', internalType: 'uint256', type: 'uint256' },
      { name: 'baselineUpdateFactor', internalType: 'uint256', type: 'uint256' },
      { name: 'baselineQuorumFactor', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_approver', internalType: 'address', type: 'address' }],
    name: 'setApprover',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_concurrentProposals', internalType: 'uint256', type: 'uint256' }],
    name: 'setConcurrentProposals',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_minDeposit', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinDeposit',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_queueExpiry', internalType: 'uint256', type: 'uint256' }],
    name: 'setQueueExpiry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_dequeueFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setDequeueFrequency',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'referendumStageDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setReferendumStageDuration',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'executionStageDuration', internalType: 'uint256', type: 'uint256' }],
    name: 'setExecutionStageDuration',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'participationBaseline', internalType: 'uint256', type: 'uint256' }],
    name: 'setParticipationBaseline',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'participationFloor', internalType: 'uint256', type: 'uint256' }],
    name: 'setParticipationFloor',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'baselineUpdateFactor', internalType: 'uint256', type: 'uint256' }],
    name: 'setBaselineUpdateFactor',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'baselineQuorumFactor', internalType: 'uint256', type: 'uint256' }],
    name: 'setBaselineQuorumFactor',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'functionId', internalType: 'bytes4', type: 'bytes4' },
      { name: 'threshold', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setConstitution',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'destinations', internalType: 'address[]', type: 'address[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'dataLengths', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'descriptionUrl', internalType: 'string', type: 'string' },
    ],
    name: 'propose',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'uint256', type: 'uint256' },
      { name: 'greater', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'upvote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposalStage',
    outputs: [{ name: '', internalType: 'enum Proposals.Stage', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'lesser', internalType: 'uint256', type: 'uint256' },
      { name: 'greater', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeUpvote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'enum Proposals.VoteValue', type: 'uint8' },
    ],
    name: 'vote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'yesVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'noVotes', internalType: 'uint256', type: 'uint256' },
      { name: 'abstainVotes', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'votePartially',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'revokeVotes',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'execute',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'approveHotfix',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'hash', internalType: 'bytes32', type: 'bytes32' },
      { name: 'whitelister', internalType: 'address', type: 'address' },
    ],
    name: 'isHotfixWhitelistedBy',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'whitelistHotfix',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'prepareHotfix',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'values', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'destinations', internalType: 'address[]', type: 'address[]' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'dataLengths', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'salt', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'executeHotfix',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isVoting',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReferendumStageDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExecutionStageDuration',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getParticipationParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'proposalExists',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getProposal',
    outputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'string', type: 'string' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getProposalTransaction',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isApproved',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getVoteTotals',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getVoteRecord',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getQueueLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'getUpvotes',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getQueue',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDequeue',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getUpvoteRecord',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getMostRecentReferendumProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'hotfixWhitelistValidatorTally',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'isHotfixPassing',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'hash', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getHotfixRecord',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'dequeueProposalsIfReady',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isQueued',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isProposalPassing',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isDequeuedProposal',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isDequeuedProposalExpired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'isQueuedProposalExpired',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'functionId', internalType: 'bytes4', type: 'bytes4' },
    ],
    name: 'getConstitution',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAmountOfGoldUsedForVoting',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GovernanceApproverMultiSig
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const governanceApproverMultiSigABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Confirmation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'returnData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'Execution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'internalRequired', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InternalRequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerAddition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerRemoval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'required', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'RequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Revocation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'Submission',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_OWNER_COUNT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_internalRequired', internalType: 'uint256', type: 'uint256' }],
    name: 'changeInternalRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_required', internalType: 'uint256', type: 'uint256' }],
    name: 'changeRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'confirmations',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmationCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmations',
    outputs: [{ name: '_confirmations', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionIds',
    outputs: [{ name: '_transactionIds', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_required', internalType: 'uint256', type: 'uint256' },
      { name: '_internalRequired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'internalRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'isConfirmed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'replaceOwner',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'required',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transactionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BlockchainParameters
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const blockchainParametersABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'limit', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'BlockGasLimitSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'gas', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'IntrinsicGasForAlternativeFeeCurrencySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'minor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'patch', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MinimumClientVersionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'window', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'activationEpoch', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'UptimeLookbackWindowSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'blockGasLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'intrinsicGasForAlternativeFeeCurrency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uptimeLookbackWindow',
    outputs: [
      { name: 'oldValue', internalType: 'uint256', type: 'uint256' },
      { name: 'nextValue', internalType: 'uint256', type: 'uint256' },
      { name: 'nextValueActivationEpoch', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256' },
      { name: 'minor', internalType: 'uint256', type: 'uint256' },
      { name: 'patch', internalType: 'uint256', type: 'uint256' },
      { name: '_gasForNonGoldCurrencies', internalType: 'uint256', type: 'uint256' },
      { name: 'gasLimit', internalType: 'uint256', type: 'uint256' },
      { name: 'lookbackWindow', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256' },
      { name: 'minor', internalType: 'uint256', type: 'uint256' },
      { name: 'patch', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMinimumClientVersion',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gasLimit', internalType: 'uint256', type: 'uint256' }],
    name: 'setBlockGasLimit',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'gas', internalType: 'uint256', type: 'uint256' }],
    name: 'setIntrinsicGasForAlternativeFeeCurrency',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'window', internalType: 'uint256', type: 'uint256' }],
    name: 'setUptimeLookbackWindow',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUptimeLookbackWindow',
    outputs: [{ name: 'lookbackWindow', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMinimumClientVersion',
    outputs: [
      { name: 'major', internalType: 'uint256', type: 'uint256' },
      { name: 'minor', internalType: 'uint256', type: 'uint256' },
      { name: 'patch', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DoubleSigningSlasher
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const doubleSigningSlasherABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DoubleSigningSlashPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reward', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'SlashingIncentivesSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'groupMembershipHistoryIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'groupMembershipAtBlock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256' },
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSlashingIncentives',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slashingIncentives',
    outputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256' },
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_penalty', internalType: 'uint256', type: 'uint256' },
      { name: '_reward', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'headerA', internalType: 'bytes', type: 'bytes' },
      { name: 'headerB', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkForDoubleSigning',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'headerA', internalType: 'bytes', type: 'bytes' },
      { name: 'headerB', internalType: 'bytes', type: 'bytes' },
      { name: 'groupMembershipHistoryIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorElectionLessers', internalType: 'address[]', type: 'address[]' },
      { name: 'validatorElectionGreaters', internalType: 'address[]', type: 'address[]' },
      { name: 'validatorElectionIndices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'groupElectionLessers', internalType: 'address[]', type: 'address[]' },
      { name: 'groupElectionGreaters', internalType: 'address[]', type: 'address[]' },
      { name: 'groupElectionIndices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'slash',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// DowntimeSlasher
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const downtimeSlasherABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'bitmap', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'BitmapSetForInterval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'startBlock', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'DowntimeSlashPerformed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'interval', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SlashableDowntimeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reward', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'SlashingIncentivesSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'bitmaps',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'groupMembershipHistoryIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'groupMembershipAtBlock',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'lastSlashedBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256' },
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setSlashingIncentives',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slashableDowntime',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slashingIncentives',
    outputs: [
      { name: 'penalty', internalType: 'uint256', type: 'uint256' },
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_penalty', internalType: 'uint256', type: 'uint256' },
      { name: '_reward', internalType: 'uint256', type: 'uint256' },
      { name: '_slashableDowntime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'interval', internalType: 'uint256', type: 'uint256' }],
    name: 'setSlashableDowntime',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBitmapForInterval',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setBitmapForInterval',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'signerIndex', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'wasDownForInterval',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'startBlock', internalType: 'uint256', type: 'uint256' },
      { name: 'endBlock', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'isBitmapSetForInterval',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'startBlocks', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'endBlocks', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signerIndices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'wasDownForIntervals',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'startBlocks', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'endBlocks', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'signerIndices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'groupMembershipHistoryIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorElectionLessers', internalType: 'address[]', type: 'address[]' },
      { name: 'validatorElectionGreaters', internalType: 'address[]', type: 'address[]' },
      { name: 'validatorElectionIndices', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'groupElectionLessers', internalType: 'address[]', type: 'address[]' },
      { name: 'groupElectionGreaters', internalType: 'address[]', type: 'address[]' },
      { name: 'groupElectionIndices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'slash',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LockedGold
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lockedGoldABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'slashed', internalType: 'address', type: 'address', indexed: true },
      { name: 'penalty', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'reporter', internalType: 'address', type: 'address', indexed: true },
      { name: 'reward', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AccountSlashed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GoldLocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GoldRelocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'available', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GoldUnlocked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GoldWithdrawn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'slasherIdentifier', internalType: 'string', type: 'string', indexed: true }],
    name: 'SlasherWhitelistAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'slasherIdentifier', internalType: 'string', type: 'string', indexed: true }],
    name: 'SlasherWhitelistRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'period', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UnlockingPeriodSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'slashingWhitelist',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalNonvoting',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'unlockingPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'slasher', internalType: 'address', type: 'address' }],
    name: 'isSlasher',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_unlockingPeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setUnlockingPeriod',
    outputs: [],
  },
  {
    constant: false,
    payable: true,
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'lock',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'incrementNonvotingAccountBalance',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decrementNonvotingAccountBalance',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'unlock',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'relock',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalLockedGold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNonvotingLockedGold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountTotalLockedGold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountNonvotingLockedGold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getPendingWithdrawals',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getPendingWithdrawal',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getTotalPendingWithdrawals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getSlashingWhitelist',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'slasherIdentifier', internalType: 'string', type: 'string' }],
    name: 'addSlasher',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'slasherIdentifier', internalType: 'string', type: 'string' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeSlasher',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'penalty', internalType: 'uint256', type: 'uint256' },
      { name: 'reporter', internalType: 'address', type: 'address' },
      { name: 'reward', internalType: 'uint256', type: 'uint256' },
      { name: 'lessers', internalType: 'address[]', type: 'address[]' },
      { name: 'greaters', internalType: 'address[]', type: 'address[]' },
      { name: 'indices', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'slash',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Validators
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const validatorsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'delay', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'CommissionUpdateDelaySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'duration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'GroupLockedGoldRequirementsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'size', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MaxGroupSizeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'length', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MembershipHistoryLengthSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ValidatorAffiliated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ValidatorBlsPublicKeyUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ValidatorDeaffiliated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'validator', internalType: 'address', type: 'address', indexed: true }],
    name: 'ValidatorDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'ValidatorEcdsaPublicKeyUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'validatorPayment', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'groupPayment', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorEpochPaymentDistributed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'commission', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'activationBlock', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupCommissionUpdateQueued',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'commission', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupCommissionUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'group', internalType: 'address', type: 'address', indexed: true }],
    name: 'ValidatorGroupDeregistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ValidatorGroupMemberAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ValidatorGroupMemberRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ValidatorGroupMemberReordered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'group', internalType: 'address', type: 'address', indexed: true },
      { name: 'commission', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorGroupRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'duration', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorLockedGoldRequirementsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'validator', internalType: 'address', type: 'address', indexed: true }],
    name: 'ValidatorRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'exponent', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'adjustmentSpeed', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorScoreParametersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address', indexed: true },
      { name: 'score', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'epochScore', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ValidatorScoreUpdated',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'commissionUpdateDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'downtimeGracePeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'groupLockedGoldRequirements',
    outputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'duration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxGroupSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'membershipHistoryLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slashingMultiplierResetPeriod',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'validatorLockedGoldRequirements',
    outputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'duration', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'groupRequirementValue', internalType: 'uint256', type: 'uint256' },
      { name: 'groupRequirementDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorRequirementValue', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorRequirementDuration', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorScoreExponent', internalType: 'uint256', type: 'uint256' },
      { name: 'validatorScoreAdjustmentSpeed', internalType: 'uint256', type: 'uint256' },
      { name: '_membershipHistoryLength', internalType: 'uint256', type: 'uint256' },
      { name: '_slashingMultiplierResetPeriod', internalType: 'uint256', type: 'uint256' },
      { name: '_maxGroupSize', internalType: 'uint256', type: 'uint256' },
      { name: '_commissionUpdateDelay', internalType: 'uint256', type: 'uint256' },
      { name: '_downtimeGracePeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'delay', internalType: 'uint256', type: 'uint256' }],
    name: 'setCommissionUpdateDelay',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'size', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxGroupSize',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'length', internalType: 'uint256', type: 'uint256' }],
    name: 'setMembershipHistoryLength',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: 'adjustmentSpeed', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setValidatorScoreParameters',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMaxGroupSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCommissionUpdateDelay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'duration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setGroupLockedGoldRequirements',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'duration', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setValidatorLockedGoldRequirements',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'registerValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getValidatorScoreParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getMembershipHistory',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uptime', internalType: 'uint256', type: 'uint256' }],
    name: 'calculateEpochScore',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'uptimes', internalType: 'uint256[]', type: 'uint256[]' }],
    name: 'calculateGroupEpochScore',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'uptime', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'updateValidatorScoreFromSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'maxPayment', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'distributeEpochPaymentsFromSigner',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'deregisterValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'group', internalType: 'address', type: 'address' }],
    name: 'affiliate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'deaffiliate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateBlsPublicKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updateEcdsaPublicKey',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'updatePublicKeys',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'commission', internalType: 'uint256', type: 'uint256' }],
    name: 'registerValidatorGroup',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'deregisterValidatorGroup',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'validator', internalType: 'address', type: 'address' }],
    name: 'addMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
    ],
    name: 'addFirstMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'validator', internalType: 'address', type: 'address' }],
    name: 'removeMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'validator', internalType: 'address', type: 'address' },
      { name: 'lesserMember', internalType: 'address', type: 'address' },
      { name: 'greaterMember', internalType: 'address', type: 'address' },
    ],
    name: 'reorderMember',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'commission', internalType: 'uint256', type: 'uint256' }],
    name: 'setNextCommissionUpdate',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'updateCommission',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getAccountLockedGoldRequirement',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'meetsAccountLockedGoldRequirements',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'getValidatorBlsPublicKeyFromSigner',
    outputs: [{ name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getValidator',
    outputs: [
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'affiliation', internalType: 'address', type: 'address' },
      { name: 'score', internalType: 'uint256', type: 'uint256' },
      { name: 'signer', internalType: 'address', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getValidatorGroup',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getGroupNumMembers',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'n', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getTopGroupValidators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accounts', internalType: 'address[]', type: 'address[]' }],
    name: 'getGroupsNumMembers',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getNumRegisteredValidators',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getValidatorLockedGoldRequirements',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getGroupLockedGoldRequirements',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRegisteredValidators',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRegisteredValidatorSigners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRegisteredValidatorGroups',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isValidatorGroup',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'isValidator',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'signer', internalType: 'address', type: 'address' }],
    name: 'getMembershipInLastEpochFromSigner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getMembershipInLastEpoch',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'validatorAccount', internalType: 'address', type: 'address' }],
    name: 'forceDeaffiliateIfValidator',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setSlashingMultiplierResetPeriod',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setDowntimeGracePeriod',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'resetSlashingMultiplier',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'halveSlashingMultiplier',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'account', internalType: 'address', type: 'address' }],
    name: 'getValidatorGroupSlashingMultiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'epochNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'groupMembershipInEpoch',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReleaseGold
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const releaseGoldABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beneficiary', internalType: 'address', type: 'address', indexed: true }],
    name: 'BeneficiarySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'canExpire', internalType: 'bool', type: 'bool', indexed: false }],
    name: 'CanExpireSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'beneficiary', internalType: 'address', type: 'address', indexed: true },
      { name: 'maxDistribution', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'DistributionLimitSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'beneficiary', internalType: 'address', type: 'address', indexed: true }],
    name: 'LiquidityProvisionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'beneficiary', internalType: 'address', type: 'address', indexed: true },
      { name: 'atAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ReleaseGoldInstanceCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'beneficiary', internalType: 'address', type: 'address', indexed: true },
      { name: 'atAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'ReleaseGoldInstanceDestroyed',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'revokeTimestamp', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'releasedBalanceAtRevoke', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ReleaseScheduleRevoked',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EXPIRATION_TIME',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'beneficiary',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'canValidate',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'canVote',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidityProvisionMet',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxDistribution',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'refundAddress',
    outputs: [{ name: '', internalType: 'address payable', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'releaseOwner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'releaseSchedule',
    outputs: [
      { name: 'releaseStartTime', internalType: 'uint256', type: 'uint256' },
      { name: 'releaseCliff', internalType: 'uint256', type: 'uint256' },
      { name: 'numReleasePeriods', internalType: 'uint256', type: 'uint256' },
      { name: 'releasePeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'amountReleasedPerPeriod', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'revocationInfo',
    outputs: [
      { name: 'revocable', internalType: 'bool', type: 'bool' },
      { name: 'canExpire', internalType: 'bool', type: 'bool' },
      { name: 'releasedBalanceAtRevoke', internalType: 'uint256', type: 'uint256' },
      { name: 'revokeTime', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalWithdrawn',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isFunded',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'erc20', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'genericTransfer',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'releaseStartTime', internalType: 'uint256', type: 'uint256' },
      { name: 'releaseCliffTime', internalType: 'uint256', type: 'uint256' },
      { name: 'numReleasePeriods', internalType: 'uint256', type: 'uint256' },
      { name: 'releasePeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'amountReleasedPerPeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'revocable', internalType: 'bool', type: 'bool' },
      { name: '_beneficiary', internalType: 'address payable', type: 'address' },
      { name: '_releaseOwner', internalType: 'address', type: 'address' },
      { name: '_refundAddress', internalType: 'address payable', type: 'address' },
      { name: 'subjectToLiquidityProvision', internalType: 'bool', type: 'bool' },
      { name: 'initialDistributionRatio', internalType: 'uint256', type: 'uint256' },
      { name: '_canValidate', internalType: 'bool', type: 'bool' },
      { name: '_canVote', internalType: 'bool', type: 'bool' },
      { name: 'registryAddress', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isRevoked',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'setLiquidityProvision',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_canExpire', internalType: 'bool', type: 'bool' }],
    name: 'setCanExpire',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'distributionRatio', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxDistribution',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newBeneficiary', internalType: 'address payable', type: 'address' }],
    name: 'setBeneficiary',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'refundAndFinalize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'revoke',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'expire',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTotalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRemainingTotalBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRemainingUnlockedBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getRemainingLockedBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentReleasedTotalAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'lockGold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'unlockGold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'relockGold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'withdrawLockedGold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address payable', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeVoteSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address payable', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeValidatorSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address payable', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithPublicKey',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address payable', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
      { name: 'ecdsaPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPublicKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'authorizeValidatorSignerWithKeys',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'signer', internalType: 'address payable', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'authorizeAttestationSigner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'name', internalType: 'string', type: 'string' },
      { name: 'dataEncryptionKey', internalType: 'bytes', type: 'bytes' },
      { name: 'walletAddress', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setAccount',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'createAccount',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'setAccountName',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'walletAddress', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'setAccountWalletAddress',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'dataEncryptionKey', internalType: 'bytes', type: 'bytes' }],
    name: 'setAccountDataEncryptionKey',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'metadataURL', internalType: 'string', type: 'string' }],
    name: 'setAccountMetadataURL',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokeActive',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'group', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesser', internalType: 'address', type: 'address' },
      { name: 'greater', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revokePending',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getWithdrawableAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Attestations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const attestationsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'issuer', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'AttestationCompleted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'AttestationExpiryBlocksSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'issuer', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'attestationRequestFeeToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AttestationIssuerSelected',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'AttestationRequestFeeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'attestationsRequested', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'attestationRequestFeeToken',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'AttestationsRequested',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'fromAccount', internalType: 'address', type: 'address', indexed: true },
      { name: 'toAccount', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'AttestationsTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MaxAttestationsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SelectIssuersWaitBlocksSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'approver', internalType: 'address', type: 'address', indexed: true },
      { name: 'indentifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'from', internalType: 'address', type: 'address', indexed: false },
      { name: 'to', internalType: 'address', type: 'address', indexed: false },
      { name: 'approved', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'TransferApproval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'amount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Withdrawal',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'attestationExpiryBlocks',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'attestationRequestFees',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxAttestations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'pendingWithdrawals',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'selectIssuersWaitBlocks',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'transferApprovals',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_attestationExpiryBlocks', internalType: 'uint256', type: 'uint256' },
      { name: '_selectIssuersWaitBlocks', internalType: 'uint256', type: 'uint256' },
      { name: '_maxAttestations', internalType: 'uint256', type: 'uint256' },
      { name: 'attestationRequestFeeTokens', internalType: 'address[]', type: 'address[]' },
      { name: 'attestationRequestFeeValues', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'revoke',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'withdraw',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getUnselectedRequest',
    outputs: [
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'address', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getAttestationIssuers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getAttestationStats',
    outputs: [
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifiersToLookup', internalType: 'bytes32[]', type: 'bytes32[]' }],
    name: 'batchGetAttestationStats',
    outputs: [
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint64[]', type: 'uint64[]' },
      { name: '', internalType: 'uint64[]', type: 'uint64[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'issuer', internalType: 'address', type: 'address' },
    ],
    name: 'getAttestationState',
    outputs: [
      { name: '', internalType: 'uint8', type: 'uint8' },
      { name: '', internalType: 'uint32', type: 'uint32' },
      { name: '', internalType: 'address', type: 'address' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'getCompletableAttestations',
    outputs: [
      { name: '', internalType: 'uint32[]', type: 'uint32[]' },
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '', internalType: 'bytes', type: 'bytes' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getAttestationRequestFee',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setAttestationRequestFee',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_attestationExpiryBlocks', internalType: 'uint256', type: 'uint256' }],
    name: 'setAttestationExpiryBlocks',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_selectIssuersWaitBlocks', internalType: 'uint256', type: 'uint256' }],
    name: 'setSelectIssuersWaitBlocks',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_maxAttestations', internalType: 'uint256', type: 'uint256' }],
    name: 'setMaxAttestations',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getMaxAttestations',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'validateAttestationCode',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifier', internalType: 'bytes32', type: 'bytes32' }],
    name: 'lookupAccountsForIdentifier',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'expected', internalType: 'uint32', type: 'uint32' },
    ],
    name: 'requireNAttestationsRequested',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Escrow
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const escrowABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'trustedIssuer', internalType: 'address', type: 'address', indexed: true }],
    name: 'DefaultTrustedIssuerAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'trustedIssuer', internalType: 'address', type: 'address', indexed: true }],
    name: 'DefaultTrustedIssuerRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'by', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'paymentId', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Revocation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'paymentId', internalType: 'address', type: 'address', indexed: false },
      { name: 'minAttestations', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'paymentId', internalType: 'address', type: 'address', indexed: true },
      { name: 'trustedIssuers', internalType: 'address[]', type: 'address[]', indexed: false },
    ],
    name: 'TrustedIssuersSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'paymentId', internalType: 'address', type: 'address', indexed: true }],
    name: 'TrustedIssuersUnset',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'paymentId', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'Withdrawal',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_TRUSTED_ISSUERS_PER_PAYMENT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'defaultTrustedIssuers',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'escrowedPayments',
    outputs: [
      { name: 'recipientIdentifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'sentIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'receivedIndex', internalType: 'uint256', type: 'uint256' },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256' },
      { name: 'expirySeconds', internalType: 'uint256', type: 'uint256' },
      { name: 'minAttestations', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'receivedPaymentIds',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registryContract',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'sentPaymentIds',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'trustedIssuersPerPayment',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'trustedIssuer', internalType: 'address', type: 'address' }],
    name: 'addDefaultTrustedIssuer',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'trustedIssuer', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeDefaultTrustedIssuer',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'expirySeconds', internalType: 'uint256', type: 'uint256' },
      { name: 'paymentId', internalType: 'address', type: 'address' },
      { name: 'minAttestations', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'expirySeconds', internalType: 'uint256', type: 'uint256' },
      { name: 'paymentId', internalType: 'address', type: 'address' },
      { name: 'minAttestations', internalType: 'uint256', type: 'uint256' },
      { name: 'trustedIssuers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'transferWithTrustedIssuers',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'paymentId', internalType: 'address', type: 'address' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'withdraw',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'paymentId', internalType: 'address', type: 'address' }],
    name: 'revoke',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'identifier', internalType: 'bytes32', type: 'bytes32' }],
    name: 'getReceivedPaymentIds',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sender', internalType: 'address', type: 'address' }],
    name: 'getSentPaymentIds',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'paymentId', internalType: 'address', type: 'address' }],
    name: 'getTrustedIssuersPerPayment',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDefaultTrustedIssuers',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FederatedAttestations
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const federatedAttestationsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'issuer', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'publishedOn', internalType: 'uint64', type: 'uint64', indexed: false },
    ],
    name: 'AttestationRegistered',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32', indexed: true },
      { name: 'issuer', internalType: 'address', type: 'address', indexed: true },
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'signer', internalType: 'address', type: 'address', indexed: false },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64', indexed: false },
      { name: 'publishedOn', internalType: 'uint64', type: 'uint64', indexed: false },
    ],
    name: 'AttestationRevoked',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'eip712DomainSeparator', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'EIP712DomainSeparatorSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'EIP712_OWNERSHIP_ATTESTATION_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_ATTESTATIONS_PER_IDENTIFIER',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_IDENTIFIERS_PER_ADDRESS',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'addressToIdentifiers',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'eip712DomainSeparator',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'identifierToAttestations',
    outputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64' },
      { name: 'publishedOn', internalType: 'uint64', type: 'uint64' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registryContract',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'revokedAttestations',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'registerAttestationAsIssuer',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'issuer', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'registerAttestation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'issuer', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
    ],
    name: 'revokeAttestation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'issuer', internalType: 'address', type: 'address' },
      { name: 'identifiers', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'batchRevokeAttestations',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'trustedIssuers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'lookupAttestations',
    outputs: [
      { name: 'countsPerIssuer', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'accounts', internalType: 'address[]', type: 'address[]' },
      { name: 'signers', internalType: 'address[]', type: 'address[]' },
      { name: 'issuedOns', internalType: 'uint64[]', type: 'uint64[]' },
      { name: 'publishedOns', internalType: 'uint64[]', type: 'uint64[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'trustedIssuers', internalType: 'address[]', type: 'address[]' },
    ],
    name: 'lookupIdentifiers',
    outputs: [
      { name: 'countsPerIssuer', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'identifiers', internalType: 'bytes32[]', type: 'bytes32[]' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'issuer', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'validateAttestationSig',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'identifier', internalType: 'bytes32', type: 'bytes32' },
      { name: 'issuer', internalType: 'address', type: 'address' },
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'signer', internalType: 'address', type: 'address' },
      { name: 'issuedOn', internalType: 'uint64', type: 'uint64' },
    ],
    name: 'getUniqueAttestationHash',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Random
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const randomABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'RandomnessBlockRetentionWindowSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'commitments',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'randomnessBlockRetentionWindow',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_randomnessBlockRetentionWindow', internalType: 'uint256', type: 'uint256' }],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setRandomnessBlockRetentionWindow',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'randomness', internalType: 'bytes32', type: 'bytes32' },
      { name: 'newCommitment', internalType: 'bytes32', type: 'bytes32' },
      { name: 'proposer', internalType: 'address', type: 'address' },
    ],
    name: 'revealAndCommit',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [{ name: 'randomness', internalType: 'bytes32', type: 'bytes32' }],
    name: 'computeCommitment',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'random',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockRandomness',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OdisPayments
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const odisPaymentsABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'account', internalType: 'address', type: 'address', indexed: true },
      { name: 'valueInCUSD', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PaymentMade',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registryContract',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'totalPaidCUSD',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'account', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'payInCUSD',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Exchange
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'goldBucket', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stableBucket', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BucketsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'exchanger', internalType: 'address', type: 'address', indexed: true },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'soldGold', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Exchanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minimumReports', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinimumReportsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reserveFraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReserveFractionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spread', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SpreadSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stable', internalType: 'address', type: 'address', indexed: true }],
    name: 'StableTokenSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'updateFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateFrequencySet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'goldBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastBucketUpdate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minimumReports',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveFraction',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'spread',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableTokenRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'updateFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'stableTokenIdentifier', internalType: 'string', type: 'string' },
      { name: '_spread', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveFraction', internalType: 'uint256', type: 'uint256' },
      { name: '_updateFrequency', internalType: 'uint256', type: 'uint256' },
      { name: '_minimumReports', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'activateStable',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'sell',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'exchange',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'buyGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'buy',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getBuyTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getSellTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sellGold', internalType: 'bool', type: 'bool' }],
    name: 'getBuyAndSellBuckets',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newUpdateFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setUpdateFrequency',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newMininumReports', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinimumReports',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newStableToken', internalType: 'address', type: 'address' }],
    name: 'setStableToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSpread', internalType: 'uint256', type: 'uint256' }],
    name: 'setSpread',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newReserveFraction', internalType: 'uint256', type: 'uint256' }],
    name: 'setReserveFraction',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExchangeEUR
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeEurABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'goldBucket', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stableBucket', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BucketsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'exchanger', internalType: 'address', type: 'address', indexed: true },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'soldGold', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Exchanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minimumReports', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinimumReportsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reserveFraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReserveFractionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spread', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SpreadSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stable', internalType: 'address', type: 'address', indexed: true }],
    name: 'StableTokenSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'updateFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateFrequencySet',
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'activateStable',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'buyGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'buy',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'exchange',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sellGold', internalType: 'bool', type: 'bool' }],
    name: 'getBuyAndSellBuckets',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getBuyTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getSellTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'goldBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'stableTokenIdentifier', internalType: 'string', type: 'string' },
      { name: '_spread', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveFraction', internalType: 'uint256', type: 'uint256' },
      { name: '_updateFrequency', internalType: 'uint256', type: 'uint256' },
      { name: '_minimumReports', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastBucketUpdate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minimumReports',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveFraction',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'sell',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newMininumReports', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinimumReports',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newReserveFraction', internalType: 'uint256', type: 'uint256' }],
    name: 'setReserveFraction',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSpread', internalType: 'uint256', type: 'uint256' }],
    name: 'setSpread',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newStableToken', internalType: 'address', type: 'address' }],
    name: 'setStableToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newUpdateFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setUpdateFrequency',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'spread',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableTokenRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'updateFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ExchangeBRL
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const exchangeBrlABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'goldBucket', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'stableBucket', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'BucketsUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'exchanger', internalType: 'address', type: 'address', indexed: true },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'soldGold', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'Exchanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'minimumReports', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'MinimumReportsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reserveFraction', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReserveFractionSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spread', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SpreadSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'stable', internalType: 'address', type: 'address', indexed: true }],
    name: 'StableTokenSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'updateFrequency', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'UpdateFrequencySet',
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'activateStable',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxSellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'buyGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'buy',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'exchange',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'sellGold', internalType: 'bool', type: 'bool' }],
    name: 'getBuyAndSellBuckets',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getBuyTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'getSellTokenAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'goldBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'stableTokenIdentifier', internalType: 'string', type: 'string' },
      { name: '_spread', internalType: 'uint256', type: 'uint256' },
      { name: '_reserveFraction', internalType: 'uint256', type: 'uint256' },
      { name: '_updateFrequency', internalType: 'uint256', type: 'uint256' },
      { name: '_minimumReports', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastBucketUpdate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minimumReports',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserveFraction',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'minBuyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellGold', internalType: 'bool', type: 'bool' },
    ],
    name: 'sell',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newMininumReports', internalType: 'uint256', type: 'uint256' }],
    name: 'setMinimumReports',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newReserveFraction', internalType: 'uint256', type: 'uint256' }],
    name: 'setReserveFraction',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSpread', internalType: 'uint256', type: 'uint256' }],
    name: 'setSpread',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newStableToken', internalType: 'address', type: 'address' }],
    name: 'setStableToken',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newUpdateFrequency', internalType: 'uint256', type: 'uint256' }],
    name: 'setUpdateFrequency',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'spread',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stable',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableBucket',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'stableTokenRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'updateFrequency',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Reserve
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reserveABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'symbols', internalType: 'bytes32[]', type: 'bytes32[]', indexed: false },
      { name: 'weights', internalType: 'uint256[]', type: 'uint256[]', indexed: false },
    ],
    name: 'AssetAllocationSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'ratio', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'DailySpendingRatioSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'exchangeSpender', internalType: 'address', type: 'address', indexed: true }],
    name: 'ExchangeSpenderAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'exchangeSpender', internalType: 'address', type: 'address', indexed: true }],
    name: 'ExchangeSpenderRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'otherReserveAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OtherReserveAddressAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'otherReserveAddress', internalType: 'address', type: 'address', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'OtherReserveAddressRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'ReserveGoldTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spender', internalType: 'address', type: 'address', indexed: true }],
    name: 'SpenderAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spender', internalType: 'address', type: 'address', indexed: true }],
    name: 'SpenderRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TobinTaxReserveRatioSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TobinTaxSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'TobinTaxStalenessThresholdSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'token', internalType: 'address', type: 'address', indexed: true }],
    name: 'TokenAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'index', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TokenRemoved',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'assetAllocationSymbols',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
    name: 'assetAllocationWeights',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'exchangeSpenderAddresses',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'frozenReserveGoldDays',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'frozenReserveGoldStartBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'frozenReserveGoldStartDay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isExchangeSpender',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOtherReserveAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isSpender',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastSpendingDay',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'otherReserveAddresses',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'spendingLimit',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tobinTax',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tobinTaxCache',
    outputs: [
      { name: 'numerator', internalType: 'uint128', type: 'uint128' },
      { name: 'timestamp', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tobinTaxReserveRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tobinTaxStalenessThreshold',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: '_tobinTaxStalenessThreshold', internalType: 'uint256', type: 'uint256' },
      { name: '_spendingRatio', internalType: 'uint256', type: 'uint256' },
      { name: '_frozenGold', internalType: 'uint256', type: 'uint256' },
      { name: '_frozenDays', internalType: 'uint256', type: 'uint256' },
      { name: '_assetAllocationSymbols', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: '_assetAllocationWeights', internalType: 'uint256[]', type: 'uint256[]' },
      { name: '_tobinTax', internalType: 'uint256', type: 'uint256' },
      { name: '_tobinTaxReserveRatio', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setTobinTaxStalenessThreshold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setTobinTax',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'setTobinTaxReserveRatio',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'ratio', internalType: 'uint256', type: 'uint256' }],
    name: 'setDailySpendingRatio',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getDailySpendingRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'frozenGold', internalType: 'uint256', type: 'uint256' },
      { name: 'frozenDays', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setFrozenGold',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'symbols', internalType: 'bytes32[]', type: 'bytes32[]' },
      { name: 'weights', internalType: 'uint256[]', type: 'uint256[]' },
    ],
    name: 'setAssetAllocations',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'addToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeToken',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'reserveAddress', internalType: 'address', type: 'address' }],
    name: 'addOtherReserveAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'reserveAddress', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOtherReserveAddress',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'addSpender',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'removeSpender',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'spender', internalType: 'address', type: 'address' }],
    name: 'addExchangeSpender',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeExchangeSpender',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExchangeSpenders',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address payable', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferGold',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address payable', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferExchangeGold',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'getOrComputeTobinTax',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getTokens',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOtherReserveAddresses',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAssetAllocationSymbols',
    outputs: [{ name: '', internalType: 'bytes32[]', type: 'bytes32[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getAssetAllocationWeights',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUnfrozenBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserveGoldBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOtherReserveAddressesGoldBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getUnfrozenReserveGoldBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getFrozenReserveGoldBalance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserveRatio',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ReserveSpenderMultiSig
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const reserveSpenderMultiSigABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Confirmation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'returnData', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'Execution',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'internalRequired', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InternalRequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerAddition',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'owner', internalType: 'address', type: 'address', indexed: true }],
    name: 'OwnerRemoval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'required', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'RequirementChange',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address', indexed: true },
      { name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true },
    ],
    name: 'Revocation',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'Submission',
  },
  { payable: true, stateMutability: 'payable', type: 'fallback' },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'MAX_OWNER_COUNT',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'addOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_internalRequired', internalType: 'uint256', type: 'uint256' }],
    name: 'changeInternalRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_required', internalType: 'uint256', type: 'uint256' }],
    name: 'changeRequirement',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'confirmTransaction',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'confirmations',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'executeTransaction',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmationCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'getConfirmations',
    outputs: [{ name: '_confirmations', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getOwners',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionCount',
    outputs: [{ name: 'count', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'uint256', type: 'uint256' },
      { name: 'pending', internalType: 'bool', type: 'bool' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
    name: 'getTransactionIds',
    outputs: [{ name: '_transactionIds', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_owners', internalType: 'address[]', type: 'address[]' },
      { name: '_required', internalType: 'uint256', type: 'uint256' },
      { name: '_internalRequired', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'internalRequired',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'isConfirmed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'owners',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'removeOwner',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'newOwner', internalType: 'address', type: 'address' },
    ],
    name: 'replaceOwner',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'required',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
    name: 'revokeConfirmation',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'submitTransaction',
    outputs: [{ name: 'transactionId', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'transactionCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'transactions',
    outputs: [
      { name: 'destination', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
      { name: 'executed', internalType: 'bool', type: 'bool' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'factor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationFactorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationParametersUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'comment', internalType: 'string', type: 'string', indexed: false }],
    name: 'TransferComment',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'inflationRate', internalType: 'uint256', type: 'uint256' },
      { name: 'inflationFactorUpdatePeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'initialBalanceAddresses', internalType: 'address[]', type: 'address[]' },
      { name: 'initialBalanceValues', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'exchangeIdentifier', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setInflationParameters',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'transferWithComment',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountOwner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountOwner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getInflationParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'valueToUnits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExchangeRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
    name: 'unitsToValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'debitGasFees',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
      { name: 'gatewayFeeRecipient', internalType: 'address', type: 'address' },
      { name: 'communityFund', internalType: 'address', type: 'address' },
      { name: 'refund', internalType: 'uint256', type: 'uint256' },
      { name: 'tipTxFee', internalType: 'uint256', type: 'uint256' },
      { name: 'gatewayFee', internalType: 'uint256', type: 'uint256' },
      { name: 'baseTxFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'creditGasFees',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableTokenEUR
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenEurABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'factor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationFactorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationParametersUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'comment', internalType: 'string', type: 'string', indexed: false }],
    name: 'TransferComment',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountOwner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountOwner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
      { name: 'gatewayFeeRecipient', internalType: 'address', type: 'address' },
      { name: 'communityFund', internalType: 'address', type: 'address' },
      { name: 'refund', internalType: 'uint256', type: 'uint256' },
      { name: 'tipTxFee', internalType: 'uint256', type: 'uint256' },
      { name: 'gatewayFee', internalType: 'uint256', type: 'uint256' },
      { name: 'baseTxFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'creditGasFees',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'debitGasFees',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExchangeRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getInflationParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'inflationRate', internalType: 'uint256', type: 'uint256' },
      { name: 'inflationFactorUpdatePeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'initialBalanceAddresses', internalType: 'address[]', type: 'address[]' },
      { name: 'initialBalanceValues', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'exchangeIdentifier', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setInflationParameters',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'transferWithComment',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
    name: 'unitsToValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'valueToUnits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StableTokenBRL
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stableTokenBrlABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address', indexed: true },
      { name: 'spender', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'factor', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationFactorUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'lastUpdated', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'InflationParametersUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'comment', internalType: 'string', type: 'string', indexed: false }],
    name: 'TransferComment',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'accountOwner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'accountOwner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'burn',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'sender', internalType: 'address', type: 'address' },
      { name: 'blsKey', internalType: 'bytes', type: 'bytes' },
      { name: 'blsPop', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'checkProofOfPossession',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'feeRecipient', internalType: 'address', type: 'address' },
      { name: 'gatewayFeeRecipient', internalType: 'address', type: 'address' },
      { name: 'communityFund', internalType: 'address', type: 'address' },
      { name: 'refund', internalType: 'uint256', type: 'uint256' },
      { name: 'tipTxFee', internalType: 'uint256', type: 'uint256' },
      { name: 'gatewayFee', internalType: 'uint256', type: 'uint256' },
      { name: 'baseTxFee', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'creditGasFees',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'debitGasFees',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'decreaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'aNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'aDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'bNumerator', internalType: 'uint256', type: 'uint256' },
      { name: 'bDenominator', internalType: 'uint256', type: 'uint256' },
      { name: 'exponent', internalType: 'uint256', type: 'uint256' },
      { name: '_decimals', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'fractionMulExp',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getBlockNumberFromHeader',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochNumber',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getEpochNumberOfBlock',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getEpochSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getExchangeRegistryId',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getInflationParameters',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getParentSealBitmap',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'getVerifiedSealBitmapFromHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'header', internalType: 'bytes', type: 'bytes' }],
    name: 'hashHeader',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'increaseAllowance',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_name', internalType: 'string', type: 'string' },
      { name: '_symbol', internalType: 'string', type: 'string' },
      { name: '_decimals', internalType: 'uint8', type: 'uint8' },
      { name: 'registryAddress', internalType: 'address', type: 'address' },
      { name: 'inflationRate', internalType: 'uint256', type: 'uint256' },
      { name: 'inflationFactorUpdatePeriod', internalType: 'uint256', type: 'uint256' },
      { name: 'initialBalanceAddresses', internalType: 'address[]', type: 'address[]' },
      { name: 'initialBalanceValues', internalType: 'uint256[]', type: 'uint256[]' },
      { name: 'exchangeIdentifier', internalType: 'string', type: 'string' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'minQuorumSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'minQuorumSizeInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'numberValidatorsInCurrentSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'numberValidatorsInSet',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'rate', internalType: 'uint256', type: 'uint256' },
      { name: 'updatePeriod', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setInflationParameters',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'comment', internalType: 'string', type: 'string' },
    ],
    name: 'transferWithComment',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'units', internalType: 'uint256', type: 'uint256' }],
    name: 'unitsToValue',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'validatorSignerAddressFromCurrentSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'index', internalType: 'uint256', type: 'uint256' },
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'validatorSignerAddressFromSet',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
    name: 'valueToUnits',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SortedOracles
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sortedOraclesABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'MedianUpdated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracleAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OracleAdded',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracleAddress', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OracleRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OracleReportRemoved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: true },
      { name: 'oracle', internalType: 'address', type: 'address', indexed: true },
      { name: 'timestamp', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'value', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'OracleReported',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'reportExpiry', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'ReportExpirySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'token', internalType: 'address', type: 'address', indexed: false },
      { name: 'reportExpiry', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'TokenReportExpirySet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'isOracle',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'oracles',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reportExpirySeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'tokenReportExpirySeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_reportExpirySeconds', internalType: 'uint256', type: 'uint256' }],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_reportExpirySeconds', internalType: 'uint256', type: 'uint256' }],
    name: 'setReportExpiry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_token', internalType: 'address', type: 'address' },
      { name: '_reportExpirySeconds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setTokenReportExpiry',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'oracleAddress', internalType: 'address', type: 'address' },
    ],
    name: 'addOracle',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'oracleAddress', internalType: 'address', type: 'address' },
      { name: 'index', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeOracle',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'n', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'removeExpiredReports',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'isOldestReportExpired',
    outputs: [
      { name: '', internalType: 'bool', type: 'bool' },
      { name: '', internalType: 'address', type: 'address' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'lesserKey', internalType: 'address', type: 'address' },
      { name: 'greaterKey', internalType: 'address', type: 'address' },
    ],
    name: 'report',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'numRates',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'medianRate',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getRates',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '',
        internalType: 'enum SortedLinkedListWithMedian.MedianRelation[]',
        type: 'uint8[]',
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'numTimestamps',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'medianTimestamp',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getTimestamps',
    outputs: [
      { name: '', internalType: 'address[]', type: 'address[]' },
      { name: '', internalType: 'uint256[]', type: 'uint256[]' },
      {
        name: '',
        internalType: 'enum SortedLinkedListWithMedian.MedianRelation[]',
        type: 'uint8[]',
      },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getOracles',
    outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'token', internalType: 'address', type: 'address' }],
    name: 'getTokenReportExpirySeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GrandaMento
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const grandaMentoABI = [
  {
    payable: false,
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [{ name: 'test', internalType: 'bool', type: 'bool' }],
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'approver', internalType: 'address', type: 'address', indexed: false }],
    name: 'ApproverSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ExchangeProposalApproved',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ExchangeProposalCancelled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true },
      { name: 'exchanger', internalType: 'address', type: 'address', indexed: true },
      { name: 'stableTokenRegistryId', internalType: 'string', type: 'string', indexed: false },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'sellCelo', internalType: 'bool', type: 'bool', indexed: false },
    ],
    name: 'ExchangeProposalCreated',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256', indexed: true }],
    name: 'ExchangeProposalExecuted',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'maxApprovalExchangeRateChange',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'MaxApprovalExchangeRateChangeSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'previousOwner', internalType: 'address', type: 'address', indexed: true },
      { name: 'newOwner', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'OwnershipTransferred',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address', indexed: true }],
    name: 'RegistrySet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [{ name: 'spread', internalType: 'uint256', type: 'uint256', indexed: false }],
    name: 'SpreadSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'stableTokenRegistryId', internalType: 'string', type: 'string', indexed: false },
      { name: 'minExchangeAmount', internalType: 'uint256', type: 'uint256', indexed: false },
      { name: 'maxExchangeAmount', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'StableTokenExchangeLimitsSet',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'vetoPeriodSeconds', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'VetoPeriodSecondsSet',
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'activeProposalIdsSuperset',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'approver',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'exchangeProposalCount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'exchangeProposals',
    outputs: [
      { name: 'exchanger', internalType: 'address payable', type: 'address' },
      { name: 'stableToken', internalType: 'address', type: 'address' },
      { name: 'state', internalType: 'enum GrandaMento.ExchangeProposalState', type: 'uint8' },
      { name: 'sellCelo', internalType: 'bool', type: 'bool' },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'buyAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'celoStableTokenExchangeRate', internalType: 'uint256', type: 'uint256' },
      { name: 'vetoPeriodSeconds', internalType: 'uint256', type: 'uint256' },
      { name: 'approvalTimestamp', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'initialized',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'isOwner',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxApprovalExchangeRateChange',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'registry',
    outputs: [{ name: '', internalType: 'contract IRegistry', type: 'address' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'renounceOwnership',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'registryAddress', internalType: 'address', type: 'address' }],
    name: 'setRegistry',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'spread',
    outputs: [{ name: 'value', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'string', type: 'string' }],
    name: 'stableTokenExchangeLimits',
    outputs: [
      { name: 'minExchangeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxExchangeAmount', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newOwner', internalType: 'address', type: 'address' }],
    name: 'transferOwnership',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'vetoPeriodSeconds',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'getVersionNumber',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '_registry', internalType: 'address', type: 'address' },
      { name: '_approver', internalType: 'address', type: 'address' },
      { name: '_maxApprovalExchangeRateChange', internalType: 'uint256', type: 'uint256' },
      { name: '_spread', internalType: 'uint256', type: 'uint256' },
      { name: '_vetoPeriodSeconds', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'stableTokenRegistryId', internalType: 'string', type: 'string' },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellCelo', internalType: 'bool', type: 'bool' },
    ],
    name: 'createExchangeProposal',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'approveExchangeProposal',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'cancelExchangeProposal',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'proposalId', internalType: 'uint256', type: 'uint256' }],
    name: 'executeExchangeProposal',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'celoStableTokenExchangeRate', internalType: 'uint256', type: 'uint256' },
      { name: 'sellAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'sellCelo', internalType: 'bool', type: 'bool' },
    ],
    name: 'getBuyAmount',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'removeFromActiveProposalIdsSuperset',
    outputs: [],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getActiveProposalIds',
    outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
  },
  {
    constant: true,
    payable: false,
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'stableTokenRegistryId', internalType: 'string', type: 'string' }],
    name: 'getStableTokenExchangeLimits',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newApprover', internalType: 'address', type: 'address' }],
    name: 'setApprover',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'newMaxApprovalExchangeRateChange', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setMaxApprovalExchangeRateChange',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newSpread', internalType: 'uint256', type: 'uint256' }],
    name: 'setSpread',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'stableTokenRegistryId', internalType: 'string', type: 'string' },
      { name: 'minExchangeAmount', internalType: 'uint256', type: 'uint256' },
      { name: 'maxExchangeAmount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'setStableTokenExchangeLimits',
    outputs: [],
  },
  {
    constant: false,
    payable: false,
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'newVetoPeriodSeconds', internalType: 'uint256', type: 'uint256' }],
    name: 'setVetoPeriodSeconds',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof proxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof proxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: proxyABI, ...config } as UseContractReadConfig<
    typeof proxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof proxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof proxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: proxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof proxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof proxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof proxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: proxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof proxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof proxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof proxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof proxyABI, TFunctionName, TMode>({
    abi: proxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof proxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof proxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof proxyABI, '_transferOwnership', TMode>({
    abi: proxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useProxySetAndInitializeImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof proxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof proxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof proxyABI, '_setAndInitializeImplementation', TMode>({
    abi: proxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof proxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof proxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof proxyABI, '_setImplementation', TMode>({
    abi: proxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link proxyABI}__.
 */
export function usePrepareProxyWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof proxyABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: proxyABI, ...config } as UsePrepareContractWriteConfig<
    typeof proxyABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof proxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: proxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof proxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof proxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: proxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof proxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link proxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof proxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: proxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof proxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proxyABI}__.
 */
export function useProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof proxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: proxyABI, ...config } as UseContractEventConfig<
    typeof proxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof proxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: proxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof proxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link proxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useProxyOwnerSetEvent(
  config: Omit<UseContractEventConfig<typeof proxyABI, 'OwnerSet'>, 'abi' | 'eventName'> = {} as any
) {
  return useContractEvent({
    abi: proxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof proxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationsABI}__.
 */
export function useMigrationsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof migrationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof migrationsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: migrationsABI, ...config } as UseContractReadConfig<
    typeof migrationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"last_completed_migration"`.
 */
export function useMigrationsLastCompletedMigration<
  TFunctionName extends 'last_completed_migration',
  TSelectData = ReadContractResult<typeof migrationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof migrationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: migrationsABI,
    functionName: 'last_completed_migration',
    ...config,
  } as UseContractReadConfig<typeof migrationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"owner"`.
 */
export function useMigrationsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof migrationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof migrationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: migrationsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof migrationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationsABI}__.
 */
export function useMigrationsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof migrationsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof migrationsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof migrationsABI, TFunctionName, TMode>({
    abi: migrationsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"setCompleted"`.
 */
export function useMigrationsSetCompleted<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof migrationsABI, 'setCompleted'>['request']['abi'],
        'setCompleted',
        TMode
      > & { functionName?: 'setCompleted' }
    : UseContractWriteConfig<typeof migrationsABI, 'setCompleted', TMode> & {
        abi?: never
        functionName?: 'setCompleted'
      } = {} as any
) {
  return useContractWrite<typeof migrationsABI, 'setCompleted', TMode>({
    abi: migrationsABI,
    functionName: 'setCompleted',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"upgrade"`.
 */
export function useMigrationsUpgrade<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof migrationsABI, 'upgrade'>['request']['abi'],
        'upgrade',
        TMode
      > & { functionName?: 'upgrade' }
    : UseContractWriteConfig<typeof migrationsABI, 'upgrade', TMode> & {
        abi?: never
        functionName?: 'upgrade'
      } = {} as any
) {
  return useContractWrite<typeof migrationsABI, 'upgrade', TMode>({
    abi: migrationsABI,
    functionName: 'upgrade',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationsABI}__.
 */
export function usePrepareMigrationsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof migrationsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: migrationsABI, ...config } as UsePrepareContractWriteConfig<
    typeof migrationsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"setCompleted"`.
 */
export function usePrepareMigrationsSetCompleted(
  config: Omit<
    UsePrepareContractWriteConfig<typeof migrationsABI, 'setCompleted'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: migrationsABI,
    functionName: 'setCompleted',
    ...config,
  } as UsePrepareContractWriteConfig<typeof migrationsABI, 'setCompleted'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link migrationsABI}__ and `functionName` set to `"upgrade"`.
 */
export function usePrepareMigrationsUpgrade(
  config: Omit<
    UsePrepareContractWriteConfig<typeof migrationsABI, 'upgrade'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: migrationsABI,
    functionName: 'upgrade',
    ...config,
  } as UsePrepareContractWriteConfig<typeof migrationsABI, 'upgrade'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link initializableABI}__.
 */
export function useInitializableRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof initializableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof initializableABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: initializableABI, ...config } as UseContractReadConfig<
    typeof initializableABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link initializableABI}__ and `functionName` set to `"initialized"`.
 */
export function useInitializableInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof initializableABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof initializableABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: initializableABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof initializableABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usingRegistryABI}__.
 */
export function useUsingRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof usingRegistryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: usingRegistryABI, ...config } as UseContractReadConfig<
    typeof usingRegistryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"isOwner"`.
 */
export function useUsingRegistryIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof usingRegistryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: usingRegistryABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"owner"`.
 */
export function useUsingRegistryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof usingRegistryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: usingRegistryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"registry"`.
 */
export function useUsingRegistryRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof usingRegistryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: usingRegistryABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof usingRegistryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usingRegistryABI}__.
 */
export function useUsingRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof usingRegistryABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof usingRegistryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof usingRegistryABI, TFunctionName, TMode>({
    abi: usingRegistryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useUsingRegistryRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof usingRegistryABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof usingRegistryABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof usingRegistryABI, 'renounceOwnership', TMode>({
    abi: usingRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useUsingRegistryTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof usingRegistryABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof usingRegistryABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof usingRegistryABI, 'transferOwnership', TMode>({
    abi: usingRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useUsingRegistrySetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof usingRegistryABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof usingRegistryABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof usingRegistryABI, 'setRegistry', TMode>({
    abi: usingRegistryABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usingRegistryABI}__.
 */
export function usePrepareUsingRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usingRegistryABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: usingRegistryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof usingRegistryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareUsingRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usingRegistryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: usingRegistryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usingRegistryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareUsingRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usingRegistryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: usingRegistryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usingRegistryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link usingRegistryABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareUsingRegistrySetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof usingRegistryABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: usingRegistryABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof usingRegistryABI, 'setRegistry'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingRegistryABI}__.
 */
export function useUsingRegistryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof usingRegistryABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: usingRegistryABI, ...config } as UseContractEventConfig<
    typeof usingRegistryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingRegistryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useUsingRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof usingRegistryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: usingRegistryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof usingRegistryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link usingRegistryABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useUsingRegistryRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof usingRegistryABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: usingRegistryABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof usingRegistryABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsProxyABI}__.
 */
export function useAccountsProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accountsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: accountsProxyABI, ...config } as UseContractReadConfig<
    typeof accountsProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useAccountsProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof accountsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof accountsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useAccountsProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof accountsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof accountsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsProxyABI}__.
 */
export function useAccountsProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accountsProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof accountsProxyABI, TFunctionName, TMode>({
    abi: accountsProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useAccountsProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof accountsProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof accountsProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: accountsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useAccountsProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof accountsProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof accountsProxyABI, '_setImplementation', TMode>({
    abi: accountsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useAccountsProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof accountsProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof accountsProxyABI, '_transferOwnership', TMode>({
    abi: accountsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsProxyABI}__.
 */
export function usePrepareAccountsProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareAccountsProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareAccountsProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareAccountsProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsProxyABI}__.
 */
export function useAccountsProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof accountsProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: accountsProxyABI, ...config } as UseContractEventConfig<
    typeof accountsProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useAccountsProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof accountsProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useAccountsProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof accountsProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsProxyABI}__.
 */
export function useAttestationsProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof attestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: attestationsProxyABI, ...config } as UseContractReadConfig<
    typeof attestationsProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useAttestationsProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof attestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof attestationsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useAttestationsProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof attestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof attestationsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__.
 */
export function useAttestationsProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof attestationsProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof attestationsProxyABI, TFunctionName, TMode>({
    abi: attestationsProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useAttestationsProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof attestationsProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof attestationsProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: attestationsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useAttestationsProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof attestationsProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof attestationsProxyABI, '_setImplementation', TMode>({
    abi: attestationsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useAttestationsProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof attestationsProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof attestationsProxyABI, '_transferOwnership', TMode>({
    abi: attestationsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__.
 */
export function usePrepareAttestationsProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareAttestationsProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof attestationsProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareAttestationsProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareAttestationsProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsProxyABI}__.
 */
export function useAttestationsProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof attestationsProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: attestationsProxyABI, ...config } as UseContractEventConfig<
    typeof attestationsProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useAttestationsProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useAttestationsProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersProxyABI}__.
 */
export function useBlockchainParametersProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof blockchainParametersProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: blockchainParametersProxyABI, ...config } as UseContractReadConfig<
    typeof blockchainParametersProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useBlockchainParametersProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof blockchainParametersProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useBlockchainParametersProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof blockchainParametersProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__.
 */
export function useBlockchainParametersProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blockchainParametersProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof blockchainParametersProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersProxyABI, TFunctionName, TMode>({
    abi: blockchainParametersProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useBlockchainParametersProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof blockchainParametersProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof blockchainParametersProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: blockchainParametersProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useBlockchainParametersProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof blockchainParametersProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersProxyABI, '_setImplementation', TMode>({
    abi: blockchainParametersProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useBlockchainParametersProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof blockchainParametersProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersProxyABI, '_transferOwnership', TMode>({
    abi: blockchainParametersProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__.
 */
export function usePrepareBlockchainParametersProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareBlockchainParametersProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof blockchainParametersProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof blockchainParametersProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareBlockchainParametersProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareBlockchainParametersProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersProxyABI}__.
 */
export function useBlockchainParametersProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersProxyABI,
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useBlockchainParametersProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useBlockchainParametersProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__.
 */
export function useDoubleSigningSlasherProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof doubleSigningSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: doubleSigningSlasherProxyABI, ...config } as UseContractReadConfig<
    typeof doubleSigningSlasherProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useDoubleSigningSlasherProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useDoubleSigningSlasherProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__.
 */
export function useDoubleSigningSlasherProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doubleSigningSlasherProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof doubleSigningSlasherProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherProxyABI, TFunctionName, TMode>({
    abi: doubleSigningSlasherProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useDoubleSigningSlasherProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof doubleSigningSlasherProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof doubleSigningSlasherProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useDoubleSigningSlasherProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherProxyABI, '_setImplementation', TMode>({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useDoubleSigningSlasherProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherProxyABI, '_transferOwnership', TMode>({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__.
 */
export function usePrepareDoubleSigningSlasherProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareDoubleSigningSlasherProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof doubleSigningSlasherProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof doubleSigningSlasherProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareDoubleSigningSlasherProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareDoubleSigningSlasherProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__.
 */
export function useDoubleSigningSlasherProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherProxyABI,
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useDoubleSigningSlasherProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useDoubleSigningSlasherProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherProxyABI}__.
 */
export function useDowntimeSlasherProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof downtimeSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: downtimeSlasherProxyABI, ...config } as UseContractReadConfig<
    typeof downtimeSlasherProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useDowntimeSlasherProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof downtimeSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useDowntimeSlasherProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof downtimeSlasherProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__.
 */
export function useDowntimeSlasherProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof downtimeSlasherProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof downtimeSlasherProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherProxyABI, TFunctionName, TMode>({
    abi: downtimeSlasherProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useDowntimeSlasherProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof downtimeSlasherProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherProxyABI, '_setAndInitializeImplementation', TMode>(
    {
      abi: downtimeSlasherProxyABI,
      functionName: '_setAndInitializeImplementation',
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useDowntimeSlasherProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof downtimeSlasherProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherProxyABI, '_setImplementation', TMode>({
    abi: downtimeSlasherProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useDowntimeSlasherProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof downtimeSlasherProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherProxyABI, '_transferOwnership', TMode>({
    abi: downtimeSlasherProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__.
 */
export function usePrepareDowntimeSlasherProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareDowntimeSlasherProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof downtimeSlasherProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof downtimeSlasherProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareDowntimeSlasherProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareDowntimeSlasherProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherProxyABI}__.
 */
export function useDowntimeSlasherProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: downtimeSlasherProxyABI, ...config } as UseContractEventConfig<
    typeof downtimeSlasherProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useDowntimeSlasherProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useDowntimeSlasherProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionProxyABI}__.
 */
export function useElectionProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof electionProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: electionProxyABI, ...config } as UseContractReadConfig<
    typeof electionProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useElectionProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof electionProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof electionProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useElectionProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof electionProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof electionProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionProxyABI}__.
 */
export function useElectionProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof electionProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof electionProxyABI, TFunctionName, TMode>({
    abi: electionProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useElectionProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof electionProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof electionProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof electionProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: electionProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useElectionProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof electionProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof electionProxyABI, '_setImplementation', TMode>({
    abi: electionProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useElectionProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof electionProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof electionProxyABI, '_transferOwnership', TMode>({
    abi: electionProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionProxyABI}__.
 */
export function usePrepareElectionProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareElectionProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareElectionProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareElectionProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionProxyABI}__.
 */
export function useElectionProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof electionProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: electionProxyABI, ...config } as UseContractEventConfig<
    typeof electionProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useElectionProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof electionProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useElectionProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof electionProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsProxyABI}__.
 */
export function useEpochRewardsProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof epochRewardsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: epochRewardsProxyABI, ...config } as UseContractReadConfig<
    typeof epochRewardsProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useEpochRewardsProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof epochRewardsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useEpochRewardsProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof epochRewardsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__.
 */
export function useEpochRewardsProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof epochRewardsProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsProxyABI, TFunctionName, TMode>({
    abi: epochRewardsProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useEpochRewardsProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof epochRewardsProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: epochRewardsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useEpochRewardsProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof epochRewardsProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsProxyABI, '_setImplementation', TMode>({
    abi: epochRewardsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useEpochRewardsProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof epochRewardsProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsProxyABI, '_transferOwnership', TMode>({
    abi: epochRewardsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__.
 */
export function usePrepareEpochRewardsProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareEpochRewardsProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof epochRewardsProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareEpochRewardsProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareEpochRewardsProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsProxyABI}__.
 */
export function useEpochRewardsProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof epochRewardsProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: epochRewardsProxyABI, ...config } as UseContractEventConfig<
    typeof epochRewardsProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useEpochRewardsProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useEpochRewardsProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowProxyABI}__.
 */
export function useEscrowProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof escrowProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: escrowProxyABI, ...config } as UseContractReadConfig<
    typeof escrowProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useEscrowProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof escrowProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof escrowProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useEscrowProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof escrowProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof escrowProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowProxyABI}__.
 */
export function useEscrowProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof escrowProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof escrowProxyABI, TFunctionName, TMode>({
    abi: escrowProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useEscrowProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof escrowProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof escrowProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof escrowProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: escrowProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useEscrowProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof escrowProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof escrowProxyABI, '_setImplementation', TMode>({
    abi: escrowProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useEscrowProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof escrowProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof escrowProxyABI, '_transferOwnership', TMode>({
    abi: escrowProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowProxyABI}__.
 */
export function usePrepareEscrowProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareEscrowProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareEscrowProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareEscrowProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowProxyABI}__.
 */
export function useEscrowProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof escrowProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: escrowProxyABI, ...config } as UseContractEventConfig<
    typeof escrowProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useEscrowProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof escrowProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useEscrowProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof escrowProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlProxyABI}__.
 */
export function useExchangeBrlProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeBrlProxyABI, ...config } as UseContractReadConfig<
    typeof exchangeBrlProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useExchangeBrlProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof exchangeBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useExchangeBrlProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof exchangeBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__.
 */
export function useExchangeBrlProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeBrlProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlProxyABI, TFunctionName, TMode>({
    abi: exchangeBrlProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useExchangeBrlProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeBrlProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof exchangeBrlProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: exchangeBrlProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useExchangeBrlProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeBrlProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof exchangeBrlProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlProxyABI, '_setImplementation', TMode>({
    abi: exchangeBrlProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useExchangeBrlProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeBrlProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof exchangeBrlProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlProxyABI, '_transferOwnership', TMode>({
    abi: exchangeBrlProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__.
 */
export function usePrepareExchangeBrlProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareExchangeBrlProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareExchangeBrlProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareExchangeBrlProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlProxyABI}__.
 */
export function useExchangeBrlProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeBrlProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeBrlProxyABI, ...config } as UseContractEventConfig<
    typeof exchangeBrlProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useExchangeBrlProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useExchangeBrlProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurProxyABI}__.
 */
export function useExchangeEurProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeEurProxyABI, ...config } as UseContractReadConfig<
    typeof exchangeEurProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useExchangeEurProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof exchangeEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useExchangeEurProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof exchangeEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__.
 */
export function useExchangeEurProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeEurProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurProxyABI, TFunctionName, TMode>({
    abi: exchangeEurProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useExchangeEurProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeEurProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof exchangeEurProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: exchangeEurProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useExchangeEurProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeEurProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof exchangeEurProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurProxyABI, '_setImplementation', TMode>({
    abi: exchangeEurProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useExchangeEurProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeEurProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof exchangeEurProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurProxyABI, '_transferOwnership', TMode>({
    abi: exchangeEurProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__.
 */
export function usePrepareExchangeEurProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareExchangeEurProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareExchangeEurProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareExchangeEurProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurProxyABI}__.
 */
export function useExchangeEurProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeEurProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeEurProxyABI, ...config } as UseContractEventConfig<
    typeof exchangeEurProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useExchangeEurProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useExchangeEurProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeProxyABI}__.
 */
export function useExchangeProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeProxyABI, ...config } as UseContractReadConfig<
    typeof exchangeProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useExchangeProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof exchangeProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof exchangeProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useExchangeProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof exchangeProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__.
 */
export function useExchangeProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeProxyABI, TFunctionName, TMode>({
    abi: exchangeProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useExchangeProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof exchangeProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof exchangeProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: exchangeProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useExchangeProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof exchangeProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof exchangeProxyABI, '_setImplementation', TMode>({
    abi: exchangeProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useExchangeProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof exchangeProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeProxyABI, '_transferOwnership', TMode>({
    abi: exchangeProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__.
 */
export function usePrepareExchangeProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareExchangeProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareExchangeProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareExchangeProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeProxyABI}__.
 */
export function useExchangeProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeProxyABI, ...config } as UseContractEventConfig<
    typeof exchangeProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useExchangeProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useExchangeProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsProxyABI}__.
 */
export function useFederatedAttestationsProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof federatedAttestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: federatedAttestationsProxyABI, ...config } as UseContractReadConfig<
    typeof federatedAttestationsProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useFederatedAttestationsProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof federatedAttestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useFederatedAttestationsProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof federatedAttestationsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__.
 */
export function useFederatedAttestationsProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof federatedAttestationsProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof federatedAttestationsProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsProxyABI, TFunctionName, TMode>({
    abi: federatedAttestationsProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useFederatedAttestationsProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof federatedAttestationsProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof federatedAttestationsProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: federatedAttestationsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useFederatedAttestationsProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof federatedAttestationsProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsProxyABI, '_setImplementation', TMode>({
    abi: federatedAttestationsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useFederatedAttestationsProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof federatedAttestationsProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsProxyABI, '_transferOwnership', TMode>({
    abi: federatedAttestationsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__.
 */
export function usePrepareFederatedAttestationsProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareFederatedAttestationsProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof federatedAttestationsProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof federatedAttestationsProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareFederatedAttestationsProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareFederatedAttestationsProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsProxyABI}__.
 */
export function useFederatedAttestationsProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsProxyABI,
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useFederatedAttestationsProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useFederatedAttestationsProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__.
 */
export function useFeeCurrencyWhitelistProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: feeCurrencyWhitelistProxyABI, ...config } as UseContractReadConfig<
    typeof feeCurrencyWhitelistProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useFeeCurrencyWhitelistProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useFeeCurrencyWhitelistProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__.
 */
export function useFeeCurrencyWhitelistProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feeCurrencyWhitelistProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistProxyABI, TFunctionName, TMode>({
    abi: feeCurrencyWhitelistProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useFeeCurrencyWhitelistProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feeCurrencyWhitelistProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof feeCurrencyWhitelistProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof feeCurrencyWhitelistProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useFeeCurrencyWhitelistProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feeCurrencyWhitelistProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistProxyABI, '_setImplementation', TMode>({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useFeeCurrencyWhitelistProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feeCurrencyWhitelistProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistProxyABI, '_transferOwnership', TMode>({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__.
 */
export function usePrepareFeeCurrencyWhitelistProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareFeeCurrencyWhitelistProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof feeCurrencyWhitelistProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof feeCurrencyWhitelistProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareFeeCurrencyWhitelistProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareFeeCurrencyWhitelistProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__.
 */
export function useFeeCurrencyWhitelistProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: feeCurrencyWhitelistProxyABI,
    ...config,
  } as UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useFeeCurrencyWhitelistProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: feeCurrencyWhitelistProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feeCurrencyWhitelistProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useFeeCurrencyWhitelistProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: feeCurrencyWhitelistProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof feeCurrencyWhitelistProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__.
 */
export function useGasPriceMinimumProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gasPriceMinimumProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: gasPriceMinimumProxyABI, ...config } as UseContractReadConfig<
    typeof gasPriceMinimumProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useGasPriceMinimumProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof gasPriceMinimumProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useGasPriceMinimumProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof gasPriceMinimumProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__.
 */
export function useGasPriceMinimumProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gasPriceMinimumProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof gasPriceMinimumProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumProxyABI, TFunctionName, TMode>({
    abi: gasPriceMinimumProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useGasPriceMinimumProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof gasPriceMinimumProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumProxyABI, '_setAndInitializeImplementation', TMode>(
    {
      abi: gasPriceMinimumProxyABI,
      functionName: '_setAndInitializeImplementation',
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useGasPriceMinimumProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof gasPriceMinimumProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumProxyABI, '_setImplementation', TMode>({
    abi: gasPriceMinimumProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useGasPriceMinimumProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof gasPriceMinimumProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumProxyABI, '_transferOwnership', TMode>({
    abi: gasPriceMinimumProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__.
 */
export function usePrepareGasPriceMinimumProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareGasPriceMinimumProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof gasPriceMinimumProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof gasPriceMinimumProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareGasPriceMinimumProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareGasPriceMinimumProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__.
 */
export function useGasPriceMinimumProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: gasPriceMinimumProxyABI, ...config } as UseContractEventConfig<
    typeof gasPriceMinimumProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useGasPriceMinimumProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useGasPriceMinimumProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenProxyABI}__.
 */
export function useGoldTokenProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof goldTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: goldTokenProxyABI, ...config } as UseContractReadConfig<
    typeof goldTokenProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useGoldTokenProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof goldTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof goldTokenProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useGoldTokenProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof goldTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof goldTokenProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__.
 */
export function useGoldTokenProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof goldTokenProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof goldTokenProxyABI, TFunctionName, TMode>({
    abi: goldTokenProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useGoldTokenProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldTokenProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof goldTokenProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: goldTokenProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useGoldTokenProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldTokenProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof goldTokenProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenProxyABI, '_setImplementation', TMode>({
    abi: goldTokenProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useGoldTokenProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof goldTokenProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof goldTokenProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenProxyABI, '_transferOwnership', TMode>({
    abi: goldTokenProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__.
 */
export function usePrepareGoldTokenProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareGoldTokenProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareGoldTokenProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareGoldTokenProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenProxyABI}__.
 */
export function useGoldTokenProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof goldTokenProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: goldTokenProxyABI, ...config } as UseContractEventConfig<
    typeof goldTokenProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useGoldTokenProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof goldTokenProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useGoldTokenProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof goldTokenProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__.
 */
export function useGovernanceApproverMultiSigProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigProxyABI,
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useGovernanceApproverMultiSigProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useGovernanceApproverMultiSigProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__.
 */
export function useGovernanceApproverMultiSigProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigProxyABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigProxyABI, TFunctionName, TMode>({
    abi: governanceApproverMultiSigProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useGovernanceApproverMultiSigProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof governanceApproverMultiSigProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof governanceApproverMultiSigProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useGovernanceApproverMultiSigProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<
        typeof governanceApproverMultiSigProxyABI,
        '_setImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigProxyABI, '_setImplementation', TMode>({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useGovernanceApproverMultiSigProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<
        typeof governanceApproverMultiSigProxyABI,
        '_transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigProxyABI, '_transferOwnership', TMode>({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__.
 */
export function usePrepareGovernanceApproverMultiSigProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareGovernanceApproverMultiSigProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceApproverMultiSigProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceApproverMultiSigProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareGovernanceApproverMultiSigProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceApproverMultiSigProxyABI,
    '_setImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareGovernanceApproverMultiSigProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceApproverMultiSigProxyABI,
    '_transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__.
 */
export function useGovernanceApproverMultiSigProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigProxyABI,
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useGovernanceApproverMultiSigProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useGovernanceApproverMultiSigProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceProxyABI}__.
 */
export function useGovernanceProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governanceProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: governanceProxyABI, ...config } as UseContractReadConfig<
    typeof governanceProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useGovernanceProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof governanceProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof governanceProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useGovernanceProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof governanceProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof governanceProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceProxyABI}__.
 */
export function useGovernanceProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governanceProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof governanceProxyABI, TFunctionName, TMode>({
    abi: governanceProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useGovernanceProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof governanceProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof governanceProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: governanceProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useGovernanceProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof governanceProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof governanceProxyABI, '_setImplementation', TMode>({
    abi: governanceProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useGovernanceProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof governanceProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof governanceProxyABI, '_transferOwnership', TMode>({
    abi: governanceProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceProxyABI}__.
 */
export function usePrepareGovernanceProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareGovernanceProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareGovernanceProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareGovernanceProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceProxyABI}__.
 */
export function useGovernanceProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof governanceProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: governanceProxyABI, ...config } as UseContractEventConfig<
    typeof governanceProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useGovernanceProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof governanceProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useGovernanceProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof governanceProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoProxyABI}__.
 */
export function useGrandaMentoProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof grandaMentoProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: grandaMentoProxyABI, ...config } as UseContractReadConfig<
    typeof grandaMentoProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useGrandaMentoProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof grandaMentoProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useGrandaMentoProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof grandaMentoProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__.
 */
export function useGrandaMentoProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof grandaMentoProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoProxyABI, TFunctionName, TMode>({
    abi: grandaMentoProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useGrandaMentoProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof grandaMentoProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: grandaMentoProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useGrandaMentoProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof grandaMentoProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoProxyABI, '_setImplementation', TMode>({
    abi: grandaMentoProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useGrandaMentoProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof grandaMentoProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoProxyABI, '_transferOwnership', TMode>({
    abi: grandaMentoProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__.
 */
export function usePrepareGrandaMentoProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareGrandaMentoProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareGrandaMentoProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareGrandaMentoProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoProxyABI}__.
 */
export function useGrandaMentoProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof grandaMentoProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: grandaMentoProxyABI, ...config } as UseContractEventConfig<
    typeof grandaMentoProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useGrandaMentoProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useGrandaMentoProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldProxyABI}__.
 */
export function useLockedGoldProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockedGoldProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: lockedGoldProxyABI, ...config } as UseContractReadConfig<
    typeof lockedGoldProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useLockedGoldProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof lockedGoldProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useLockedGoldProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof lockedGoldProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__.
 */
export function useLockedGoldProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof lockedGoldProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldProxyABI, TFunctionName, TMode>({
    abi: lockedGoldProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useLockedGoldProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lockedGoldProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof lockedGoldProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: lockedGoldProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useLockedGoldProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lockedGoldProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof lockedGoldProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldProxyABI, '_setImplementation', TMode>({
    abi: lockedGoldProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useLockedGoldProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lockedGoldProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof lockedGoldProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldProxyABI, '_transferOwnership', TMode>({
    abi: lockedGoldProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__.
 */
export function usePrepareLockedGoldProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareLockedGoldProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareLockedGoldProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareLockedGoldProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldProxyABI}__.
 */
export function useLockedGoldProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof lockedGoldProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: lockedGoldProxyABI, ...config } as UseContractEventConfig<
    typeof lockedGoldProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useLockedGoldProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useLockedGoldProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__.
 */
export function useMetaTransactionWalletProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metaTransactionWalletProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: metaTransactionWalletProxyABI, ...config } as UseContractReadConfig<
    typeof metaTransactionWalletProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useMetaTransactionWalletProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof metaTransactionWalletProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useMetaTransactionWalletProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof metaTransactionWalletProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__.
 */
export function useMetaTransactionWalletProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof metaTransactionWalletProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof metaTransactionWalletProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletProxyABI, TFunctionName, TMode>({
    abi: metaTransactionWalletProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useMetaTransactionWalletProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof metaTransactionWalletProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof metaTransactionWalletProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: metaTransactionWalletProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useMetaTransactionWalletProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof metaTransactionWalletProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletProxyABI, '_setImplementation', TMode>({
    abi: metaTransactionWalletProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useMetaTransactionWalletProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof metaTransactionWalletProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletProxyABI, '_transferOwnership', TMode>({
    abi: metaTransactionWalletProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__.
 */
export function usePrepareMetaTransactionWalletProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareMetaTransactionWalletProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof metaTransactionWalletProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof metaTransactionWalletProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareMetaTransactionWalletProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareMetaTransactionWalletProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__.
 */
export function useMetaTransactionWalletProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletProxyABI,
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useMetaTransactionWalletProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useMetaTransactionWalletProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__.
 */
export function useMetaTransactionWalletDeployerProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metaTransactionWalletDeployerProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletDeployerProxyABI,
    ...config,
  } as UseContractReadConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useMetaTransactionWalletDeployerProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof metaTransactionWalletDeployerProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useMetaTransactionWalletDeployerProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof metaTransactionWalletDeployerProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__.
 */
export function useMetaTransactionWalletDeployerProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerProxyABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletDeployerProxyABI, TFunctionName, TMode>({
    abi: metaTransactionWalletDeployerProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useMetaTransactionWalletDeployerProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof metaTransactionWalletDeployerProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof metaTransactionWalletDeployerProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useMetaTransactionWalletDeployerProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<
        typeof metaTransactionWalletDeployerProxyABI,
        '_setImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof metaTransactionWalletDeployerProxyABI,
    '_setImplementation',
    TMode
  >({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useMetaTransactionWalletDeployerProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<
        typeof metaTransactionWalletDeployerProxyABI,
        '_transferOwnership',
        TMode
      > & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<
    typeof metaTransactionWalletDeployerProxyABI,
    '_transferOwnership',
    TMode
  >({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__.
 */
export function usePrepareMetaTransactionWalletDeployerProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareMetaTransactionWalletDeployerProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof metaTransactionWalletDeployerProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareMetaTransactionWalletDeployerProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof metaTransactionWalletDeployerProxyABI,
      '_setImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    '_setImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareMetaTransactionWalletDeployerProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof metaTransactionWalletDeployerProxyABI,
      '_transferOwnership'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof metaTransactionWalletDeployerProxyABI,
    '_transferOwnership'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__.
 */
export function useMetaTransactionWalletDeployerProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletDeployerProxyABI,
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useMetaTransactionWalletDeployerProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletDeployerProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletDeployerProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useMetaTransactionWalletDeployerProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletDeployerProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletDeployerProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsProxyABI}__.
 */
export function useOdisPaymentsProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof odisPaymentsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: odisPaymentsProxyABI, ...config } as UseContractReadConfig<
    typeof odisPaymentsProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useOdisPaymentsProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof odisPaymentsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useOdisPaymentsProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof odisPaymentsProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__.
 */
export function useOdisPaymentsProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof odisPaymentsProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsProxyABI, TFunctionName, TMode>({
    abi: odisPaymentsProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useOdisPaymentsProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof odisPaymentsProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof odisPaymentsProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: odisPaymentsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useOdisPaymentsProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof odisPaymentsProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof odisPaymentsProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsProxyABI, '_setImplementation', TMode>({
    abi: odisPaymentsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useOdisPaymentsProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof odisPaymentsProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof odisPaymentsProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsProxyABI, '_transferOwnership', TMode>({
    abi: odisPaymentsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__.
 */
export function usePrepareOdisPaymentsProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareOdisPaymentsProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof odisPaymentsProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareOdisPaymentsProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareOdisPaymentsProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsProxyABI}__.
 */
export function useOdisPaymentsProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof odisPaymentsProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: odisPaymentsProxyABI, ...config } as UseContractEventConfig<
    typeof odisPaymentsProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useOdisPaymentsProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof odisPaymentsProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: odisPaymentsProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof odisPaymentsProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useOdisPaymentsProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof odisPaymentsProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: odisPaymentsProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof odisPaymentsProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryProxyABI}__.
 */
export function useRegistryProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: registryProxyABI, ...config } as UseContractReadConfig<
    typeof registryProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useRegistryProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof registryProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof registryProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useRegistryProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof registryProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof registryProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryProxyABI}__.
 */
export function useRegistryProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof registryProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof registryProxyABI, TFunctionName, TMode>({
    abi: registryProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useRegistryProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof registryProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof registryProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof registryProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: registryProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useRegistryProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof registryProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof registryProxyABI, '_setImplementation', TMode>({
    abi: registryProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useRegistryProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof registryProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof registryProxyABI, '_transferOwnership', TMode>({
    abi: registryProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryProxyABI}__.
 */
export function usePrepareRegistryProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareRegistryProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareRegistryProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareRegistryProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryProxyABI}__.
 */
export function useRegistryProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof registryProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: registryProxyABI, ...config } as UseContractEventConfig<
    typeof registryProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useRegistryProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof registryProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: registryProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof registryProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useRegistryProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof registryProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: registryProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof registryProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveProxyABI}__.
 */
export function useReserveProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof reserveProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: reserveProxyABI, ...config } as UseContractReadConfig<
    typeof reserveProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useReserveProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof reserveProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof reserveProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useReserveProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof reserveProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof reserveProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveProxyABI}__.
 */
export function useReserveProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof reserveProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof reserveProxyABI, TFunctionName, TMode>({
    abi: reserveProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useReserveProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<typeof reserveProxyABI, '_setAndInitializeImplementation', TMode> & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof reserveProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: reserveProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useReserveProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveProxyABI, '_setImplementation'>['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof reserveProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof reserveProxyABI, '_setImplementation', TMode>({
    abi: reserveProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useReserveProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveProxyABI, '_transferOwnership'>['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof reserveProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof reserveProxyABI, '_transferOwnership', TMode>({
    abi: reserveProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveProxyABI}__.
 */
export function usePrepareReserveProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareReserveProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareReserveProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareReserveProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveProxyABI}__.
 */
export function useReserveProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof reserveProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: reserveProxyABI, ...config } as UseContractEventConfig<
    typeof reserveProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useReserveProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof reserveProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useReserveProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof reserveProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__.
 */
export function useReserveSpenderMultiSigProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigProxyABI,
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useReserveSpenderMultiSigProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useReserveSpenderMultiSigProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__.
 */
export function useReserveSpenderMultiSigProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveSpenderMultiSigProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigProxyABI, TFunctionName, TMode>({
    abi: reserveSpenderMultiSigProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useReserveSpenderMultiSigProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof reserveSpenderMultiSigProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<
    typeof reserveSpenderMultiSigProxyABI,
    '_setAndInitializeImplementation',
    TMode
  >({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useReserveSpenderMultiSigProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigProxyABI, '_setImplementation', TMode>({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useReserveSpenderMultiSigProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigProxyABI, '_transferOwnership', TMode>({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__.
 */
export function usePrepareReserveSpenderMultiSigProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareReserveSpenderMultiSigProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof reserveSpenderMultiSigProxyABI,
      '_setAndInitializeImplementation'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof reserveSpenderMultiSigProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareReserveSpenderMultiSigProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareReserveSpenderMultiSigProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__.
 */
export function useReserveSpenderMultiSigProxyEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigProxyABI,
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useReserveSpenderMultiSigProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useReserveSpenderMultiSigProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlProxyABI}__.
 */
export function useStableTokenBrlProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenBrlProxyABI, ...config } as UseContractReadConfig<
    typeof stableTokenBrlProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useStableTokenBrlProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof stableTokenBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useStableTokenBrlProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof stableTokenBrlProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__.
 */
export function useStableTokenBrlProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenBrlProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlProxyABI, TFunctionName, TMode>({
    abi: stableTokenBrlProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useStableTokenBrlProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenBrlProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof stableTokenBrlProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: stableTokenBrlProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useStableTokenBrlProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenBrlProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof stableTokenBrlProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlProxyABI, '_setImplementation', TMode>({
    abi: stableTokenBrlProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useStableTokenBrlProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenBrlProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenBrlProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlProxyABI, '_transferOwnership', TMode>({
    abi: stableTokenBrlProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__.
 */
export function usePrepareStableTokenBrlProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareStableTokenBrlProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableTokenBrlProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareStableTokenBrlProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareStableTokenBrlProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlProxyABI}__.
 */
export function useStableTokenBrlProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenBrlProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenBrlProxyABI, ...config } as UseContractEventConfig<
    typeof stableTokenBrlProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useStableTokenBrlProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useStableTokenBrlProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurProxyABI}__.
 */
export function useStableTokenEurProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenEurProxyABI, ...config } as UseContractReadConfig<
    typeof stableTokenEurProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useStableTokenEurProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof stableTokenEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useStableTokenEurProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof stableTokenEurProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__.
 */
export function useStableTokenEurProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenEurProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurProxyABI, TFunctionName, TMode>({
    abi: stableTokenEurProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useStableTokenEurProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenEurProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof stableTokenEurProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: stableTokenEurProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useStableTokenEurProxySetImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenEurProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof stableTokenEurProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurProxyABI, '_setImplementation', TMode>({
    abi: stableTokenEurProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useStableTokenEurProxyTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenEurProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenEurProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurProxyABI, '_transferOwnership', TMode>({
    abi: stableTokenEurProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__.
 */
export function usePrepareStableTokenEurProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareStableTokenEurProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof stableTokenEurProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareStableTokenEurProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareStableTokenEurProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurProxyABI}__.
 */
export function useStableTokenEurProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenEurProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenEurProxyABI, ...config } as UseContractEventConfig<
    typeof stableTokenEurProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useStableTokenEurProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useStableTokenEurProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenProxyABI}__.
 */
export function useStableTokenProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenProxyABI, ...config } as UseContractReadConfig<
    typeof stableTokenProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useStableTokenProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof stableTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof stableTokenProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useStableTokenProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof stableTokenProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__.
 */
export function useStableTokenProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenProxyABI, TFunctionName, TMode>({
    abi: stableTokenProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useStableTokenProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof stableTokenProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: stableTokenProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useStableTokenProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof stableTokenProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenProxyABI, '_setImplementation', TMode>({
    abi: stableTokenProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useStableTokenProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenProxyABI, '_transferOwnership', TMode>({
    abi: stableTokenProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__.
 */
export function usePrepareStableTokenProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareStableTokenProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_setAndInitializeImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareStableTokenProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareStableTokenProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenProxyABI}__.
 */
export function useStableTokenProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenProxyABI, ...config } as UseContractEventConfig<
    typeof stableTokenProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useStableTokenProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useStableTokenProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesProxyABI}__.
 */
export function useSortedOraclesProxyRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sortedOraclesProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesProxyABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: sortedOraclesProxyABI, ...config } as UseContractReadConfig<
    typeof sortedOraclesProxyABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_getImplementation"`.
 */
export function useSortedOraclesProxyGetImplementation<
  TFunctionName extends '_getImplementation',
  TSelectData = ReadContractResult<typeof sortedOraclesProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesProxyABI,
    functionName: '_getImplementation',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_getOwner"`.
 */
export function useSortedOraclesProxyGetOwner<
  TFunctionName extends '_getOwner',
  TSelectData = ReadContractResult<typeof sortedOraclesProxyABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesProxyABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesProxyABI,
    functionName: '_getOwner',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesProxyABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__.
 */
export function useSortedOraclesProxyWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesProxyABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sortedOraclesProxyABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesProxyABI, TFunctionName, TMode>({
    abi: sortedOraclesProxyABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function useSortedOraclesProxySetAndInitializeImplementation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sortedOraclesProxyABI,
          '_setAndInitializeImplementation'
        >['request']['abi'],
        '_setAndInitializeImplementation',
        TMode
      > & { functionName?: '_setAndInitializeImplementation' }
    : UseContractWriteConfig<
        typeof sortedOraclesProxyABI,
        '_setAndInitializeImplementation',
        TMode
      > & {
        abi?: never
        functionName?: '_setAndInitializeImplementation'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesProxyABI, '_setAndInitializeImplementation', TMode>({
    abi: sortedOraclesProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function useSortedOraclesProxySetImplementation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sortedOraclesProxyABI,
          '_setImplementation'
        >['request']['abi'],
        '_setImplementation',
        TMode
      > & { functionName?: '_setImplementation' }
    : UseContractWriteConfig<typeof sortedOraclesProxyABI, '_setImplementation', TMode> & {
        abi?: never
        functionName?: '_setImplementation'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesProxyABI, '_setImplementation', TMode>({
    abi: sortedOraclesProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function useSortedOraclesProxyTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sortedOraclesProxyABI,
          '_transferOwnership'
        >['request']['abi'],
        '_transferOwnership',
        TMode
      > & { functionName?: '_transferOwnership' }
    : UseContractWriteConfig<typeof sortedOraclesProxyABI, '_transferOwnership', TMode> & {
        abi?: never
        functionName?: '_transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesProxyABI, '_transferOwnership', TMode>({
    abi: sortedOraclesProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__.
 */
export function usePrepareSortedOraclesProxyWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesProxyABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_setAndInitializeImplementation"`.
 */
export function usePrepareSortedOraclesProxySetAndInitializeImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, '_setAndInitializeImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesProxyABI,
    functionName: '_setAndInitializeImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof sortedOraclesProxyABI,
    '_setAndInitializeImplementation'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_setImplementation"`.
 */
export function usePrepareSortedOraclesProxySetImplementation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, '_setImplementation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesProxyABI,
    functionName: '_setImplementation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, '_setImplementation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `functionName` set to `"_transferOwnership"`.
 */
export function usePrepareSortedOraclesProxyTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, '_transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesProxyABI,
    functionName: '_transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesProxyABI, '_transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesProxyABI}__.
 */
export function useSortedOraclesProxyEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sortedOraclesProxyABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sortedOraclesProxyABI, ...config } as UseContractEventConfig<
    typeof sortedOraclesProxyABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `eventName` set to `"ImplementationSet"`.
 */
export function useSortedOraclesProxyImplementationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesProxyABI, 'ImplementationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesProxyABI,
    eventName: 'ImplementationSet',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesProxyABI, 'ImplementationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesProxyABI}__ and `eventName` set to `"OwnerSet"`.
 */
export function useSortedOraclesProxyOwnerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesProxyABI, 'OwnerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesProxyABI,
    eventName: 'OwnerSet',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesProxyABI, 'OwnerSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__.
 */
export function useAccountsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: accountsABI, ...config } as UseContractReadConfig<
    typeof accountsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"EIP712_AUTHORIZE_SIGNER_TYPEHASH"`.
 */
export function useAccountsEip712AuthorizeSignerTypehash<
  TFunctionName extends 'EIP712_AUTHORIZE_SIGNER_TYPEHASH',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'EIP712_AUTHORIZE_SIGNER_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizedBy"`.
 */
export function useAccountsAuthorizedBy<
  TFunctionName extends 'authorizedBy',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'authorizedBy',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"eip712DomainSeparator"`.
 */
export function useAccountsEip712DomainSeparator<
  TFunctionName extends 'eip712DomainSeparator',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'eip712DomainSeparator',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"initialized"`.
 */
export function useAccountsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useAccountsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"offchainStorageRoots"`.
 */
export function useAccountsOffchainStorageRoots<
  TFunctionName extends 'offchainStorageRoots',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'offchainStorageRoots',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"owner"`.
 */
export function useAccountsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"registry"`.
 */
export function useAccountsRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useAccountsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getOffchainStorageRoots"`.
 */
export function useAccountsGetOffchainStorageRoots<
  TFunctionName extends 'getOffchainStorageRoots',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getOffchainStorageRoots',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getPaymentDelegation"`.
 */
export function useAccountsGetPaymentDelegation<
  TFunctionName extends 'getPaymentDelegation',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getPaymentDelegation',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isLegacySigner"`.
 */
export function useAccountsIsLegacySigner<
  TFunctionName extends 'isLegacySigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isLegacySigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isDefaultSigner"`.
 */
export function useAccountsIsDefaultSigner<
  TFunctionName extends 'isDefaultSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isDefaultSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isIndexedSigner"`.
 */
export function useAccountsIsIndexedSigner<
  TFunctionName extends 'isIndexedSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isIndexedSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isSigner"`.
 */
export function useAccountsIsSigner<
  TFunctionName extends 'isSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"attestationSignerToAccount"`.
 */
export function useAccountsAttestationSignerToAccount<
  TFunctionName extends 'attestationSignerToAccount',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'attestationSignerToAccount',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"validatorSignerToAccount"`.
 */
export function useAccountsValidatorSignerToAccount<
  TFunctionName extends 'validatorSignerToAccount',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'validatorSignerToAccount',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"voteSignerToAccount"`.
 */
export function useAccountsVoteSignerToAccount<
  TFunctionName extends 'voteSignerToAccount',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'voteSignerToAccount',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"signerToAccount"`.
 */
export function useAccountsSignerToAccount<
  TFunctionName extends 'signerToAccount',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'signerToAccount',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isLegacyRole"`.
 */
export function useAccountsIsLegacyRole<
  TFunctionName extends 'isLegacyRole',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isLegacyRole',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getLegacySigner"`.
 */
export function useAccountsGetLegacySigner<
  TFunctionName extends 'getLegacySigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getLegacySigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getDefaultSigner"`.
 */
export function useAccountsGetDefaultSigner<
  TFunctionName extends 'getDefaultSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getDefaultSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getIndexedSigner"`.
 */
export function useAccountsGetIndexedSigner<
  TFunctionName extends 'getIndexedSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getIndexedSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getVoteSigner"`.
 */
export function useAccountsGetVoteSigner<
  TFunctionName extends 'getVoteSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getVoteSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getValidatorSigner"`.
 */
export function useAccountsGetValidatorSigner<
  TFunctionName extends 'getValidatorSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getValidatorSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getAttestationSigner"`.
 */
export function useAccountsGetAttestationSigner<
  TFunctionName extends 'getAttestationSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getAttestationSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasLegacySigner"`.
 */
export function useAccountsHasLegacySigner<
  TFunctionName extends 'hasLegacySigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasLegacySigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasDefaultSigner"`.
 */
export function useAccountsHasDefaultSigner<
  TFunctionName extends 'hasDefaultSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasDefaultSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasIndexedSigner"`.
 */
export function useAccountsHasIndexedSigner<
  TFunctionName extends 'hasIndexedSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasIndexedSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasAuthorizedSigner"`.
 */
export function useAccountsHasAuthorizedSigner<
  TFunctionName extends 'hasAuthorizedSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasAuthorizedSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasAuthorizedVoteSigner"`.
 */
export function useAccountsHasAuthorizedVoteSigner<
  TFunctionName extends 'hasAuthorizedVoteSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasAuthorizedVoteSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasAuthorizedValidatorSigner"`.
 */
export function useAccountsHasAuthorizedValidatorSigner<
  TFunctionName extends 'hasAuthorizedValidatorSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasAuthorizedValidatorSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"hasAuthorizedAttestationSigner"`.
 */
export function useAccountsHasAuthorizedAttestationSigner<
  TFunctionName extends 'hasAuthorizedAttestationSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'hasAuthorizedAttestationSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getName"`.
 */
export function useAccountsGetName<
  TFunctionName extends 'getName',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getName',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getMetadataURL"`.
 */
export function useAccountsGetMetadataUrl<
  TFunctionName extends 'getMetadataURL',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getMetadataURL',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"batchGetMetadataURL"`.
 */
export function useAccountsBatchGetMetadataUrl<
  TFunctionName extends 'batchGetMetadataURL',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'batchGetMetadataURL',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getDataEncryptionKey"`.
 */
export function useAccountsGetDataEncryptionKey<
  TFunctionName extends 'getDataEncryptionKey',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getDataEncryptionKey',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getWalletAddress"`.
 */
export function useAccountsGetWalletAddress<
  TFunctionName extends 'getWalletAddress',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getWalletAddress',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isAccount"`.
 */
export function useAccountsIsAccount<
  TFunctionName extends 'isAccount',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isAccount',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"isAuthorizedSigner"`.
 */
export function useAccountsIsAuthorizedSigner<
  TFunctionName extends 'isAuthorizedSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'isAuthorizedSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"getRoleAuthorizationSigner"`.
 */
export function useAccountsGetRoleAuthorizationSigner<
  TFunctionName extends 'getRoleAuthorizationSigner',
  TSelectData = ReadContractResult<typeof accountsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: accountsABI,
    functionName: 'getRoleAuthorizationSigner',
    ...config,
  } as UseContractReadConfig<typeof accountsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__.
 */
export function useAccountsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof accountsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, TFunctionName, TMode>({
    abi: accountsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAccountsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof accountsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'renounceOwnership', TMode>({
    abi: accountsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useAccountsSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof accountsABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setRegistry', TMode>({
    abi: accountsABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAccountsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof accountsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'transferOwnership', TMode>({
    abi: accountsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"initialize"`.
 */
export function useAccountsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof accountsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'initialize', TMode>({
    abi: accountsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setEip712DomainSeparator"`.
 */
export function useAccountsSetEip712DomainSeparator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'setEip712DomainSeparator'
        >['request']['abi'],
        'setEip712DomainSeparator',
        TMode
      > & { functionName?: 'setEip712DomainSeparator' }
    : UseContractWriteConfig<typeof accountsABI, 'setEip712DomainSeparator', TMode> & {
        abi?: never
        functionName?: 'setEip712DomainSeparator'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setEip712DomainSeparator', TMode>({
    abi: accountsABI,
    functionName: 'setEip712DomainSeparator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setAccount"`.
 */
export function useAccountsSetAccount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setAccount'>['request']['abi'],
        'setAccount',
        TMode
      > & { functionName?: 'setAccount' }
    : UseContractWriteConfig<typeof accountsABI, 'setAccount', TMode> & {
        abi?: never
        functionName?: 'setAccount'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setAccount', TMode>({
    abi: accountsABI,
    functionName: 'setAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"createAccount"`.
 */
export function useAccountsCreateAccount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'createAccount'>['request']['abi'],
        'createAccount',
        TMode
      > & { functionName?: 'createAccount' }
    : UseContractWriteConfig<typeof accountsABI, 'createAccount', TMode> & {
        abi?: never
        functionName?: 'createAccount'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'createAccount', TMode>({
    abi: accountsABI,
    functionName: 'createAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setName"`.
 */
export function useAccountsSetName<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setName'>['request']['abi'],
        'setName',
        TMode
      > & { functionName?: 'setName' }
    : UseContractWriteConfig<typeof accountsABI, 'setName', TMode> & {
        abi?: never
        functionName?: 'setName'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setName', TMode>({
    abi: accountsABI,
    functionName: 'setName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setWalletAddress"`.
 */
export function useAccountsSetWalletAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setWalletAddress'>['request']['abi'],
        'setWalletAddress',
        TMode
      > & { functionName?: 'setWalletAddress' }
    : UseContractWriteConfig<typeof accountsABI, 'setWalletAddress', TMode> & {
        abi?: never
        functionName?: 'setWalletAddress'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setWalletAddress', TMode>({
    abi: accountsABI,
    functionName: 'setWalletAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setAccountDataEncryptionKey"`.
 */
export function useAccountsSetAccountDataEncryptionKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'setAccountDataEncryptionKey'
        >['request']['abi'],
        'setAccountDataEncryptionKey',
        TMode
      > & { functionName?: 'setAccountDataEncryptionKey' }
    : UseContractWriteConfig<typeof accountsABI, 'setAccountDataEncryptionKey', TMode> & {
        abi?: never
        functionName?: 'setAccountDataEncryptionKey'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setAccountDataEncryptionKey', TMode>({
    abi: accountsABI,
    functionName: 'setAccountDataEncryptionKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setMetadataURL"`.
 */
export function useAccountsSetMetadataUrl<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setMetadataURL'>['request']['abi'],
        'setMetadataURL',
        TMode
      > & { functionName?: 'setMetadataURL' }
    : UseContractWriteConfig<typeof accountsABI, 'setMetadataURL', TMode> & {
        abi?: never
        functionName?: 'setMetadataURL'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setMetadataURL', TMode>({
    abi: accountsABI,
    functionName: 'setMetadataURL',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"addStorageRoot"`.
 */
export function useAccountsAddStorageRoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'addStorageRoot'>['request']['abi'],
        'addStorageRoot',
        TMode
      > & { functionName?: 'addStorageRoot' }
    : UseContractWriteConfig<typeof accountsABI, 'addStorageRoot', TMode> & {
        abi?: never
        functionName?: 'addStorageRoot'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'addStorageRoot', TMode>({
    abi: accountsABI,
    functionName: 'addStorageRoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeStorageRoot"`.
 */
export function useAccountsRemoveStorageRoot<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeStorageRoot'>['request']['abi'],
        'removeStorageRoot',
        TMode
      > & { functionName?: 'removeStorageRoot' }
    : UseContractWriteConfig<typeof accountsABI, 'removeStorageRoot', TMode> & {
        abi?: never
        functionName?: 'removeStorageRoot'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeStorageRoot', TMode>({
    abi: accountsABI,
    functionName: 'removeStorageRoot',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setPaymentDelegation"`.
 */
export function useAccountsSetPaymentDelegation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setPaymentDelegation'>['request']['abi'],
        'setPaymentDelegation',
        TMode
      > & { functionName?: 'setPaymentDelegation' }
    : UseContractWriteConfig<typeof accountsABI, 'setPaymentDelegation', TMode> & {
        abi?: never
        functionName?: 'setPaymentDelegation'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setPaymentDelegation', TMode>({
    abi: accountsABI,
    functionName: 'setPaymentDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"deletePaymentDelegation"`.
 */
export function useAccountsDeletePaymentDelegation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'deletePaymentDelegation'>['request']['abi'],
        'deletePaymentDelegation',
        TMode
      > & { functionName?: 'deletePaymentDelegation' }
    : UseContractWriteConfig<typeof accountsABI, 'deletePaymentDelegation', TMode> & {
        abi?: never
        functionName?: 'deletePaymentDelegation'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'deletePaymentDelegation', TMode>({
    abi: accountsABI,
    functionName: 'deletePaymentDelegation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setIndexedSigner"`.
 */
export function useAccountsSetIndexedSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'setIndexedSigner'>['request']['abi'],
        'setIndexedSigner',
        TMode
      > & { functionName?: 'setIndexedSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'setIndexedSigner', TMode> & {
        abi?: never
        functionName?: 'setIndexedSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'setIndexedSigner', TMode>({
    abi: accountsABI,
    functionName: 'setIndexedSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeSignerWithSignature"`.
 */
export function useAccountsAuthorizeSignerWithSignature<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'authorizeSignerWithSignature'
        >['request']['abi'],
        'authorizeSignerWithSignature',
        TMode
      > & { functionName?: 'authorizeSignerWithSignature' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeSignerWithSignature', TMode> & {
        abi?: never
        functionName?: 'authorizeSignerWithSignature'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeSignerWithSignature', TMode>({
    abi: accountsABI,
    functionName: 'authorizeSignerWithSignature',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeVoteSigner"`.
 */
export function useAccountsAuthorizeVoteSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'authorizeVoteSigner'>['request']['abi'],
        'authorizeVoteSigner',
        TMode
      > & { functionName?: 'authorizeVoteSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeVoteSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeVoteSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeVoteSigner', TMode>({
    abi: accountsABI,
    functionName: 'authorizeVoteSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSigner"`.
 */
export function useAccountsAuthorizeValidatorSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'authorizeValidatorSigner'
        >['request']['abi'],
        'authorizeValidatorSigner',
        TMode
      > & { functionName?: 'authorizeValidatorSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeValidatorSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeValidatorSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeValidatorSigner', TMode>({
    abi: accountsABI,
    functionName: 'authorizeValidatorSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSignerWithPublicKey"`.
 */
export function useAccountsAuthorizeValidatorSignerWithPublicKey<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'authorizeValidatorSignerWithPublicKey'
        >['request']['abi'],
        'authorizeValidatorSignerWithPublicKey',
        TMode
      > & { functionName?: 'authorizeValidatorSignerWithPublicKey' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithPublicKey', TMode> & {
        abi?: never
        functionName?: 'authorizeValidatorSignerWithPublicKey'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeValidatorSignerWithPublicKey', TMode>({
    abi: accountsABI,
    functionName: 'authorizeValidatorSignerWithPublicKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSignerWithKeys"`.
 */
export function useAccountsAuthorizeValidatorSignerWithKeys<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'authorizeValidatorSignerWithKeys'
        >['request']['abi'],
        'authorizeValidatorSignerWithKeys',
        TMode
      > & { functionName?: 'authorizeValidatorSignerWithKeys' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithKeys', TMode> & {
        abi?: never
        functionName?: 'authorizeValidatorSignerWithKeys'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeValidatorSignerWithKeys', TMode>({
    abi: accountsABI,
    functionName: 'authorizeValidatorSignerWithKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeAttestationSigner"`.
 */
export function useAccountsAuthorizeAttestationSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'authorizeAttestationSigner'
        >['request']['abi'],
        'authorizeAttestationSigner',
        TMode
      > & { functionName?: 'authorizeAttestationSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeAttestationSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeAttestationSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeAttestationSigner', TMode>({
    abi: accountsABI,
    functionName: 'authorizeAttestationSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeSigner"`.
 */
export function useAccountsAuthorizeSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'authorizeSigner'>['request']['abi'],
        'authorizeSigner',
        TMode
      > & { functionName?: 'authorizeSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'authorizeSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'authorizeSigner', TMode>({
    abi: accountsABI,
    functionName: 'authorizeSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"completeSignerAuthorization"`.
 */
export function useAccountsCompleteSignerAuthorization<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof accountsABI,
          'completeSignerAuthorization'
        >['request']['abi'],
        'completeSignerAuthorization',
        TMode
      > & { functionName?: 'completeSignerAuthorization' }
    : UseContractWriteConfig<typeof accountsABI, 'completeSignerAuthorization', TMode> & {
        abi?: never
        functionName?: 'completeSignerAuthorization'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'completeSignerAuthorization', TMode>({
    abi: accountsABI,
    functionName: 'completeSignerAuthorization',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeDefaultSigner"`.
 */
export function useAccountsRemoveDefaultSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeDefaultSigner'>['request']['abi'],
        'removeDefaultSigner',
        TMode
      > & { functionName?: 'removeDefaultSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeDefaultSigner', TMode> & {
        abi?: never
        functionName?: 'removeDefaultSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeDefaultSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeDefaultSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeIndexedSigner"`.
 */
export function useAccountsRemoveIndexedSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeIndexedSigner'>['request']['abi'],
        'removeIndexedSigner',
        TMode
      > & { functionName?: 'removeIndexedSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeIndexedSigner', TMode> & {
        abi?: never
        functionName?: 'removeIndexedSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeIndexedSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeIndexedSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeSigner"`.
 */
export function useAccountsRemoveSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeSigner'>['request']['abi'],
        'removeSigner',
        TMode
      > & { functionName?: 'removeSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeSigner', TMode> & {
        abi?: never
        functionName?: 'removeSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeVoteSigner"`.
 */
export function useAccountsRemoveVoteSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeVoteSigner'>['request']['abi'],
        'removeVoteSigner',
        TMode
      > & { functionName?: 'removeVoteSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeVoteSigner', TMode> & {
        abi?: never
        functionName?: 'removeVoteSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeVoteSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeVoteSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeValidatorSigner"`.
 */
export function useAccountsRemoveValidatorSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeValidatorSigner'>['request']['abi'],
        'removeValidatorSigner',
        TMode
      > & { functionName?: 'removeValidatorSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeValidatorSigner', TMode> & {
        abi?: never
        functionName?: 'removeValidatorSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeValidatorSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeValidatorSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeAttestationSigner"`.
 */
export function useAccountsRemoveAttestationSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof accountsABI, 'removeAttestationSigner'>['request']['abi'],
        'removeAttestationSigner',
        TMode
      > & { functionName?: 'removeAttestationSigner' }
    : UseContractWriteConfig<typeof accountsABI, 'removeAttestationSigner', TMode> & {
        abi?: never
        functionName?: 'removeAttestationSigner'
      } = {} as any
) {
  return useContractWrite<typeof accountsABI, 'removeAttestationSigner', TMode>({
    abi: accountsABI,
    functionName: 'removeAttestationSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__.
 */
export function usePrepareAccountsWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof accountsABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: accountsABI, ...config } as UsePrepareContractWriteConfig<
    typeof accountsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAccountsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareAccountsSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAccountsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAccountsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setEip712DomainSeparator"`.
 */
export function usePrepareAccountsSetEip712DomainSeparator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setEip712DomainSeparator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setEip712DomainSeparator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setEip712DomainSeparator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setAccount"`.
 */
export function usePrepareAccountsSetAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setAccount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setAccount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareAccountsCreateAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'createAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'createAccount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'createAccount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setName"`.
 */
export function usePrepareAccountsSetName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setName'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setWalletAddress"`.
 */
export function usePrepareAccountsSetWalletAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setWalletAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setWalletAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setWalletAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setAccountDataEncryptionKey"`.
 */
export function usePrepareAccountsSetAccountDataEncryptionKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setAccountDataEncryptionKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setAccountDataEncryptionKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setAccountDataEncryptionKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setMetadataURL"`.
 */
export function usePrepareAccountsSetMetadataUrl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setMetadataURL'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setMetadataURL',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setMetadataURL'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"addStorageRoot"`.
 */
export function usePrepareAccountsAddStorageRoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'addStorageRoot'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'addStorageRoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'addStorageRoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeStorageRoot"`.
 */
export function usePrepareAccountsRemoveStorageRoot(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeStorageRoot'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeStorageRoot',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeStorageRoot'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setPaymentDelegation"`.
 */
export function usePrepareAccountsSetPaymentDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setPaymentDelegation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setPaymentDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setPaymentDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"deletePaymentDelegation"`.
 */
export function usePrepareAccountsDeletePaymentDelegation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'deletePaymentDelegation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'deletePaymentDelegation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'deletePaymentDelegation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"setIndexedSigner"`.
 */
export function usePrepareAccountsSetIndexedSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'setIndexedSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'setIndexedSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'setIndexedSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeSignerWithSignature"`.
 */
export function usePrepareAccountsAuthorizeSignerWithSignature(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeSignerWithSignature'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeSignerWithSignature',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeSignerWithSignature'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeVoteSigner"`.
 */
export function usePrepareAccountsAuthorizeVoteSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeVoteSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeVoteSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeVoteSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSigner"`.
 */
export function usePrepareAccountsAuthorizeValidatorSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeValidatorSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSignerWithPublicKey"`.
 */
export function usePrepareAccountsAuthorizeValidatorSignerWithPublicKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithPublicKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeValidatorSignerWithPublicKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithPublicKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeValidatorSignerWithKeys"`.
 */
export function usePrepareAccountsAuthorizeValidatorSignerWithKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithKeys'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeValidatorSignerWithKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeValidatorSignerWithKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeAttestationSigner"`.
 */
export function usePrepareAccountsAuthorizeAttestationSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeAttestationSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeAttestationSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeAttestationSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"authorizeSigner"`.
 */
export function usePrepareAccountsAuthorizeSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'authorizeSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'authorizeSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"completeSignerAuthorization"`.
 */
export function usePrepareAccountsCompleteSignerAuthorization(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'completeSignerAuthorization'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'completeSignerAuthorization',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'completeSignerAuthorization'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeDefaultSigner"`.
 */
export function usePrepareAccountsRemoveDefaultSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeDefaultSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeDefaultSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeDefaultSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeIndexedSigner"`.
 */
export function usePrepareAccountsRemoveIndexedSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeIndexedSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeIndexedSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeIndexedSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeSigner"`.
 */
export function usePrepareAccountsRemoveSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeVoteSigner"`.
 */
export function usePrepareAccountsRemoveVoteSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeVoteSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeVoteSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeVoteSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeValidatorSigner"`.
 */
export function usePrepareAccountsRemoveValidatorSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeValidatorSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeValidatorSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeValidatorSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link accountsABI}__ and `functionName` set to `"removeAttestationSigner"`.
 */
export function usePrepareAccountsRemoveAttestationSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof accountsABI, 'removeAttestationSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: accountsABI,
    functionName: 'removeAttestationSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof accountsABI, 'removeAttestationSigner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__.
 */
export function useAccountsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof accountsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: accountsABI, ...config } as UseContractEventConfig<
    typeof accountsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AccountCreated"`.
 */
export function useAccountsAccountCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AccountCreated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AccountCreated',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AccountCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AccountDataEncryptionKeySet"`.
 */
export function useAccountsAccountDataEncryptionKeySetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AccountDataEncryptionKeySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AccountDataEncryptionKeySet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AccountDataEncryptionKeySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AccountMetadataURLSet"`.
 */
export function useAccountsAccountMetadataUrlSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AccountMetadataURLSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AccountMetadataURLSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AccountMetadataURLSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AccountNameSet"`.
 */
export function useAccountsAccountNameSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AccountNameSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AccountNameSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AccountNameSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AccountWalletAddressSet"`.
 */
export function useAccountsAccountWalletAddressSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AccountWalletAddressSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AccountWalletAddressSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AccountWalletAddressSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AttestationSignerAuthorized"`.
 */
export function useAccountsAttestationSignerAuthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AttestationSignerAuthorized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AttestationSignerAuthorized',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AttestationSignerAuthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"AttestationSignerRemoved"`.
 */
export function useAccountsAttestationSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'AttestationSignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'AttestationSignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'AttestationSignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"DefaultSignerRemoved"`.
 */
export function useAccountsDefaultSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'DefaultSignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'DefaultSignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'DefaultSignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"DefaultSignerSet"`.
 */
export function useAccountsDefaultSignerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'DefaultSignerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'DefaultSignerSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'DefaultSignerSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"IndexedSignerRemoved"`.
 */
export function useAccountsIndexedSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'IndexedSignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'IndexedSignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'IndexedSignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"IndexedSignerSet"`.
 */
export function useAccountsIndexedSignerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'IndexedSignerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'IndexedSignerSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'IndexedSignerSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"LegacySignerRemoved"`.
 */
export function useAccountsLegacySignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'LegacySignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'LegacySignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'LegacySignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"LegacySignerSet"`.
 */
export function useAccountsLegacySignerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'LegacySignerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'LegacySignerSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'LegacySignerSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"OffchainStorageRootAdded"`.
 */
export function useAccountsOffchainStorageRootAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'OffchainStorageRootAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'OffchainStorageRootAdded',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'OffchainStorageRootAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"OffchainStorageRootRemoved"`.
 */
export function useAccountsOffchainStorageRootRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'OffchainStorageRootRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'OffchainStorageRootRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'OffchainStorageRootRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAccountsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"PaymentDelegationSet"`.
 */
export function useAccountsPaymentDelegationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'PaymentDelegationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'PaymentDelegationSet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'PaymentDelegationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useAccountsRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"SignerAuthorizationCompleted"`.
 */
export function useAccountsSignerAuthorizationCompletedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'SignerAuthorizationCompleted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'SignerAuthorizationCompleted',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'SignerAuthorizationCompleted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"SignerAuthorizationStarted"`.
 */
export function useAccountsSignerAuthorizationStartedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'SignerAuthorizationStarted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'SignerAuthorizationStarted',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'SignerAuthorizationStarted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"SignerAuthorized"`.
 */
export function useAccountsSignerAuthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'SignerAuthorized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'SignerAuthorized',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'SignerAuthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"SignerRemoved"`.
 */
export function useAccountsSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'SignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'SignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'SignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"ValidatorSignerAuthorized"`.
 */
export function useAccountsValidatorSignerAuthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'ValidatorSignerAuthorized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'ValidatorSignerAuthorized',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'ValidatorSignerAuthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"ValidatorSignerRemoved"`.
 */
export function useAccountsValidatorSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'ValidatorSignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'ValidatorSignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'ValidatorSignerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"VoteSignerAuthorized"`.
 */
export function useAccountsVoteSignerAuthorizedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'VoteSignerAuthorized'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'VoteSignerAuthorized',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'VoteSignerAuthorized'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link accountsABI}__ and `eventName` set to `"VoteSignerRemoved"`.
 */
export function useAccountsVoteSignerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof accountsABI, 'VoteSignerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: accountsABI,
    eventName: 'VoteSignerRemoved',
    ...config,
  } as UseContractEventConfig<typeof accountsABI, 'VoteSignerRemoved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__.
 */
export function useGasPriceMinimumRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: gasPriceMinimumABI, ...config } as UseContractReadConfig<
    typeof gasPriceMinimumABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"adjustmentSpeed"`.
 */
export function useGasPriceMinimumAdjustmentSpeed<
  TFunctionName extends 'adjustmentSpeed',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'adjustmentSpeed',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"gasPriceMinimum"`.
 */
export function useGasPriceMinimumGasPriceMinimum<
  TFunctionName extends 'gasPriceMinimum',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'gasPriceMinimum',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"gasPriceMinimumFloor"`.
 */
export function useGasPriceMinimumGasPriceMinimumFloor<
  TFunctionName extends 'gasPriceMinimumFloor',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'gasPriceMinimumFloor',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"initialized"`.
 */
export function useGasPriceMinimumInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"isOwner"`.
 */
export function useGasPriceMinimumIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"owner"`.
 */
export function useGasPriceMinimumOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"registry"`.
 */
export function useGasPriceMinimumRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"targetDensity"`.
 */
export function useGasPriceMinimumTargetDensity<
  TFunctionName extends 'targetDensity',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'targetDensity',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useGasPriceMinimumGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"getGasPriceMinimum"`.
 */
export function useGasPriceMinimumGetGasPriceMinimum<
  TFunctionName extends 'getGasPriceMinimum',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'getGasPriceMinimum',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"getUpdatedGasPriceMinimum"`.
 */
export function useGasPriceMinimumGetUpdatedGasPriceMinimum<
  TFunctionName extends 'getUpdatedGasPriceMinimum',
  TSelectData = ReadContractResult<typeof gasPriceMinimumABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: gasPriceMinimumABI,
    functionName: 'getUpdatedGasPriceMinimum',
    ...config,
  } as UseContractReadConfig<typeof gasPriceMinimumABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__.
 */
export function useGasPriceMinimumWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gasPriceMinimumABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof gasPriceMinimumABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, TFunctionName, TMode>({
    abi: gasPriceMinimumABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGasPriceMinimumRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'renounceOwnership', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useGasPriceMinimumSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gasPriceMinimumABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'setRegistry', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGasPriceMinimumTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'transferOwnership', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"initialize"`.
 */
export function useGasPriceMinimumInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gasPriceMinimumABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'initialize', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setAdjustmentSpeed"`.
 */
export function useGasPriceMinimumSetAdjustmentSpeed<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumABI,
          'setAdjustmentSpeed'
        >['request']['abi'],
        'setAdjustmentSpeed',
        TMode
      > & { functionName?: 'setAdjustmentSpeed' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'setAdjustmentSpeed', TMode> & {
        abi?: never
        functionName?: 'setAdjustmentSpeed'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'setAdjustmentSpeed', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'setAdjustmentSpeed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setTargetDensity"`.
 */
export function useGasPriceMinimumSetTargetDensity<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof gasPriceMinimumABI, 'setTargetDensity'>['request']['abi'],
        'setTargetDensity',
        TMode
      > & { functionName?: 'setTargetDensity' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'setTargetDensity', TMode> & {
        abi?: never
        functionName?: 'setTargetDensity'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'setTargetDensity', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'setTargetDensity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setGasPriceMinimumFloor"`.
 */
export function useGasPriceMinimumSetGasPriceMinimumFloor<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumABI,
          'setGasPriceMinimumFloor'
        >['request']['abi'],
        'setGasPriceMinimumFloor',
        TMode
      > & { functionName?: 'setGasPriceMinimumFloor' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'setGasPriceMinimumFloor', TMode> & {
        abi?: never
        functionName?: 'setGasPriceMinimumFloor'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'setGasPriceMinimumFloor', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'setGasPriceMinimumFloor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"updateGasPriceMinimum"`.
 */
export function useGasPriceMinimumUpdateGasPriceMinimum<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof gasPriceMinimumABI,
          'updateGasPriceMinimum'
        >['request']['abi'],
        'updateGasPriceMinimum',
        TMode
      > & { functionName?: 'updateGasPriceMinimum' }
    : UseContractWriteConfig<typeof gasPriceMinimumABI, 'updateGasPriceMinimum', TMode> & {
        abi?: never
        functionName?: 'updateGasPriceMinimum'
      } = {} as any
) {
  return useContractWrite<typeof gasPriceMinimumABI, 'updateGasPriceMinimum', TMode>({
    abi: gasPriceMinimumABI,
    functionName: 'updateGasPriceMinimum',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__.
 */
export function usePrepareGasPriceMinimumWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGasPriceMinimumRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareGasPriceMinimumSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGasPriceMinimumTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGasPriceMinimumInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setAdjustmentSpeed"`.
 */
export function usePrepareGasPriceMinimumSetAdjustmentSpeed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setAdjustmentSpeed'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'setAdjustmentSpeed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setAdjustmentSpeed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setTargetDensity"`.
 */
export function usePrepareGasPriceMinimumSetTargetDensity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setTargetDensity'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'setTargetDensity',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setTargetDensity'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"setGasPriceMinimumFloor"`.
 */
export function usePrepareGasPriceMinimumSetGasPriceMinimumFloor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setGasPriceMinimumFloor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'setGasPriceMinimumFloor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'setGasPriceMinimumFloor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `functionName` set to `"updateGasPriceMinimum"`.
 */
export function usePrepareGasPriceMinimumUpdateGasPriceMinimum(
  config: Omit<
    UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'updateGasPriceMinimum'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: gasPriceMinimumABI,
    functionName: 'updateGasPriceMinimum',
    ...config,
  } as UsePrepareContractWriteConfig<typeof gasPriceMinimumABI, 'updateGasPriceMinimum'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__.
 */
export function useGasPriceMinimumEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof gasPriceMinimumABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: gasPriceMinimumABI, ...config } as UseContractEventConfig<
    typeof gasPriceMinimumABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"AdjustmentSpeedSet"`.
 */
export function useGasPriceMinimumAdjustmentSpeedSetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'AdjustmentSpeedSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'AdjustmentSpeedSet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'AdjustmentSpeedSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"GasPriceMinimumFloorSet"`.
 */
export function useGasPriceMinimumGasPriceMinimumFloorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'GasPriceMinimumFloorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'GasPriceMinimumFloorSet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'GasPriceMinimumFloorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"GasPriceMinimumUpdated"`.
 */
export function useGasPriceMinimumGasPriceMinimumUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'GasPriceMinimumUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'GasPriceMinimumUpdated',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'GasPriceMinimumUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGasPriceMinimumOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useGasPriceMinimumRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gasPriceMinimumABI}__ and `eventName` set to `"TargetDensitySet"`.
 */
export function useGasPriceMinimumTargetDensitySetEvent(
  config: Omit<
    UseContractEventConfig<typeof gasPriceMinimumABI, 'TargetDensitySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: gasPriceMinimumABI,
    eventName: 'TargetDensitySet',
    ...config,
  } as UseContractEventConfig<typeof gasPriceMinimumABI, 'TargetDensitySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__.
 */
export function useFeeCurrencyWhitelistRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: feeCurrencyWhitelistABI, ...config } as UseContractReadConfig<
    typeof feeCurrencyWhitelistABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"initialized"`.
 */
export function useFeeCurrencyWhitelistInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"isOwner"`.
 */
export function useFeeCurrencyWhitelistIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"owner"`.
 */
export function useFeeCurrencyWhitelistOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"whitelist"`.
 */
export function useFeeCurrencyWhitelistWhitelist<
  TFunctionName extends 'whitelist',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistABI,
    functionName: 'whitelist',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"getWhitelist"`.
 */
export function useFeeCurrencyWhitelistGetWhitelist<
  TFunctionName extends 'getWhitelist',
  TSelectData = ReadContractResult<typeof feeCurrencyWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: feeCurrencyWhitelistABI,
    functionName: 'getWhitelist',
    ...config,
  } as UseContractReadConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__.
 */
export function useFeeCurrencyWhitelistWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feeCurrencyWhitelistABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof feeCurrencyWhitelistABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistABI, TFunctionName, TMode>({
    abi: feeCurrencyWhitelistABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useFeeCurrencyWhitelistRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feeCurrencyWhitelistABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistABI, 'renounceOwnership', TMode>({
    abi: feeCurrencyWhitelistABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useFeeCurrencyWhitelistTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof feeCurrencyWhitelistABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistABI, 'transferOwnership', TMode>({
    abi: feeCurrencyWhitelistABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"initialize"`.
 */
export function useFeeCurrencyWhitelistInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feeCurrencyWhitelistABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistABI, 'initialize', TMode>({
    abi: feeCurrencyWhitelistABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"addToken"`.
 */
export function useFeeCurrencyWhitelistAddToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof feeCurrencyWhitelistABI, 'addToken'>['request']['abi'],
        'addToken',
        TMode
      > & { functionName?: 'addToken' }
    : UseContractWriteConfig<typeof feeCurrencyWhitelistABI, 'addToken', TMode> & {
        abi?: never
        functionName?: 'addToken'
      } = {} as any
) {
  return useContractWrite<typeof feeCurrencyWhitelistABI, 'addToken', TMode>({
    abi: feeCurrencyWhitelistABI,
    functionName: 'addToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__.
 */
export function usePrepareFeeCurrencyWhitelistWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareFeeCurrencyWhitelistRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareFeeCurrencyWhitelistTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareFeeCurrencyWhitelistInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `functionName` set to `"addToken"`.
 */
export function usePrepareFeeCurrencyWhitelistAddToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'addToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: feeCurrencyWhitelistABI,
    functionName: 'addToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof feeCurrencyWhitelistABI, 'addToken'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__.
 */
export function useFeeCurrencyWhitelistEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof feeCurrencyWhitelistABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: feeCurrencyWhitelistABI, ...config } as UseContractEventConfig<
    typeof feeCurrencyWhitelistABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link feeCurrencyWhitelistABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useFeeCurrencyWhitelistOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof feeCurrencyWhitelistABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: feeCurrencyWhitelistABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof feeCurrencyWhitelistABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__.
 */
export function useGoldTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: goldTokenABI, ...config } as UseContractReadConfig<
    typeof goldTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"initialized"`.
 */
export function useGoldTokenInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"isOwner"`.
 */
export function useGoldTokenIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useGoldTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"registry"`.
 */
export function useGoldTokenRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useGoldTokenGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"name"`.
 */
export function useGoldTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useGoldTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useGoldTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useGoldTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"circulatingSupply"`.
 */
export function useGoldTokenCirculatingSupply<
  TFunctionName extends 'circulatingSupply',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'circulatingSupply',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useGoldTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"getBurnedAmount"`.
 */
export function useGoldTokenGetBurnedAmount<
  TFunctionName extends 'getBurnedAmount',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'getBurnedAmount',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useGoldTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof goldTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: goldTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof goldTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__.
 */
export function useGoldTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof goldTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, TFunctionName, TMode>({
    abi: goldTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGoldTokenRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof goldTokenABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'renounceOwnership', TMode>({
    abi: goldTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useGoldTokenSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof goldTokenABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'setRegistry', TMode>({
    abi: goldTokenABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGoldTokenTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof goldTokenABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'transferOwnership', TMode>({
    abi: goldTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useGoldTokenInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof goldTokenABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'initialize', TMode>({
    abi: goldTokenABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useGoldTokenTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof goldTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'transfer', TMode>({
    abi: goldTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function useGoldTokenTransferWithComment<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'transferWithComment'>['request']['abi'],
        'transferWithComment',
        TMode
      > & { functionName?: 'transferWithComment' }
    : UseContractWriteConfig<typeof goldTokenABI, 'transferWithComment', TMode> & {
        abi?: never
        functionName?: 'transferWithComment'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'transferWithComment', TMode>({
    abi: goldTokenABI,
    functionName: 'transferWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useGoldTokenBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof goldTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'burn', TMode>({
    abi: goldTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useGoldTokenApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof goldTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'approve', TMode>({
    abi: goldTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useGoldTokenIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof goldTokenABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'increaseAllowance', TMode>({
    abi: goldTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useGoldTokenDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof goldTokenABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'decreaseAllowance', TMode>({
    abi: goldTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useGoldTokenTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof goldTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'transferFrom', TMode>({
    abi: goldTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useGoldTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof goldTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'mint', TMode>({
    abi: goldTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"increaseSupply"`.
 */
export function useGoldTokenIncreaseSupply<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof goldTokenABI, 'increaseSupply'>['request']['abi'],
        'increaseSupply',
        TMode
      > & { functionName?: 'increaseSupply' }
    : UseContractWriteConfig<typeof goldTokenABI, 'increaseSupply', TMode> & {
        abi?: never
        functionName?: 'increaseSupply'
      } = {} as any
) {
  return useContractWrite<typeof goldTokenABI, 'increaseSupply', TMode>({
    abi: goldTokenABI,
    functionName: 'increaseSupply',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__.
 */
export function usePrepareGoldTokenWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof goldTokenABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: goldTokenABI, ...config } as UsePrepareContractWriteConfig<
    typeof goldTokenABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGoldTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareGoldTokenSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGoldTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGoldTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareGoldTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function usePrepareGoldTokenTransferWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferWithComment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'transferWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferWithComment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareGoldTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGoldTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareGoldTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareGoldTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareGoldTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareGoldTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link goldTokenABI}__ and `functionName` set to `"increaseSupply"`.
 */
export function usePrepareGoldTokenIncreaseSupply(
  config: Omit<
    UsePrepareContractWriteConfig<typeof goldTokenABI, 'increaseSupply'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: goldTokenABI,
    functionName: 'increaseSupply',
    ...config,
  } as UsePrepareContractWriteConfig<typeof goldTokenABI, 'increaseSupply'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__.
 */
export function useGoldTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof goldTokenABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: goldTokenABI, ...config } as UseContractEventConfig<
    typeof goldTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useGoldTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof goldTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGoldTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof goldTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useGoldTokenRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof goldTokenABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useGoldTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof goldTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link goldTokenABI}__ and `eventName` set to `"TransferComment"`.
 */
export function useGoldTokenTransferCommentEvent(
  config: Omit<
    UseContractEventConfig<typeof goldTokenABI, 'TransferComment'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: goldTokenABI,
    eventName: 'TransferComment',
    ...config,
  } as UseContractEventConfig<typeof goldTokenABI, 'TransferComment'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__.
 */
export function useMetaTransactionWalletRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: metaTransactionWalletABI, ...config } as UseContractReadConfig<
    typeof metaTransactionWalletABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"EIP712_EXECUTE_META_TRANSACTION_TYPEHASH"`.
 */
export function useMetaTransactionWalletEip712ExecuteMetaTransactionTypehash<
  TFunctionName extends 'EIP712_EXECUTE_META_TRANSACTION_TYPEHASH',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'EIP712_EXECUTE_META_TRANSACTION_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"eip712DomainSeparator"`.
 */
export function useMetaTransactionWalletEip712DomainSeparator<
  TFunctionName extends 'eip712DomainSeparator',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'eip712DomainSeparator',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"guardian"`.
 */
export function useMetaTransactionWalletGuardian<
  TFunctionName extends 'guardian',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'guardian',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"initialized"`.
 */
export function useMetaTransactionWalletInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"isOwner"`.
 */
export function useMetaTransactionWalletIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"nonce"`.
 */
export function useMetaTransactionWalletNonce<
  TFunctionName extends 'nonce',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'nonce',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"owner"`.
 */
export function useMetaTransactionWalletOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"signer"`.
 */
export function useMetaTransactionWalletSigner<
  TFunctionName extends 'signer',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'signer',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useMetaTransactionWalletGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"getMetaTransactionDigest"`.
 */
export function useMetaTransactionWalletGetMetaTransactionDigest<
  TFunctionName extends 'getMetaTransactionDigest',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'getMetaTransactionDigest',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"getMetaTransactionSigner"`.
 */
export function useMetaTransactionWalletGetMetaTransactionSigner<
  TFunctionName extends 'getMetaTransactionSigner',
  TSelectData = ReadContractResult<typeof metaTransactionWalletABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletABI,
    functionName: 'getMetaTransactionSigner',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__.
 */
export function useMetaTransactionWalletWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof metaTransactionWalletABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof metaTransactionWalletABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, TFunctionName, TMode>({
    abi: metaTransactionWalletABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useMetaTransactionWalletRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'renounceOwnership', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useMetaTransactionWalletTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'transferOwnership', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"initialize"`.
 */
export function useMetaTransactionWalletInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof metaTransactionWalletABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'initialize', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setSigner"`.
 */
export function useMetaTransactionWalletSetSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof metaTransactionWalletABI, 'setSigner'>['request']['abi'],
        'setSigner',
        TMode
      > & { functionName?: 'setSigner' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'setSigner', TMode> & {
        abi?: never
        functionName?: 'setSigner'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'setSigner', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'setSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setGuardian"`.
 */
export function useMetaTransactionWalletSetGuardian<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'setGuardian'
        >['request']['abi'],
        'setGuardian',
        TMode
      > & { functionName?: 'setGuardian' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'setGuardian', TMode> & {
        abi?: never
        functionName?: 'setGuardian'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'setGuardian', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'setGuardian',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"recoverWallet"`.
 */
export function useMetaTransactionWalletRecoverWallet<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'recoverWallet'
        >['request']['abi'],
        'recoverWallet',
        TMode
      > & { functionName?: 'recoverWallet' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'recoverWallet', TMode> & {
        abi?: never
        functionName?: 'recoverWallet'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'recoverWallet', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'recoverWallet',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setEip712DomainSeparator"`.
 */
export function useMetaTransactionWalletSetEip712DomainSeparator<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'setEip712DomainSeparator'
        >['request']['abi'],
        'setEip712DomainSeparator',
        TMode
      > & { functionName?: 'setEip712DomainSeparator' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'setEip712DomainSeparator', TMode> & {
        abi?: never
        functionName?: 'setEip712DomainSeparator'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'setEip712DomainSeparator', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'setEip712DomainSeparator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeMetaTransaction"`.
 */
export function useMetaTransactionWalletExecuteMetaTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'executeMetaTransaction'
        >['request']['abi'],
        'executeMetaTransaction',
        TMode
      > & { functionName?: 'executeMetaTransaction' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'executeMetaTransaction', TMode> & {
        abi?: never
        functionName?: 'executeMetaTransaction'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'executeMetaTransaction', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'executeMetaTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useMetaTransactionWalletExecuteTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'executeTransaction'
        >['request']['abi'],
        'executeTransaction',
        TMode
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransaction', TMode> & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'executeTransaction', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeTransactions"`.
 */
export function useMetaTransactionWalletExecuteTransactions<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletABI,
          'executeTransactions'
        >['request']['abi'],
        'executeTransactions',
        TMode
      > & { functionName?: 'executeTransactions' }
    : UseContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransactions', TMode> & {
        abi?: never
        functionName?: 'executeTransactions'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletABI, 'executeTransactions', TMode>({
    abi: metaTransactionWalletABI,
    functionName: 'executeTransactions',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__.
 */
export function usePrepareMetaTransactionWalletWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareMetaTransactionWalletRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareMetaTransactionWalletTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMetaTransactionWalletInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setSigner"`.
 */
export function usePrepareMetaTransactionWalletSetSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'setSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setGuardian"`.
 */
export function usePrepareMetaTransactionWalletSetGuardian(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setGuardian'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'setGuardian',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setGuardian'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"recoverWallet"`.
 */
export function usePrepareMetaTransactionWalletRecoverWallet(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'recoverWallet'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'recoverWallet',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'recoverWallet'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"setEip712DomainSeparator"`.
 */
export function usePrepareMetaTransactionWalletSetEip712DomainSeparator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setEip712DomainSeparator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'setEip712DomainSeparator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'setEip712DomainSeparator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeMetaTransaction"`.
 */
export function usePrepareMetaTransactionWalletExecuteMetaTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeMetaTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'executeMetaTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeMetaTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareMetaTransactionWalletExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `functionName` set to `"executeTransactions"`.
 */
export function usePrepareMetaTransactionWalletExecuteTransactions(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransactions'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletABI,
    functionName: 'executeTransactions',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletABI, 'executeTransactions'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__.
 */
export function useMetaTransactionWalletEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: metaTransactionWalletABI, ...config } as UseContractEventConfig<
    typeof metaTransactionWalletABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"Deposit"`.
 */
export function useMetaTransactionWalletDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"EIP712DomainSeparatorSet"`.
 */
export function useMetaTransactionWalletEip712DomainSeparatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'EIP712DomainSeparatorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'EIP712DomainSeparatorSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'EIP712DomainSeparatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"GuardianSet"`.
 */
export function useMetaTransactionWalletGuardianSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'GuardianSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'GuardianSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'GuardianSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"MetaTransactionExecution"`.
 */
export function useMetaTransactionWalletMetaTransactionExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'MetaTransactionExecution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'MetaTransactionExecution',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'MetaTransactionExecution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useMetaTransactionWalletOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"SignerSet"`.
 */
export function useMetaTransactionWalletSignerSetEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'SignerSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'SignerSet',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'SignerSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"TransactionExecution"`.
 */
export function useMetaTransactionWalletTransactionExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'TransactionExecution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'TransactionExecution',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'TransactionExecution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletABI}__ and `eventName` set to `"WalletRecovered"`.
 */
export function useMetaTransactionWalletWalletRecoveredEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletABI, 'WalletRecovered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletABI,
    eventName: 'WalletRecovered',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletABI, 'WalletRecovered'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__.
 */
export function useMetaTransactionWalletDeployerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof metaTransactionWalletDeployerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletDeployerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletDeployerABI,
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletDeployerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useMetaTransactionWalletDeployerGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof metaTransactionWalletDeployerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof metaTransactionWalletDeployerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: metaTransactionWalletDeployerABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof metaTransactionWalletDeployerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__.
 */
export function useMetaTransactionWalletDeployerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerABI,
          string
        >['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof metaTransactionWalletDeployerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletDeployerABI, TFunctionName, TMode>({
    abi: metaTransactionWalletDeployerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__ and `functionName` set to `"deploy"`.
 */
export function useMetaTransactionWalletDeployerDeploy<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof metaTransactionWalletDeployerABI,
          'deploy'
        >['request']['abi'],
        'deploy',
        TMode
      > & { functionName?: 'deploy' }
    : UseContractWriteConfig<typeof metaTransactionWalletDeployerABI, 'deploy', TMode> & {
        abi?: never
        functionName?: 'deploy'
      } = {} as any
) {
  return useContractWrite<typeof metaTransactionWalletDeployerABI, 'deploy', TMode>({
    abi: metaTransactionWalletDeployerABI,
    functionName: 'deploy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__.
 */
export function usePrepareMetaTransactionWalletDeployerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__ and `functionName` set to `"deploy"`.
 */
export function usePrepareMetaTransactionWalletDeployerDeploy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerABI, 'deploy'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: metaTransactionWalletDeployerABI,
    functionName: 'deploy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof metaTransactionWalletDeployerABI, 'deploy'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__.
 */
export function useMetaTransactionWalletDeployerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletDeployerABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletDeployerABI,
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletDeployerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link metaTransactionWalletDeployerABI}__ and `eventName` set to `"WalletDeployed"`.
 */
export function useMetaTransactionWalletDeployerWalletDeployedEvent(
  config: Omit<
    UseContractEventConfig<typeof metaTransactionWalletDeployerABI, 'WalletDeployed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: metaTransactionWalletDeployerABI,
    eventName: 'WalletDeployed',
    ...config,
  } as UseContractEventConfig<typeof metaTransactionWalletDeployerABI, 'WalletDeployed'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__.
 */
export function useMultiSigRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: multiSigABI, ...config } as UseContractReadConfig<
    typeof multiSigABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"MAX_OWNER_COUNT"`.
 */
export function useMultiSigMaxOwnerCount<
  TFunctionName extends 'MAX_OWNER_COUNT',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'MAX_OWNER_COUNT',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"confirmations"`.
 */
export function useMultiSigConfirmations<
  TFunctionName extends 'confirmations',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'confirmations',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"initialized"`.
 */
export function useMultiSigInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"internalRequired"`.
 */
export function useMultiSigInternalRequired<
  TFunctionName extends 'internalRequired',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'internalRequired',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"isOwner"`.
 */
export function useMultiSigIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"owners"`.
 */
export function useMultiSigOwners<
  TFunctionName extends 'owners',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"required"`.
 */
export function useMultiSigRequired<
  TFunctionName extends 'required',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'required',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"transactionCount"`.
 */
export function useMultiSigTransactionCount<
  TFunctionName extends 'transactionCount',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'transactionCount',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"transactions"`.
 */
export function useMultiSigTransactions<
  TFunctionName extends 'transactions',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'transactions',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"isConfirmed"`.
 */
export function useMultiSigIsConfirmed<
  TFunctionName extends 'isConfirmed',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'isConfirmed',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"getConfirmationCount"`.
 */
export function useMultiSigGetConfirmationCount<
  TFunctionName extends 'getConfirmationCount',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'getConfirmationCount',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"getTransactionCount"`.
 */
export function useMultiSigGetTransactionCount<
  TFunctionName extends 'getTransactionCount',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'getTransactionCount',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"getOwners"`.
 */
export function useMultiSigGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"getConfirmations"`.
 */
export function useMultiSigGetConfirmations<
  TFunctionName extends 'getConfirmations',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'getConfirmations',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"getTransactionIds"`.
 */
export function useMultiSigGetTransactionIds<
  TFunctionName extends 'getTransactionIds',
  TSelectData = ReadContractResult<typeof multiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: multiSigABI,
    functionName: 'getTransactionIds',
    ...config,
  } as UseContractReadConfig<typeof multiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__.
 */
export function useMultiSigWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof multiSigABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, TFunctionName, TMode>({
    abi: multiSigABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function useMultiSigInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof multiSigABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'initialize', TMode>({
    abi: multiSigABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function useMultiSigAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'addOwner'>['request']['abi'],
        'addOwner',
        TMode
      > & { functionName?: 'addOwner' }
    : UseContractWriteConfig<typeof multiSigABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'addOwner', TMode>({
    abi: multiSigABI,
    functionName: 'addOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useMultiSigRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'removeOwner'>['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof multiSigABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'removeOwner', TMode>({
    abi: multiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function useMultiSigReplaceOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'replaceOwner'>['request']['abi'],
        'replaceOwner',
        TMode
      > & { functionName?: 'replaceOwner' }
    : UseContractWriteConfig<typeof multiSigABI, 'replaceOwner', TMode> & {
        abi?: never
        functionName?: 'replaceOwner'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'replaceOwner', TMode>({
    abi: multiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function useMultiSigChangeRequirement<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'changeRequirement'>['request']['abi'],
        'changeRequirement',
        TMode
      > & { functionName?: 'changeRequirement' }
    : UseContractWriteConfig<typeof multiSigABI, 'changeRequirement', TMode> & {
        abi?: never
        functionName?: 'changeRequirement'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'changeRequirement', TMode>({
    abi: multiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function useMultiSigChangeInternalRequirement<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof multiSigABI,
          'changeInternalRequirement'
        >['request']['abi'],
        'changeInternalRequirement',
        TMode
      > & { functionName?: 'changeInternalRequirement' }
    : UseContractWriteConfig<typeof multiSigABI, 'changeInternalRequirement', TMode> & {
        abi?: never
        functionName?: 'changeInternalRequirement'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'changeInternalRequirement', TMode>({
    abi: multiSigABI,
    functionName: 'changeInternalRequirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function useMultiSigSubmitTransaction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'submitTransaction'>['request']['abi'],
        'submitTransaction',
        TMode
      > & { functionName?: 'submitTransaction' }
    : UseContractWriteConfig<typeof multiSigABI, 'submitTransaction', TMode> & {
        abi?: never
        functionName?: 'submitTransaction'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'submitTransaction', TMode>({
    abi: multiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function useMultiSigConfirmTransaction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'confirmTransaction'>['request']['abi'],
        'confirmTransaction',
        TMode
      > & { functionName?: 'confirmTransaction' }
    : UseContractWriteConfig<typeof multiSigABI, 'confirmTransaction', TMode> & {
        abi?: never
        functionName?: 'confirmTransaction'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'confirmTransaction', TMode>({
    abi: multiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function useMultiSigRevokeConfirmation<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'revokeConfirmation'>['request']['abi'],
        'revokeConfirmation',
        TMode
      > & { functionName?: 'revokeConfirmation' }
    : UseContractWriteConfig<typeof multiSigABI, 'revokeConfirmation', TMode> & {
        abi?: never
        functionName?: 'revokeConfirmation'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'revokeConfirmation', TMode>({
    abi: multiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useMultiSigExecuteTransaction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof multiSigABI, 'executeTransaction'>['request']['abi'],
        'executeTransaction',
        TMode
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<typeof multiSigABI, 'executeTransaction', TMode> & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any
) {
  return useContractWrite<typeof multiSigABI, 'executeTransaction', TMode>({
    abi: multiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__.
 */
export function usePrepareMultiSigWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof multiSigABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: multiSigABI, ...config } as UsePrepareContractWriteConfig<
    typeof multiSigABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareMultiSigInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareMultiSigAddOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'addOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'addOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'addOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareMultiSigRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function usePrepareMultiSigReplaceOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'replaceOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'replaceOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function usePrepareMultiSigChangeRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'changeRequirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'changeRequirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function usePrepareMultiSigChangeInternalRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'changeInternalRequirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'changeInternalRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'changeInternalRequirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function usePrepareMultiSigSubmitTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'submitTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'submitTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function usePrepareMultiSigConfirmTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'confirmTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'confirmTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function usePrepareMultiSigRevokeConfirmation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'revokeConfirmation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'revokeConfirmation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareMultiSigExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multiSigABI, 'executeTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: multiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multiSigABI, 'executeTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__.
 */
export function useMultiSigEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof multiSigABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: multiSigABI, ...config } as UseContractEventConfig<
    typeof multiSigABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"Confirmation"`.
 */
export function useMultiSigConfirmationEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'Confirmation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'Confirmation',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'Confirmation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"Deposit"`.
 */
export function useMultiSigDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"Execution"`.
 */
export function useMultiSigExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'Execution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'Execution',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'Execution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"InternalRequirementChange"`.
 */
export function useMultiSigInternalRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'InternalRequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'InternalRequirementChange',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'InternalRequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"OwnerAddition"`.
 */
export function useMultiSigOwnerAdditionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'OwnerAddition'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'OwnerAddition',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'OwnerAddition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"OwnerRemoval"`.
 */
export function useMultiSigOwnerRemovalEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'OwnerRemoval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'OwnerRemoval',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'OwnerRemoval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"RequirementChange"`.
 */
export function useMultiSigRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'RequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'RequirementChange',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'RequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"Revocation"`.
 */
export function useMultiSigRevocationEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'Revocation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'Revocation',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'Revocation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link multiSigABI}__ and `eventName` set to `"Submission"`.
 */
export function useMultiSigSubmissionEvent(
  config: Omit<
    UseContractEventConfig<typeof multiSigABI, 'Submission'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: multiSigABI,
    eventName: 'Submission',
    ...config,
  } as UseContractEventConfig<typeof multiSigABI, 'Submission'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: registryABI, ...config } as UseContractReadConfig<
    typeof registryABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"initialized"`.
 */
export function useRegistryInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isOwner"`.
 */
export function useRegistryIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"owner"`.
 */
export function useRegistryOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"registry"`.
 */
export function useRegistryRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getAddressForOrDie"`.
 */
export function useRegistryGetAddressForOrDie<
  TFunctionName extends 'getAddressForOrDie',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getAddressForOrDie',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getAddressFor"`.
 */
export function useRegistryGetAddressFor<
  TFunctionName extends 'getAddressFor',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getAddressFor',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getAddressForStringOrDie"`.
 */
export function useRegistryGetAddressForStringOrDie<
  TFunctionName extends 'getAddressForStringOrDie',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getAddressForStringOrDie',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getAddressForString"`.
 */
export function useRegistryGetAddressForString<
  TFunctionName extends 'getAddressForString',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'getAddressForString',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isOneOf"`.
 */
export function useRegistryIsOneOf<
  TFunctionName extends 'isOneOf',
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    functionName: 'isOneOf',
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof registryABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof registryABI, TFunctionName, TMode>({
    abi: registryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRegistryRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof registryABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'renounceOwnership', TMode>({
    abi: registryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRegistryTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof registryABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'transferOwnership', TMode>({
    abi: registryABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"initialize"`.
 */
export function useRegistryInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof registryABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'initialize', TMode>({
    abi: registryABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setAddressFor"`.
 */
export function useRegistrySetAddressFor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof registryABI, 'setAddressFor'>['request']['abi'],
        'setAddressFor',
        TMode
      > & { functionName?: 'setAddressFor' }
    : UseContractWriteConfig<typeof registryABI, 'setAddressFor', TMode> & {
        abi?: never
        functionName?: 'setAddressFor'
      } = {} as any
) {
  return useContractWrite<typeof registryABI, 'setAddressFor', TMode>({
    abi: registryABI,
    functionName: 'setAddressFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function usePrepareRegistryWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: registryABI, ...config } as UsePrepareContractWriteConfig<
    typeof registryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRegistryRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRegistryTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setAddressFor"`.
 */
export function usePrepareRegistrySetAddressFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, 'setAddressFor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    functionName: 'setAddressFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, 'setAddressFor'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof registryABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: registryABI, ...config } as UseContractEventConfig<
    typeof registryABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRegistryOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof registryABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RegistryUpdated"`.
 */
export function useRegistryRegistryUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, 'RegistryUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    eventName: 'RegistryUpdated',
    ...config,
  } as UseContractEventConfig<typeof registryABI, 'RegistryUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link freezerABI}__.
 */
export function useFreezerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof freezerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: freezerABI, ...config } as UseContractReadConfig<
    typeof freezerABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"initialized"`.
 */
export function useFreezerInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof freezerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: freezerABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"isFrozen"`.
 */
export function useFreezerIsFrozen<
  TFunctionName extends 'isFrozen',
  TSelectData = ReadContractResult<typeof freezerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: freezerABI,
    functionName: 'isFrozen',
    ...config,
  } as UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"isOwner"`.
 */
export function useFreezerIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof freezerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: freezerABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"owner"`.
 */
export function useFreezerOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof freezerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: freezerABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof freezerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__.
 */
export function useFreezerWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof freezerABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, TFunctionName, TMode>({
    abi: freezerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useFreezerRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof freezerABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, 'renounceOwnership', TMode>({
    abi: freezerABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useFreezerTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof freezerABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, 'transferOwnership', TMode>({
    abi: freezerABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"initialize"`.
 */
export function useFreezerInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof freezerABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, 'initialize', TMode>({
    abi: freezerABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"freeze"`.
 */
export function useFreezerFreeze<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, 'freeze'>['request']['abi'],
        'freeze',
        TMode
      > & { functionName?: 'freeze' }
    : UseContractWriteConfig<typeof freezerABI, 'freeze', TMode> & {
        abi?: never
        functionName?: 'freeze'
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, 'freeze', TMode>({
    abi: freezerABI,
    functionName: 'freeze',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"unfreeze"`.
 */
export function useFreezerUnfreeze<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof freezerABI, 'unfreeze'>['request']['abi'],
        'unfreeze',
        TMode
      > & { functionName?: 'unfreeze' }
    : UseContractWriteConfig<typeof freezerABI, 'unfreeze', TMode> & {
        abi?: never
        functionName?: 'unfreeze'
      } = {} as any
) {
  return useContractWrite<typeof freezerABI, 'unfreeze', TMode>({
    abi: freezerABI,
    functionName: 'unfreeze',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__.
 */
export function usePrepareFreezerWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof freezerABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: freezerABI, ...config } as UsePrepareContractWriteConfig<
    typeof freezerABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareFreezerRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof freezerABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: freezerABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof freezerABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareFreezerTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof freezerABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: freezerABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof freezerABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareFreezerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof freezerABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: freezerABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof freezerABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"freeze"`.
 */
export function usePrepareFreezerFreeze(
  config: Omit<
    UsePrepareContractWriteConfig<typeof freezerABI, 'freeze'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: freezerABI,
    functionName: 'freeze',
    ...config,
  } as UsePrepareContractWriteConfig<typeof freezerABI, 'freeze'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link freezerABI}__ and `functionName` set to `"unfreeze"`.
 */
export function usePrepareFreezerUnfreeze(
  config: Omit<
    UsePrepareContractWriteConfig<typeof freezerABI, 'unfreeze'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: freezerABI,
    functionName: 'unfreeze',
    ...config,
  } as UsePrepareContractWriteConfig<typeof freezerABI, 'unfreeze'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link freezerABI}__.
 */
export function useFreezerEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof freezerABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: freezerABI, ...config } as UseContractEventConfig<
    typeof freezerABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link freezerABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useFreezerOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof freezerABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: freezerABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof freezerABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__.
 */
export function useTransferWhitelistRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: transferWhitelistABI, ...config } as UseContractReadConfig<
    typeof transferWhitelistABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"isOwner"`.
 */
export function useTransferWhitelistIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"owner"`.
 */
export function useTransferWhitelistOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"registry"`.
 */
export function useTransferWhitelistRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"whitelistedContractIdentifiers"`.
 */
export function useTransferWhitelistWhitelistedContractIdentifiers<
  TFunctionName extends 'whitelistedContractIdentifiers',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'whitelistedContractIdentifiers',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"getNumberOfWhitelistedContractIdentifiers"`.
 */
export function useTransferWhitelistGetNumberOfWhitelistedContractIdentifiers<
  TFunctionName extends 'getNumberOfWhitelistedContractIdentifiers',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'getNumberOfWhitelistedContractIdentifiers',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"getWhitelist"`.
 */
export function useTransferWhitelistGetWhitelist<
  TFunctionName extends 'getWhitelist',
  TSelectData = ReadContractResult<typeof transferWhitelistABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: transferWhitelistABI,
    functionName: 'getWhitelist',
    ...config,
  } as UseContractReadConfig<typeof transferWhitelistABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__.
 */
export function useTransferWhitelistWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof transferWhitelistABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof transferWhitelistABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, TFunctionName, TMode>({
    abi: transferWhitelistABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useTransferWhitelistRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'renounceOwnership', TMode>({
    abi: transferWhitelistABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useTransferWhitelistSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof transferWhitelistABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'setRegistry', TMode>({
    abi: transferWhitelistABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useTransferWhitelistTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'transferOwnership', TMode>({
    abi: transferWhitelistABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"whitelistAddress"`.
 */
export function useTransferWhitelistWhitelistAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'whitelistAddress'
        >['request']['abi'],
        'whitelistAddress',
        TMode
      > & { functionName?: 'whitelistAddress' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'whitelistAddress', TMode> & {
        abi?: never
        functionName?: 'whitelistAddress'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'whitelistAddress', TMode>({
    abi: transferWhitelistABI,
    functionName: 'whitelistAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"removeAddress"`.
 */
export function useTransferWhitelistRemoveAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof transferWhitelistABI, 'removeAddress'>['request']['abi'],
        'removeAddress',
        TMode
      > & { functionName?: 'removeAddress' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'removeAddress', TMode> & {
        abi?: never
        functionName?: 'removeAddress'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'removeAddress', TMode>({
    abi: transferWhitelistABI,
    functionName: 'removeAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"whitelistRegisteredContract"`.
 */
export function useTransferWhitelistWhitelistRegisteredContract<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'whitelistRegisteredContract'
        >['request']['abi'],
        'whitelistRegisteredContract',
        TMode
      > & { functionName?: 'whitelistRegisteredContract' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'whitelistRegisteredContract', TMode> & {
        abi?: never
        functionName?: 'whitelistRegisteredContract'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'whitelistRegisteredContract', TMode>({
    abi: transferWhitelistABI,
    functionName: 'whitelistRegisteredContract',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setDirectlyWhitelistedAddresses"`.
 */
export function useTransferWhitelistSetDirectlyWhitelistedAddresses<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'setDirectlyWhitelistedAddresses'
        >['request']['abi'],
        'setDirectlyWhitelistedAddresses',
        TMode
      > & { functionName?: 'setDirectlyWhitelistedAddresses' }
    : UseContractWriteConfig<
        typeof transferWhitelistABI,
        'setDirectlyWhitelistedAddresses',
        TMode
      > & {
        abi?: never
        functionName?: 'setDirectlyWhitelistedAddresses'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'setDirectlyWhitelistedAddresses', TMode>({
    abi: transferWhitelistABI,
    functionName: 'setDirectlyWhitelistedAddresses',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setWhitelistedContractIdentifiers"`.
 */
export function useTransferWhitelistSetWhitelistedContractIdentifiers<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof transferWhitelistABI,
          'setWhitelistedContractIdentifiers'
        >['request']['abi'],
        'setWhitelistedContractIdentifiers',
        TMode
      > & { functionName?: 'setWhitelistedContractIdentifiers' }
    : UseContractWriteConfig<
        typeof transferWhitelistABI,
        'setWhitelistedContractIdentifiers',
        TMode
      > & {
        abi?: never
        functionName?: 'setWhitelistedContractIdentifiers'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'setWhitelistedContractIdentifiers', TMode>({
    abi: transferWhitelistABI,
    functionName: 'setWhitelistedContractIdentifiers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"selfDestruct"`.
 */
export function useTransferWhitelistSelfDestruct<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof transferWhitelistABI, 'selfDestruct'>['request']['abi'],
        'selfDestruct',
        TMode
      > & { functionName?: 'selfDestruct' }
    : UseContractWriteConfig<typeof transferWhitelistABI, 'selfDestruct', TMode> & {
        abi?: never
        functionName?: 'selfDestruct'
      } = {} as any
) {
  return useContractWrite<typeof transferWhitelistABI, 'selfDestruct', TMode>({
    abi: transferWhitelistABI,
    functionName: 'selfDestruct',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__.
 */
export function usePrepareTransferWhitelistWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareTransferWhitelistRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareTransferWhitelistSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareTransferWhitelistTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"whitelistAddress"`.
 */
export function usePrepareTransferWhitelistWhitelistAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'whitelistAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'whitelistAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'whitelistAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"removeAddress"`.
 */
export function usePrepareTransferWhitelistRemoveAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'removeAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'removeAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'removeAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"whitelistRegisteredContract"`.
 */
export function usePrepareTransferWhitelistWhitelistRegisteredContract(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'whitelistRegisteredContract'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'whitelistRegisteredContract',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'whitelistRegisteredContract'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setDirectlyWhitelistedAddresses"`.
 */
export function usePrepareTransferWhitelistSetDirectlyWhitelistedAddresses(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'setDirectlyWhitelistedAddresses'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'setDirectlyWhitelistedAddresses',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof transferWhitelistABI,
    'setDirectlyWhitelistedAddresses'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"setWhitelistedContractIdentifiers"`.
 */
export function usePrepareTransferWhitelistSetWhitelistedContractIdentifiers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'setWhitelistedContractIdentifiers'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'setWhitelistedContractIdentifiers',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof transferWhitelistABI,
    'setWhitelistedContractIdentifiers'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link transferWhitelistABI}__ and `functionName` set to `"selfDestruct"`.
 */
export function usePrepareTransferWhitelistSelfDestruct(
  config: Omit<
    UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'selfDestruct'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: transferWhitelistABI,
    functionName: 'selfDestruct',
    ...config,
  } as UsePrepareContractWriteConfig<typeof transferWhitelistABI, 'selfDestruct'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__.
 */
export function useTransferWhitelistEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof transferWhitelistABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: transferWhitelistABI, ...config } as UseContractEventConfig<
    typeof transferWhitelistABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useTransferWhitelistOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof transferWhitelistABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: transferWhitelistABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof transferWhitelistABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useTransferWhitelistRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof transferWhitelistABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: transferWhitelistABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof transferWhitelistABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__ and `eventName` set to `"WhitelistedAddress"`.
 */
export function useTransferWhitelistWhitelistedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedAddress'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: transferWhitelistABI,
    eventName: 'WhitelistedAddress',
    ...config,
  } as UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedAddress'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__ and `eventName` set to `"WhitelistedAddressRemoved"`.
 */
export function useTransferWhitelistWhitelistedAddressRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedAddressRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: transferWhitelistABI,
    eventName: 'WhitelistedAddressRemoved',
    ...config,
  } as UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedAddressRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link transferWhitelistABI}__ and `eventName` set to `"WhitelistedContractIdentifier"`.
 */
export function useTransferWhitelistWhitelistedContractIdentifierEvent(
  config: Omit<
    UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedContractIdentifier'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: transferWhitelistABI,
    eventName: 'WhitelistedContractIdentifier',
    ...config,
  } as UseContractEventConfig<typeof transferWhitelistABI, 'WhitelistedContractIdentifier'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__.
 */
export function useElectionRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: electionABI, ...config } as UseContractReadConfig<
    typeof electionABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"allowedToVoteOverMaxNumberOfGroups"`.
 */
export function useElectionAllowedToVoteOverMaxNumberOfGroups<
  TFunctionName extends 'allowedToVoteOverMaxNumberOfGroups',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'allowedToVoteOverMaxNumberOfGroups',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"cachedVotesByAccount"`.
 */
export function useElectionCachedVotesByAccount<
  TFunctionName extends 'cachedVotesByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'cachedVotesByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useElectionCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"electabilityThreshold"`.
 */
export function useElectionElectabilityThreshold<
  TFunctionName extends 'electabilityThreshold',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'electabilityThreshold',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"electableValidators"`.
 */
export function useElectionElectableValidators<
  TFunctionName extends 'electableValidators',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'electableValidators',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useElectionFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useElectionGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useElectionGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useElectionGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useElectionGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useElectionGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useElectionGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useElectionHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"initialized"`.
 */
export function useElectionInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"isOwner"`.
 */
export function useElectionIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"maxNumGroupsVotedFor"`.
 */
export function useElectionMaxNumGroupsVotedFor<
  TFunctionName extends 'maxNumGroupsVotedFor',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'maxNumGroupsVotedFor',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useElectionMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useElectionMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useElectionNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useElectionNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"owner"`.
 */
export function useElectionOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"registry"`.
 */
export function useElectionRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useElectionValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useElectionValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useElectionGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getElectableValidators"`.
 */
export function useElectionGetElectableValidators<
  TFunctionName extends 'getElectableValidators',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getElectableValidators',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getElectabilityThreshold"`.
 */
export function useElectionGetElectabilityThreshold<
  TFunctionName extends 'getElectabilityThreshold',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getElectabilityThreshold',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"hasActivatablePendingVotes"`.
 */
export function useElectionHasActivatablePendingVotes<
  TFunctionName extends 'hasActivatablePendingVotes',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'hasActivatablePendingVotes',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getTotalVotesByAccount"`.
 */
export function useElectionGetTotalVotesByAccount<
  TFunctionName extends 'getTotalVotesByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getTotalVotesByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getPendingVotesForGroupByAccount"`.
 */
export function useElectionGetPendingVotesForGroupByAccount<
  TFunctionName extends 'getPendingVotesForGroupByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getPendingVotesForGroupByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getActiveVotesForGroupByAccount"`.
 */
export function useElectionGetActiveVotesForGroupByAccount<
  TFunctionName extends 'getActiveVotesForGroupByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getActiveVotesForGroupByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getTotalVotesForGroupByAccount"`.
 */
export function useElectionGetTotalVotesForGroupByAccount<
  TFunctionName extends 'getTotalVotesForGroupByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getTotalVotesForGroupByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getActiveVoteUnitsForGroupByAccount"`.
 */
export function useElectionGetActiveVoteUnitsForGroupByAccount<
  TFunctionName extends 'getActiveVoteUnitsForGroupByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getActiveVoteUnitsForGroupByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getActiveVoteUnitsForGroup"`.
 */
export function useElectionGetActiveVoteUnitsForGroup<
  TFunctionName extends 'getActiveVoteUnitsForGroup',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getActiveVoteUnitsForGroup',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getTotalVotesForGroup"`.
 */
export function useElectionGetTotalVotesForGroup<
  TFunctionName extends 'getTotalVotesForGroup',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getTotalVotesForGroup',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getActiveVotesForGroup"`.
 */
export function useElectionGetActiveVotesForGroup<
  TFunctionName extends 'getActiveVotesForGroup',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getActiveVotesForGroup',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getPendingVotesForGroup"`.
 */
export function useElectionGetPendingVotesForGroup<
  TFunctionName extends 'getPendingVotesForGroup',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getPendingVotesForGroup',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getGroupEligibility"`.
 */
export function useElectionGetGroupEligibility<
  TFunctionName extends 'getGroupEligibility',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getGroupEligibility',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getGroupEpochRewards"`.
 */
export function useElectionGetGroupEpochRewards<
  TFunctionName extends 'getGroupEpochRewards',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getGroupEpochRewards',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getGroupsVotedForByAccount"`.
 */
export function useElectionGetGroupsVotedForByAccount<
  TFunctionName extends 'getGroupsVotedForByAccount',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getGroupsVotedForByAccount',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"canReceiveVotes"`.
 */
export function useElectionCanReceiveVotes<
  TFunctionName extends 'canReceiveVotes',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'canReceiveVotes',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getNumVotesReceivable"`.
 */
export function useElectionGetNumVotesReceivable<
  TFunctionName extends 'getNumVotesReceivable',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getNumVotesReceivable',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getTotalVotes"`.
 */
export function useElectionGetTotalVotes<
  TFunctionName extends 'getTotalVotes',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getTotalVotes',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getActiveVotes"`.
 */
export function useElectionGetActiveVotes<
  TFunctionName extends 'getActiveVotes',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getActiveVotes',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getEligibleValidatorGroups"`.
 */
export function useElectionGetEligibleValidatorGroups<
  TFunctionName extends 'getEligibleValidatorGroups',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getEligibleValidatorGroups',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getTotalVotesForEligibleValidatorGroups"`.
 */
export function useElectionGetTotalVotesForEligibleValidatorGroups<
  TFunctionName extends 'getTotalVotesForEligibleValidatorGroups',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getTotalVotesForEligibleValidatorGroups',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"electValidatorSigners"`.
 */
export function useElectionElectValidatorSigners<
  TFunctionName extends 'electValidatorSigners',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'electValidatorSigners',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"electNValidatorSigners"`.
 */
export function useElectionElectNValidatorSigners<
  TFunctionName extends 'electNValidatorSigners',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'electNValidatorSigners',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"getCurrentValidatorSigners"`.
 */
export function useElectionGetCurrentValidatorSigners<
  TFunctionName extends 'getCurrentValidatorSigners',
  TSelectData = ReadContractResult<typeof electionABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: electionABI,
    functionName: 'getCurrentValidatorSigners',
    ...config,
  } as UseContractReadConfig<typeof electionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__.
 */
export function useElectionWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof electionABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof electionABI, TFunctionName, TMode>({
    abi: electionABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useElectionRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof electionABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'renounceOwnership', TMode>({
    abi: electionABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useElectionSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof electionABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'setRegistry', TMode>({
    abi: electionABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useElectionTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof electionABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'transferOwnership', TMode>({
    abi: electionABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"initialize"`.
 */
export function useElectionInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof electionABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'initialize', TMode>({
    abi: electionABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setElectableValidators"`.
 */
export function useElectionSetElectableValidators<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'setElectableValidators'>['request']['abi'],
        'setElectableValidators',
        TMode
      > & { functionName?: 'setElectableValidators' }
    : UseContractWriteConfig<typeof electionABI, 'setElectableValidators', TMode> & {
        abi?: never
        functionName?: 'setElectableValidators'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'setElectableValidators', TMode>({
    abi: electionABI,
    functionName: 'setElectableValidators',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setMaxNumGroupsVotedFor"`.
 */
export function useElectionSetMaxNumGroupsVotedFor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'setMaxNumGroupsVotedFor'>['request']['abi'],
        'setMaxNumGroupsVotedFor',
        TMode
      > & { functionName?: 'setMaxNumGroupsVotedFor' }
    : UseContractWriteConfig<typeof electionABI, 'setMaxNumGroupsVotedFor', TMode> & {
        abi?: never
        functionName?: 'setMaxNumGroupsVotedFor'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'setMaxNumGroupsVotedFor', TMode>({
    abi: electionABI,
    functionName: 'setMaxNumGroupsVotedFor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setElectabilityThreshold"`.
 */
export function useElectionSetElectabilityThreshold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof electionABI,
          'setElectabilityThreshold'
        >['request']['abi'],
        'setElectabilityThreshold',
        TMode
      > & { functionName?: 'setElectabilityThreshold' }
    : UseContractWriteConfig<typeof electionABI, 'setElectabilityThreshold', TMode> & {
        abi?: never
        functionName?: 'setElectabilityThreshold'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'setElectabilityThreshold', TMode>({
    abi: electionABI,
    functionName: 'setElectabilityThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"vote"`.
 */
export function useElectionVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'vote'>['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof electionABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'vote', TMode>({
    abi: electionABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"activate"`.
 */
export function useElectionActivate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'activate'>['request']['abi'],
        'activate',
        TMode
      > & { functionName?: 'activate' }
    : UseContractWriteConfig<typeof electionABI, 'activate', TMode> & {
        abi?: never
        functionName?: 'activate'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'activate', TMode>({
    abi: electionABI,
    functionName: 'activate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"activateForAccount"`.
 */
export function useElectionActivateForAccount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'activateForAccount'>['request']['abi'],
        'activateForAccount',
        TMode
      > & { functionName?: 'activateForAccount' }
    : UseContractWriteConfig<typeof electionABI, 'activateForAccount', TMode> & {
        abi?: never
        functionName?: 'activateForAccount'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'activateForAccount', TMode>({
    abi: electionABI,
    functionName: 'activateForAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokePending"`.
 */
export function useElectionRevokePending<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'revokePending'>['request']['abi'],
        'revokePending',
        TMode
      > & { functionName?: 'revokePending' }
    : UseContractWriteConfig<typeof electionABI, 'revokePending', TMode> & {
        abi?: never
        functionName?: 'revokePending'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'revokePending', TMode>({
    abi: electionABI,
    functionName: 'revokePending',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokeAllActive"`.
 */
export function useElectionRevokeAllActive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'revokeAllActive'>['request']['abi'],
        'revokeAllActive',
        TMode
      > & { functionName?: 'revokeAllActive' }
    : UseContractWriteConfig<typeof electionABI, 'revokeAllActive', TMode> & {
        abi?: never
        functionName?: 'revokeAllActive'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'revokeAllActive', TMode>({
    abi: electionABI,
    functionName: 'revokeAllActive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokeActive"`.
 */
export function useElectionRevokeActive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'revokeActive'>['request']['abi'],
        'revokeActive',
        TMode
      > & { functionName?: 'revokeActive' }
    : UseContractWriteConfig<typeof electionABI, 'revokeActive', TMode> & {
        abi?: never
        functionName?: 'revokeActive'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'revokeActive', TMode>({
    abi: electionABI,
    functionName: 'revokeActive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"updateTotalVotesByAccountForGroup"`.
 */
export function useElectionUpdateTotalVotesByAccountForGroup<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof electionABI,
          'updateTotalVotesByAccountForGroup'
        >['request']['abi'],
        'updateTotalVotesByAccountForGroup',
        TMode
      > & { functionName?: 'updateTotalVotesByAccountForGroup' }
    : UseContractWriteConfig<typeof electionABI, 'updateTotalVotesByAccountForGroup', TMode> & {
        abi?: never
        functionName?: 'updateTotalVotesByAccountForGroup'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'updateTotalVotesByAccountForGroup', TMode>({
    abi: electionABI,
    functionName: 'updateTotalVotesByAccountForGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"distributeEpochRewards"`.
 */
export function useElectionDistributeEpochRewards<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'distributeEpochRewards'>['request']['abi'],
        'distributeEpochRewards',
        TMode
      > & { functionName?: 'distributeEpochRewards' }
    : UseContractWriteConfig<typeof electionABI, 'distributeEpochRewards', TMode> & {
        abi?: never
        functionName?: 'distributeEpochRewards'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'distributeEpochRewards', TMode>({
    abi: electionABI,
    functionName: 'distributeEpochRewards',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"markGroupIneligible"`.
 */
export function useElectionMarkGroupIneligible<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'markGroupIneligible'>['request']['abi'],
        'markGroupIneligible',
        TMode
      > & { functionName?: 'markGroupIneligible' }
    : UseContractWriteConfig<typeof electionABI, 'markGroupIneligible', TMode> & {
        abi?: never
        functionName?: 'markGroupIneligible'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'markGroupIneligible', TMode>({
    abi: electionABI,
    functionName: 'markGroupIneligible',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"markGroupEligible"`.
 */
export function useElectionMarkGroupEligible<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'markGroupEligible'>['request']['abi'],
        'markGroupEligible',
        TMode
      > & { functionName?: 'markGroupEligible' }
    : UseContractWriteConfig<typeof electionABI, 'markGroupEligible', TMode> & {
        abi?: never
        functionName?: 'markGroupEligible'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'markGroupEligible', TMode>({
    abi: electionABI,
    functionName: 'markGroupEligible',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setAllowedToVoteOverMaxNumberOfGroups"`.
 */
export function useElectionSetAllowedToVoteOverMaxNumberOfGroups<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof electionABI,
          'setAllowedToVoteOverMaxNumberOfGroups'
        >['request']['abi'],
        'setAllowedToVoteOverMaxNumberOfGroups',
        TMode
      > & { functionName?: 'setAllowedToVoteOverMaxNumberOfGroups' }
    : UseContractWriteConfig<typeof electionABI, 'setAllowedToVoteOverMaxNumberOfGroups', TMode> & {
        abi?: never
        functionName?: 'setAllowedToVoteOverMaxNumberOfGroups'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'setAllowedToVoteOverMaxNumberOfGroups', TMode>({
    abi: electionABI,
    functionName: 'setAllowedToVoteOverMaxNumberOfGroups',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"forceDecrementVotes"`.
 */
export function useElectionForceDecrementVotes<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof electionABI, 'forceDecrementVotes'>['request']['abi'],
        'forceDecrementVotes',
        TMode
      > & { functionName?: 'forceDecrementVotes' }
    : UseContractWriteConfig<typeof electionABI, 'forceDecrementVotes', TMode> & {
        abi?: never
        functionName?: 'forceDecrementVotes'
      } = {} as any
) {
  return useContractWrite<typeof electionABI, 'forceDecrementVotes', TMode>({
    abi: electionABI,
    functionName: 'forceDecrementVotes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__.
 */
export function usePrepareElectionWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof electionABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: electionABI, ...config } as UsePrepareContractWriteConfig<
    typeof electionABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareElectionRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareElectionSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareElectionTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareElectionInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setElectableValidators"`.
 */
export function usePrepareElectionSetElectableValidators(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'setElectableValidators'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'setElectableValidators',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'setElectableValidators'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setMaxNumGroupsVotedFor"`.
 */
export function usePrepareElectionSetMaxNumGroupsVotedFor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'setMaxNumGroupsVotedFor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'setMaxNumGroupsVotedFor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'setMaxNumGroupsVotedFor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setElectabilityThreshold"`.
 */
export function usePrepareElectionSetElectabilityThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'setElectabilityThreshold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'setElectabilityThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'setElectabilityThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareElectionVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'vote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"activate"`.
 */
export function usePrepareElectionActivate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'activate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'activate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'activate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"activateForAccount"`.
 */
export function usePrepareElectionActivateForAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'activateForAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'activateForAccount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'activateForAccount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokePending"`.
 */
export function usePrepareElectionRevokePending(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'revokePending'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'revokePending',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'revokePending'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokeAllActive"`.
 */
export function usePrepareElectionRevokeAllActive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'revokeAllActive'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'revokeAllActive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'revokeAllActive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"revokeActive"`.
 */
export function usePrepareElectionRevokeActive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'revokeActive'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'revokeActive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'revokeActive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"updateTotalVotesByAccountForGroup"`.
 */
export function usePrepareElectionUpdateTotalVotesByAccountForGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'updateTotalVotesByAccountForGroup'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'updateTotalVotesByAccountForGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'updateTotalVotesByAccountForGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"distributeEpochRewards"`.
 */
export function usePrepareElectionDistributeEpochRewards(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'distributeEpochRewards'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'distributeEpochRewards',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'distributeEpochRewards'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"markGroupIneligible"`.
 */
export function usePrepareElectionMarkGroupIneligible(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'markGroupIneligible'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'markGroupIneligible',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'markGroupIneligible'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"markGroupEligible"`.
 */
export function usePrepareElectionMarkGroupEligible(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'markGroupEligible'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'markGroupEligible',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'markGroupEligible'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"setAllowedToVoteOverMaxNumberOfGroups"`.
 */
export function usePrepareElectionSetAllowedToVoteOverMaxNumberOfGroups(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'setAllowedToVoteOverMaxNumberOfGroups'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'setAllowedToVoteOverMaxNumberOfGroups',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'setAllowedToVoteOverMaxNumberOfGroups'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link electionABI}__ and `functionName` set to `"forceDecrementVotes"`.
 */
export function usePrepareElectionForceDecrementVotes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof electionABI, 'forceDecrementVotes'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: electionABI,
    functionName: 'forceDecrementVotes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof electionABI, 'forceDecrementVotes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__.
 */
export function useElectionEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof electionABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: electionABI, ...config } as UseContractEventConfig<
    typeof electionABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"AllowedToVoteOverMaxNumberOfGroups"`.
 */
export function useElectionAllowedToVoteOverMaxNumberOfGroupsEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'AllowedToVoteOverMaxNumberOfGroups'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'AllowedToVoteOverMaxNumberOfGroups',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'AllowedToVoteOverMaxNumberOfGroups'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ElectabilityThresholdSet"`.
 */
export function useElectionElectabilityThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ElectabilityThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ElectabilityThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ElectabilityThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ElectableValidatorsSet"`.
 */
export function useElectionElectableValidatorsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ElectableValidatorsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ElectableValidatorsSet',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ElectableValidatorsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"EpochRewardsDistributedToVoters"`.
 */
export function useElectionEpochRewardsDistributedToVotersEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'EpochRewardsDistributedToVoters'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'EpochRewardsDistributedToVoters',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'EpochRewardsDistributedToVoters'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"MaxNumGroupsVotedForSet"`.
 */
export function useElectionMaxNumGroupsVotedForSetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'MaxNumGroupsVotedForSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'MaxNumGroupsVotedForSet',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'MaxNumGroupsVotedForSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useElectionOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useElectionRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupActiveVoteRevoked"`.
 */
export function useElectionValidatorGroupActiveVoteRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupActiveVoteRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupActiveVoteRevoked',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupActiveVoteRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupMarkedEligible"`.
 */
export function useElectionValidatorGroupMarkedEligibleEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupMarkedEligible'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupMarkedEligible',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupMarkedEligible'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupMarkedIneligible"`.
 */
export function useElectionValidatorGroupMarkedIneligibleEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupMarkedIneligible'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupMarkedIneligible',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupMarkedIneligible'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupPendingVoteRevoked"`.
 */
export function useElectionValidatorGroupPendingVoteRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupPendingVoteRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupPendingVoteRevoked',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupPendingVoteRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupVoteActivated"`.
 */
export function useElectionValidatorGroupVoteActivatedEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupVoteActivated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupVoteActivated',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupVoteActivated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link electionABI}__ and `eventName` set to `"ValidatorGroupVoteCast"`.
 */
export function useElectionValidatorGroupVoteCastEvent(
  config: Omit<
    UseContractEventConfig<typeof electionABI, 'ValidatorGroupVoteCast'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: electionABI,
    eventName: 'ValidatorGroupVoteCast',
    ...config,
  } as UseContractEventConfig<typeof electionABI, 'ValidatorGroupVoteCast'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__.
 */
export function useEpochRewardsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: epochRewardsABI, ...config } as UseContractReadConfig<
    typeof epochRewardsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"carbonOffsettingPartner"`.
 */
export function useEpochRewardsCarbonOffsettingPartner<
  TFunctionName extends 'carbonOffsettingPartner',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'carbonOffsettingPartner',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useEpochRewardsCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useEpochRewardsFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useEpochRewardsGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useEpochRewardsGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useEpochRewardsGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useEpochRewardsGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useEpochRewardsGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useEpochRewardsGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useEpochRewardsHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"initialized"`.
 */
export function useEpochRewardsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useEpochRewardsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useEpochRewardsMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useEpochRewardsMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useEpochRewardsNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useEpochRewardsNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"owner"`.
 */
export function useEpochRewardsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"registry"`.
 */
export function useEpochRewardsRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"startTime"`.
 */
export function useEpochRewardsStartTime<
  TFunctionName extends 'startTime',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'startTime',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"targetValidatorEpochPayment"`.
 */
export function useEpochRewardsTargetValidatorEpochPayment<
  TFunctionName extends 'targetValidatorEpochPayment',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'targetValidatorEpochPayment',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useEpochRewardsValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useEpochRewardsValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useEpochRewardsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getTargetVotingYieldParameters"`.
 */
export function useEpochRewardsGetTargetVotingYieldParameters<
  TFunctionName extends 'getTargetVotingYieldParameters',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getTargetVotingYieldParameters',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getRewardsMultiplierParameters"`.
 */
export function useEpochRewardsGetRewardsMultiplierParameters<
  TFunctionName extends 'getRewardsMultiplierParameters',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getRewardsMultiplierParameters',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getCommunityRewardFraction"`.
 */
export function useEpochRewardsGetCommunityRewardFraction<
  TFunctionName extends 'getCommunityRewardFraction',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getCommunityRewardFraction',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getCarbonOffsettingFraction"`.
 */
export function useEpochRewardsGetCarbonOffsettingFraction<
  TFunctionName extends 'getCarbonOffsettingFraction',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getCarbonOffsettingFraction',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getTargetVotingGoldFraction"`.
 */
export function useEpochRewardsGetTargetVotingGoldFraction<
  TFunctionName extends 'getTargetVotingGoldFraction',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getTargetVotingGoldFraction',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getTargetGoldTotalSupply"`.
 */
export function useEpochRewardsGetTargetGoldTotalSupply<
  TFunctionName extends 'getTargetGoldTotalSupply',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getTargetGoldTotalSupply',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getTargetVoterRewards"`.
 */
export function useEpochRewardsGetTargetVoterRewards<
  TFunctionName extends 'getTargetVoterRewards',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getTargetVoterRewards',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getTargetTotalEpochPaymentsInGold"`.
 */
export function useEpochRewardsGetTargetTotalEpochPaymentsInGold<
  TFunctionName extends 'getTargetTotalEpochPaymentsInGold',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getTargetTotalEpochPaymentsInGold',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getRewardsMultiplier"`.
 */
export function useEpochRewardsGetRewardsMultiplier<
  TFunctionName extends 'getRewardsMultiplier',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getRewardsMultiplier',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"getVotingGoldFraction"`.
 */
export function useEpochRewardsGetVotingGoldFraction<
  TFunctionName extends 'getVotingGoldFraction',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'getVotingGoldFraction',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"isReserveLow"`.
 */
export function useEpochRewardsIsReserveLow<
  TFunctionName extends 'isReserveLow',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'isReserveLow',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"calculateTargetEpochRewards"`.
 */
export function useEpochRewardsCalculateTargetEpochRewards<
  TFunctionName extends 'calculateTargetEpochRewards',
  TSelectData = ReadContractResult<typeof epochRewardsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: epochRewardsABI,
    functionName: 'calculateTargetEpochRewards',
    ...config,
  } as UseContractReadConfig<typeof epochRewardsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__.
 */
export function useEpochRewardsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof epochRewardsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, TFunctionName, TMode>({
    abi: epochRewardsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useEpochRewardsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'renounceOwnership', TMode>({
    abi: epochRewardsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useEpochRewardsSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setRegistry', TMode>({
    abi: epochRewardsABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useEpochRewardsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'transferOwnership', TMode>({
    abi: epochRewardsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"initialize"`.
 */
export function useEpochRewardsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof epochRewardsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'initialize', TMode>({
    abi: epochRewardsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setCommunityRewardFraction"`.
 */
export function useEpochRewardsSetCommunityRewardFraction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setCommunityRewardFraction'
        >['request']['abi'],
        'setCommunityRewardFraction',
        TMode
      > & { functionName?: 'setCommunityRewardFraction' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setCommunityRewardFraction', TMode> & {
        abi?: never
        functionName?: 'setCommunityRewardFraction'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setCommunityRewardFraction', TMode>({
    abi: epochRewardsABI,
    functionName: 'setCommunityRewardFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setCarbonOffsettingFund"`.
 */
export function useEpochRewardsSetCarbonOffsettingFund<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setCarbonOffsettingFund'
        >['request']['abi'],
        'setCarbonOffsettingFund',
        TMode
      > & { functionName?: 'setCarbonOffsettingFund' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setCarbonOffsettingFund', TMode> & {
        abi?: never
        functionName?: 'setCarbonOffsettingFund'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setCarbonOffsettingFund', TMode>({
    abi: epochRewardsABI,
    functionName: 'setCarbonOffsettingFund',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingGoldFraction"`.
 */
export function useEpochRewardsSetTargetVotingGoldFraction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setTargetVotingGoldFraction'
        >['request']['abi'],
        'setTargetVotingGoldFraction',
        TMode
      > & { functionName?: 'setTargetVotingGoldFraction' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingGoldFraction', TMode> & {
        abi?: never
        functionName?: 'setTargetVotingGoldFraction'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setTargetVotingGoldFraction', TMode>({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingGoldFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetValidatorEpochPayment"`.
 */
export function useEpochRewardsSetTargetValidatorEpochPayment<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setTargetValidatorEpochPayment'
        >['request']['abi'],
        'setTargetValidatorEpochPayment',
        TMode
      > & { functionName?: 'setTargetValidatorEpochPayment' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setTargetValidatorEpochPayment', TMode> & {
        abi?: never
        functionName?: 'setTargetValidatorEpochPayment'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setTargetValidatorEpochPayment', TMode>({
    abi: epochRewardsABI,
    functionName: 'setTargetValidatorEpochPayment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setRewardsMultiplierParameters"`.
 */
export function useEpochRewardsSetRewardsMultiplierParameters<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setRewardsMultiplierParameters'
        >['request']['abi'],
        'setRewardsMultiplierParameters',
        TMode
      > & { functionName?: 'setRewardsMultiplierParameters' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setRewardsMultiplierParameters', TMode> & {
        abi?: never
        functionName?: 'setRewardsMultiplierParameters'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setRewardsMultiplierParameters', TMode>({
    abi: epochRewardsABI,
    functionName: 'setRewardsMultiplierParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingYieldParameters"`.
 */
export function useEpochRewardsSetTargetVotingYieldParameters<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setTargetVotingYieldParameters'
        >['request']['abi'],
        'setTargetVotingYieldParameters',
        TMode
      > & { functionName?: 'setTargetVotingYieldParameters' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYieldParameters', TMode> & {
        abi?: never
        functionName?: 'setTargetVotingYieldParameters'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setTargetVotingYieldParameters', TMode>({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingYieldParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingYield"`.
 */
export function useEpochRewardsSetTargetVotingYield<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'setTargetVotingYield'
        >['request']['abi'],
        'setTargetVotingYield',
        TMode
      > & { functionName?: 'setTargetVotingYield' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYield', TMode> & {
        abi?: never
        functionName?: 'setTargetVotingYield'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'setTargetVotingYield', TMode>({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingYield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"updateTargetVotingYield"`.
 */
export function useEpochRewardsUpdateTargetVotingYield<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof epochRewardsABI,
          'updateTargetVotingYield'
        >['request']['abi'],
        'updateTargetVotingYield',
        TMode
      > & { functionName?: 'updateTargetVotingYield' }
    : UseContractWriteConfig<typeof epochRewardsABI, 'updateTargetVotingYield', TMode> & {
        abi?: never
        functionName?: 'updateTargetVotingYield'
      } = {} as any
) {
  return useContractWrite<typeof epochRewardsABI, 'updateTargetVotingYield', TMode>({
    abi: epochRewardsABI,
    functionName: 'updateTargetVotingYield',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__.
 */
export function usePrepareEpochRewardsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareEpochRewardsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareEpochRewardsSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareEpochRewardsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareEpochRewardsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setCommunityRewardFraction"`.
 */
export function usePrepareEpochRewardsSetCommunityRewardFraction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setCommunityRewardFraction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setCommunityRewardFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setCommunityRewardFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setCarbonOffsettingFund"`.
 */
export function usePrepareEpochRewardsSetCarbonOffsettingFund(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setCarbonOffsettingFund'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setCarbonOffsettingFund',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setCarbonOffsettingFund'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingGoldFraction"`.
 */
export function usePrepareEpochRewardsSetTargetVotingGoldFraction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingGoldFraction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingGoldFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingGoldFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetValidatorEpochPayment"`.
 */
export function usePrepareEpochRewardsSetTargetValidatorEpochPayment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetValidatorEpochPayment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setTargetValidatorEpochPayment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetValidatorEpochPayment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setRewardsMultiplierParameters"`.
 */
export function usePrepareEpochRewardsSetRewardsMultiplierParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setRewardsMultiplierParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setRewardsMultiplierParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setRewardsMultiplierParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingYieldParameters"`.
 */
export function usePrepareEpochRewardsSetTargetVotingYieldParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYieldParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingYieldParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYieldParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"setTargetVotingYield"`.
 */
export function usePrepareEpochRewardsSetTargetVotingYield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYield'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'setTargetVotingYield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'setTargetVotingYield'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link epochRewardsABI}__ and `functionName` set to `"updateTargetVotingYield"`.
 */
export function usePrepareEpochRewardsUpdateTargetVotingYield(
  config: Omit<
    UsePrepareContractWriteConfig<typeof epochRewardsABI, 'updateTargetVotingYield'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: epochRewardsABI,
    functionName: 'updateTargetVotingYield',
    ...config,
  } as UsePrepareContractWriteConfig<typeof epochRewardsABI, 'updateTargetVotingYield'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__.
 */
export function useEpochRewardsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof epochRewardsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: epochRewardsABI, ...config } as UseContractEventConfig<
    typeof epochRewardsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"CarbonOffsettingFundSet"`.
 */
export function useEpochRewardsCarbonOffsettingFundSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'CarbonOffsettingFundSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'CarbonOffsettingFundSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'CarbonOffsettingFundSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"CommunityRewardFractionSet"`.
 */
export function useEpochRewardsCommunityRewardFractionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'CommunityRewardFractionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'CommunityRewardFractionSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'CommunityRewardFractionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useEpochRewardsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useEpochRewardsRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"RewardsMultiplierParametersSet"`.
 */
export function useEpochRewardsRewardsMultiplierParametersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'RewardsMultiplierParametersSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'RewardsMultiplierParametersSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'RewardsMultiplierParametersSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"TargetValidatorEpochPaymentSet"`.
 */
export function useEpochRewardsTargetValidatorEpochPaymentSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'TargetValidatorEpochPaymentSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'TargetValidatorEpochPaymentSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'TargetValidatorEpochPaymentSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"TargetVotingGoldFractionSet"`.
 */
export function useEpochRewardsTargetVotingGoldFractionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingGoldFractionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'TargetVotingGoldFractionSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingGoldFractionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"TargetVotingYieldParametersSet"`.
 */
export function useEpochRewardsTargetVotingYieldParametersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldParametersSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'TargetVotingYieldParametersSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldParametersSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"TargetVotingYieldSet"`.
 */
export function useEpochRewardsTargetVotingYieldSetEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'TargetVotingYieldSet',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link epochRewardsABI}__ and `eventName` set to `"TargetVotingYieldUpdated"`.
 */
export function useEpochRewardsTargetVotingYieldUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: epochRewardsABI,
    eventName: 'TargetVotingYieldUpdated',
    ...config,
  } as UseContractEventConfig<typeof epochRewardsABI, 'TargetVotingYieldUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__.
 */
export function useGovernanceRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: governanceABI, ...config } as UseContractReadConfig<
    typeof governanceABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"approver"`.
 */
export function useGovernanceApprover<
  TFunctionName extends 'approver',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'approver',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useGovernanceCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"concurrentProposals"`.
 */
export function useGovernanceConcurrentProposals<
  TFunctionName extends 'concurrentProposals',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'concurrentProposals',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"dequeueFrequency"`.
 */
export function useGovernanceDequeueFrequency<
  TFunctionName extends 'dequeueFrequency',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'dequeueFrequency',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"dequeued"`.
 */
export function useGovernanceDequeued<
  TFunctionName extends 'dequeued',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'dequeued',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"emptyIndices"`.
 */
export function useGovernanceEmptyIndices<
  TFunctionName extends 'emptyIndices',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'emptyIndices',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useGovernanceFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useGovernanceGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useGovernanceGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useGovernanceGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useGovernanceGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useGovernanceGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useGovernanceGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useGovernanceHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"hotfixes"`.
 */
export function useGovernanceHotfixes<
  TFunctionName extends 'hotfixes',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'hotfixes',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"initialized"`.
 */
export function useGovernanceInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isOwner"`.
 */
export function useGovernanceIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"lastDequeue"`.
 */
export function useGovernanceLastDequeue<
  TFunctionName extends 'lastDequeue',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'lastDequeue',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"minDeposit"`.
 */
export function useGovernanceMinDeposit<
  TFunctionName extends 'minDeposit',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'minDeposit',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useGovernanceMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useGovernanceMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useGovernanceNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useGovernanceNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"owner"`.
 */
export function useGovernanceOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"proposalCount"`.
 */
export function useGovernanceProposalCount<
  TFunctionName extends 'proposalCount',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'proposalCount',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"queueExpiry"`.
 */
export function useGovernanceQueueExpiry<
  TFunctionName extends 'queueExpiry',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'queueExpiry',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"refundedDeposits"`.
 */
export function useGovernanceRefundedDeposits<
  TFunctionName extends 'refundedDeposits',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'refundedDeposits',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"registry"`.
 */
export function useGovernanceRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"stageDurations"`.
 */
export function useGovernanceStageDurations<
  TFunctionName extends 'stageDurations',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'stageDurations',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useGovernanceValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useGovernanceValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useGovernanceGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getProposalStage"`.
 */
export function useGovernanceGetProposalStage<
  TFunctionName extends 'getProposalStage',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getProposalStage',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isHotfixWhitelistedBy"`.
 */
export function useGovernanceIsHotfixWhitelistedBy<
  TFunctionName extends 'isHotfixWhitelistedBy',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isHotfixWhitelistedBy',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isVoting"`.
 */
export function useGovernanceIsVoting<
  TFunctionName extends 'isVoting',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isVoting',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getReferendumStageDuration"`.
 */
export function useGovernanceGetReferendumStageDuration<
  TFunctionName extends 'getReferendumStageDuration',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getReferendumStageDuration',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getExecutionStageDuration"`.
 */
export function useGovernanceGetExecutionStageDuration<
  TFunctionName extends 'getExecutionStageDuration',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getExecutionStageDuration',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getParticipationParameters"`.
 */
export function useGovernanceGetParticipationParameters<
  TFunctionName extends 'getParticipationParameters',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getParticipationParameters',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"proposalExists"`.
 */
export function useGovernanceProposalExists<
  TFunctionName extends 'proposalExists',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'proposalExists',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getProposal"`.
 */
export function useGovernanceGetProposal<
  TFunctionName extends 'getProposal',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getProposal',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getProposalTransaction"`.
 */
export function useGovernanceGetProposalTransaction<
  TFunctionName extends 'getProposalTransaction',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getProposalTransaction',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isApproved"`.
 */
export function useGovernanceIsApproved<
  TFunctionName extends 'isApproved',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isApproved',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getVoteTotals"`.
 */
export function useGovernanceGetVoteTotals<
  TFunctionName extends 'getVoteTotals',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getVoteTotals',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getVoteRecord"`.
 */
export function useGovernanceGetVoteRecord<
  TFunctionName extends 'getVoteRecord',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getVoteRecord',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getQueueLength"`.
 */
export function useGovernanceGetQueueLength<
  TFunctionName extends 'getQueueLength',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getQueueLength',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getUpvotes"`.
 */
export function useGovernanceGetUpvotes<
  TFunctionName extends 'getUpvotes',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getUpvotes',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getQueue"`.
 */
export function useGovernanceGetQueue<
  TFunctionName extends 'getQueue',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getQueue',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getDequeue"`.
 */
export function useGovernanceGetDequeue<
  TFunctionName extends 'getDequeue',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getDequeue',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getUpvoteRecord"`.
 */
export function useGovernanceGetUpvoteRecord<
  TFunctionName extends 'getUpvoteRecord',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getUpvoteRecord',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getMostRecentReferendumProposal"`.
 */
export function useGovernanceGetMostRecentReferendumProposal<
  TFunctionName extends 'getMostRecentReferendumProposal',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getMostRecentReferendumProposal',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"hotfixWhitelistValidatorTally"`.
 */
export function useGovernanceHotfixWhitelistValidatorTally<
  TFunctionName extends 'hotfixWhitelistValidatorTally',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'hotfixWhitelistValidatorTally',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isHotfixPassing"`.
 */
export function useGovernanceIsHotfixPassing<
  TFunctionName extends 'isHotfixPassing',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isHotfixPassing',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getHotfixRecord"`.
 */
export function useGovernanceGetHotfixRecord<
  TFunctionName extends 'getHotfixRecord',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getHotfixRecord',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isQueued"`.
 */
export function useGovernanceIsQueued<
  TFunctionName extends 'isQueued',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isQueued',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isProposalPassing"`.
 */
export function useGovernanceIsProposalPassing<
  TFunctionName extends 'isProposalPassing',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isProposalPassing',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isDequeuedProposal"`.
 */
export function useGovernanceIsDequeuedProposal<
  TFunctionName extends 'isDequeuedProposal',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isDequeuedProposal',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isDequeuedProposalExpired"`.
 */
export function useGovernanceIsDequeuedProposalExpired<
  TFunctionName extends 'isDequeuedProposalExpired',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isDequeuedProposalExpired',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"isQueuedProposalExpired"`.
 */
export function useGovernanceIsQueuedProposalExpired<
  TFunctionName extends 'isQueuedProposalExpired',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'isQueuedProposalExpired',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getConstitution"`.
 */
export function useGovernanceGetConstitution<
  TFunctionName extends 'getConstitution',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getConstitution',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"getAmountOfGoldUsedForVoting"`.
 */
export function useGovernanceGetAmountOfGoldUsedForVoting<
  TFunctionName extends 'getAmountOfGoldUsedForVoting',
  TSelectData = ReadContractResult<typeof governanceABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceABI,
    functionName: 'getAmountOfGoldUsedForVoting',
    ...config,
  } as UseContractReadConfig<typeof governanceABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__.
 */
export function useGovernanceWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governanceABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, TFunctionName, TMode>({
    abi: governanceABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGovernanceRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof governanceABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'renounceOwnership', TMode>({
    abi: governanceABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useGovernanceSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof governanceABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setRegistry', TMode>({
    abi: governanceABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGovernanceTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof governanceABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'transferOwnership', TMode>({
    abi: governanceABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"initialize"`.
 */
export function useGovernanceInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof governanceABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'initialize', TMode>({
    abi: governanceABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setApprover"`.
 */
export function useGovernanceSetApprover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setApprover'>['request']['abi'],
        'setApprover',
        TMode
      > & { functionName?: 'setApprover' }
    : UseContractWriteConfig<typeof governanceABI, 'setApprover', TMode> & {
        abi?: never
        functionName?: 'setApprover'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setApprover', TMode>({
    abi: governanceABI,
    functionName: 'setApprover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setConcurrentProposals"`.
 */
export function useGovernanceSetConcurrentProposals<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setConcurrentProposals'
        >['request']['abi'],
        'setConcurrentProposals',
        TMode
      > & { functionName?: 'setConcurrentProposals' }
    : UseContractWriteConfig<typeof governanceABI, 'setConcurrentProposals', TMode> & {
        abi?: never
        functionName?: 'setConcurrentProposals'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setConcurrentProposals', TMode>({
    abi: governanceABI,
    functionName: 'setConcurrentProposals',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setMinDeposit"`.
 */
export function useGovernanceSetMinDeposit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setMinDeposit'>['request']['abi'],
        'setMinDeposit',
        TMode
      > & { functionName?: 'setMinDeposit' }
    : UseContractWriteConfig<typeof governanceABI, 'setMinDeposit', TMode> & {
        abi?: never
        functionName?: 'setMinDeposit'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setMinDeposit', TMode>({
    abi: governanceABI,
    functionName: 'setMinDeposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setQueueExpiry"`.
 */
export function useGovernanceSetQueueExpiry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setQueueExpiry'>['request']['abi'],
        'setQueueExpiry',
        TMode
      > & { functionName?: 'setQueueExpiry' }
    : UseContractWriteConfig<typeof governanceABI, 'setQueueExpiry', TMode> & {
        abi?: never
        functionName?: 'setQueueExpiry'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setQueueExpiry', TMode>({
    abi: governanceABI,
    functionName: 'setQueueExpiry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setDequeueFrequency"`.
 */
export function useGovernanceSetDequeueFrequency<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setDequeueFrequency'>['request']['abi'],
        'setDequeueFrequency',
        TMode
      > & { functionName?: 'setDequeueFrequency' }
    : UseContractWriteConfig<typeof governanceABI, 'setDequeueFrequency', TMode> & {
        abi?: never
        functionName?: 'setDequeueFrequency'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setDequeueFrequency', TMode>({
    abi: governanceABI,
    functionName: 'setDequeueFrequency',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setReferendumStageDuration"`.
 */
export function useGovernanceSetReferendumStageDuration<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setReferendumStageDuration'
        >['request']['abi'],
        'setReferendumStageDuration',
        TMode
      > & { functionName?: 'setReferendumStageDuration' }
    : UseContractWriteConfig<typeof governanceABI, 'setReferendumStageDuration', TMode> & {
        abi?: never
        functionName?: 'setReferendumStageDuration'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setReferendumStageDuration', TMode>({
    abi: governanceABI,
    functionName: 'setReferendumStageDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setExecutionStageDuration"`.
 */
export function useGovernanceSetExecutionStageDuration<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setExecutionStageDuration'
        >['request']['abi'],
        'setExecutionStageDuration',
        TMode
      > & { functionName?: 'setExecutionStageDuration' }
    : UseContractWriteConfig<typeof governanceABI, 'setExecutionStageDuration', TMode> & {
        abi?: never
        functionName?: 'setExecutionStageDuration'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setExecutionStageDuration', TMode>({
    abi: governanceABI,
    functionName: 'setExecutionStageDuration',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setParticipationBaseline"`.
 */
export function useGovernanceSetParticipationBaseline<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setParticipationBaseline'
        >['request']['abi'],
        'setParticipationBaseline',
        TMode
      > & { functionName?: 'setParticipationBaseline' }
    : UseContractWriteConfig<typeof governanceABI, 'setParticipationBaseline', TMode> & {
        abi?: never
        functionName?: 'setParticipationBaseline'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setParticipationBaseline', TMode>({
    abi: governanceABI,
    functionName: 'setParticipationBaseline',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setParticipationFloor"`.
 */
export function useGovernanceSetParticipationFloor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setParticipationFloor'>['request']['abi'],
        'setParticipationFloor',
        TMode
      > & { functionName?: 'setParticipationFloor' }
    : UseContractWriteConfig<typeof governanceABI, 'setParticipationFloor', TMode> & {
        abi?: never
        functionName?: 'setParticipationFloor'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setParticipationFloor', TMode>({
    abi: governanceABI,
    functionName: 'setParticipationFloor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setBaselineUpdateFactor"`.
 */
export function useGovernanceSetBaselineUpdateFactor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setBaselineUpdateFactor'
        >['request']['abi'],
        'setBaselineUpdateFactor',
        TMode
      > & { functionName?: 'setBaselineUpdateFactor' }
    : UseContractWriteConfig<typeof governanceABI, 'setBaselineUpdateFactor', TMode> & {
        abi?: never
        functionName?: 'setBaselineUpdateFactor'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setBaselineUpdateFactor', TMode>({
    abi: governanceABI,
    functionName: 'setBaselineUpdateFactor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setBaselineQuorumFactor"`.
 */
export function useGovernanceSetBaselineQuorumFactor<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'setBaselineQuorumFactor'
        >['request']['abi'],
        'setBaselineQuorumFactor',
        TMode
      > & { functionName?: 'setBaselineQuorumFactor' }
    : UseContractWriteConfig<typeof governanceABI, 'setBaselineQuorumFactor', TMode> & {
        abi?: never
        functionName?: 'setBaselineQuorumFactor'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setBaselineQuorumFactor', TMode>({
    abi: governanceABI,
    functionName: 'setBaselineQuorumFactor',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setConstitution"`.
 */
export function useGovernanceSetConstitution<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'setConstitution'>['request']['abi'],
        'setConstitution',
        TMode
      > & { functionName?: 'setConstitution' }
    : UseContractWriteConfig<typeof governanceABI, 'setConstitution', TMode> & {
        abi?: never
        functionName?: 'setConstitution'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'setConstitution', TMode>({
    abi: governanceABI,
    functionName: 'setConstitution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"propose"`.
 */
export function useGovernancePropose<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'propose'>['request']['abi'],
        'propose',
        TMode
      > & { functionName?: 'propose' }
    : UseContractWriteConfig<typeof governanceABI, 'propose', TMode> & {
        abi?: never
        functionName?: 'propose'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'propose', TMode>({
    abi: governanceABI,
    functionName: 'propose',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"upvote"`.
 */
export function useGovernanceUpvote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'upvote'>['request']['abi'],
        'upvote',
        TMode
      > & { functionName?: 'upvote' }
    : UseContractWriteConfig<typeof governanceABI, 'upvote', TMode> & {
        abi?: never
        functionName?: 'upvote'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'upvote', TMode>({
    abi: governanceABI,
    functionName: 'upvote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"revokeUpvote"`.
 */
export function useGovernanceRevokeUpvote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'revokeUpvote'>['request']['abi'],
        'revokeUpvote',
        TMode
      > & { functionName?: 'revokeUpvote' }
    : UseContractWriteConfig<typeof governanceABI, 'revokeUpvote', TMode> & {
        abi?: never
        functionName?: 'revokeUpvote'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'revokeUpvote', TMode>({
    abi: governanceABI,
    functionName: 'revokeUpvote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"approve"`.
 */
export function useGovernanceApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof governanceABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'approve', TMode>({
    abi: governanceABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"vote"`.
 */
export function useGovernanceVote<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'vote'>['request']['abi'],
        'vote',
        TMode
      > & { functionName?: 'vote' }
    : UseContractWriteConfig<typeof governanceABI, 'vote', TMode> & {
        abi?: never
        functionName?: 'vote'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'vote', TMode>({
    abi: governanceABI,
    functionName: 'vote',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"votePartially"`.
 */
export function useGovernanceVotePartially<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'votePartially'>['request']['abi'],
        'votePartially',
        TMode
      > & { functionName?: 'votePartially' }
    : UseContractWriteConfig<typeof governanceABI, 'votePartially', TMode> & {
        abi?: never
        functionName?: 'votePartially'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'votePartially', TMode>({
    abi: governanceABI,
    functionName: 'votePartially',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"revokeVotes"`.
 */
export function useGovernanceRevokeVotes<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'revokeVotes'>['request']['abi'],
        'revokeVotes',
        TMode
      > & { functionName?: 'revokeVotes' }
    : UseContractWriteConfig<typeof governanceABI, 'revokeVotes', TMode> & {
        abi?: never
        functionName?: 'revokeVotes'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'revokeVotes', TMode>({
    abi: governanceABI,
    functionName: 'revokeVotes',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"execute"`.
 */
export function useGovernanceExecute<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'execute'>['request']['abi'],
        'execute',
        TMode
      > & { functionName?: 'execute' }
    : UseContractWriteConfig<typeof governanceABI, 'execute', TMode> & {
        abi?: never
        functionName?: 'execute'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'execute', TMode>({
    abi: governanceABI,
    functionName: 'execute',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"approveHotfix"`.
 */
export function useGovernanceApproveHotfix<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'approveHotfix'>['request']['abi'],
        'approveHotfix',
        TMode
      > & { functionName?: 'approveHotfix' }
    : UseContractWriteConfig<typeof governanceABI, 'approveHotfix', TMode> & {
        abi?: never
        functionName?: 'approveHotfix'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'approveHotfix', TMode>({
    abi: governanceABI,
    functionName: 'approveHotfix',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"whitelistHotfix"`.
 */
export function useGovernanceWhitelistHotfix<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'whitelistHotfix'>['request']['abi'],
        'whitelistHotfix',
        TMode
      > & { functionName?: 'whitelistHotfix' }
    : UseContractWriteConfig<typeof governanceABI, 'whitelistHotfix', TMode> & {
        abi?: never
        functionName?: 'whitelistHotfix'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'whitelistHotfix', TMode>({
    abi: governanceABI,
    functionName: 'whitelistHotfix',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"prepareHotfix"`.
 */
export function useGovernancePrepareHotfix<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'prepareHotfix'>['request']['abi'],
        'prepareHotfix',
        TMode
      > & { functionName?: 'prepareHotfix' }
    : UseContractWriteConfig<typeof governanceABI, 'prepareHotfix', TMode> & {
        abi?: never
        functionName?: 'prepareHotfix'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'prepareHotfix', TMode>({
    abi: governanceABI,
    functionName: 'prepareHotfix',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"executeHotfix"`.
 */
export function useGovernanceExecuteHotfix<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'executeHotfix'>['request']['abi'],
        'executeHotfix',
        TMode
      > & { functionName?: 'executeHotfix' }
    : UseContractWriteConfig<typeof governanceABI, 'executeHotfix', TMode> & {
        abi?: never
        functionName?: 'executeHotfix'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'executeHotfix', TMode>({
    abi: governanceABI,
    functionName: 'executeHotfix',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"withdraw"`.
 */
export function useGovernanceWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof governanceABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'withdraw', TMode>({
    abi: governanceABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"dequeueProposalsIfReady"`.
 */
export function useGovernanceDequeueProposalsIfReady<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceABI,
          'dequeueProposalsIfReady'
        >['request']['abi'],
        'dequeueProposalsIfReady',
        TMode
      > & { functionName?: 'dequeueProposalsIfReady' }
    : UseContractWriteConfig<typeof governanceABI, 'dequeueProposalsIfReady', TMode> & {
        abi?: never
        functionName?: 'dequeueProposalsIfReady'
      } = {} as any
) {
  return useContractWrite<typeof governanceABI, 'dequeueProposalsIfReady', TMode>({
    abi: governanceABI,
    functionName: 'dequeueProposalsIfReady',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__.
 */
export function usePrepareGovernanceWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: governanceABI, ...config } as UsePrepareContractWriteConfig<
    typeof governanceABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGovernanceRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareGovernanceSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGovernanceTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGovernanceInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setApprover"`.
 */
export function usePrepareGovernanceSetApprover(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setApprover'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setApprover',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setApprover'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setConcurrentProposals"`.
 */
export function usePrepareGovernanceSetConcurrentProposals(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setConcurrentProposals'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setConcurrentProposals',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setConcurrentProposals'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setMinDeposit"`.
 */
export function usePrepareGovernanceSetMinDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setMinDeposit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setMinDeposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setMinDeposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setQueueExpiry"`.
 */
export function usePrepareGovernanceSetQueueExpiry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setQueueExpiry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setQueueExpiry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setQueueExpiry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setDequeueFrequency"`.
 */
export function usePrepareGovernanceSetDequeueFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setDequeueFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setDequeueFrequency',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setDequeueFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setReferendumStageDuration"`.
 */
export function usePrepareGovernanceSetReferendumStageDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setReferendumStageDuration'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setReferendumStageDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setReferendumStageDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setExecutionStageDuration"`.
 */
export function usePrepareGovernanceSetExecutionStageDuration(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setExecutionStageDuration'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setExecutionStageDuration',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setExecutionStageDuration'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setParticipationBaseline"`.
 */
export function usePrepareGovernanceSetParticipationBaseline(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setParticipationBaseline'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setParticipationBaseline',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setParticipationBaseline'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setParticipationFloor"`.
 */
export function usePrepareGovernanceSetParticipationFloor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setParticipationFloor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setParticipationFloor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setParticipationFloor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setBaselineUpdateFactor"`.
 */
export function usePrepareGovernanceSetBaselineUpdateFactor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setBaselineUpdateFactor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setBaselineUpdateFactor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setBaselineUpdateFactor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setBaselineQuorumFactor"`.
 */
export function usePrepareGovernanceSetBaselineQuorumFactor(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setBaselineQuorumFactor'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setBaselineQuorumFactor',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setBaselineQuorumFactor'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"setConstitution"`.
 */
export function usePrepareGovernanceSetConstitution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'setConstitution'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'setConstitution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'setConstitution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"propose"`.
 */
export function usePrepareGovernancePropose(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'propose'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'propose',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'propose'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"upvote"`.
 */
export function usePrepareGovernanceUpvote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'upvote'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'upvote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'upvote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"revokeUpvote"`.
 */
export function usePrepareGovernanceRevokeUpvote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'revokeUpvote'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'revokeUpvote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'revokeUpvote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareGovernanceApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"vote"`.
 */
export function usePrepareGovernanceVote(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'vote'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'vote',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'vote'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"votePartially"`.
 */
export function usePrepareGovernanceVotePartially(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'votePartially'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'votePartially',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'votePartially'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"revokeVotes"`.
 */
export function usePrepareGovernanceRevokeVotes(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'revokeVotes'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'revokeVotes',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'revokeVotes'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"execute"`.
 */
export function usePrepareGovernanceExecute(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'execute'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'execute',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'execute'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"approveHotfix"`.
 */
export function usePrepareGovernanceApproveHotfix(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'approveHotfix'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'approveHotfix',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'approveHotfix'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"whitelistHotfix"`.
 */
export function usePrepareGovernanceWhitelistHotfix(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'whitelistHotfix'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'whitelistHotfix',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'whitelistHotfix'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"prepareHotfix"`.
 */
export function usePrepareGovernancePrepareHotfix(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'prepareHotfix'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'prepareHotfix',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'prepareHotfix'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"executeHotfix"`.
 */
export function usePrepareGovernanceExecuteHotfix(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'executeHotfix'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'executeHotfix',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'executeHotfix'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareGovernanceWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceABI}__ and `functionName` set to `"dequeueProposalsIfReady"`.
 */
export function usePrepareGovernanceDequeueProposalsIfReady(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceABI, 'dequeueProposalsIfReady'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceABI,
    functionName: 'dequeueProposalsIfReady',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceABI, 'dequeueProposalsIfReady'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__.
 */
export function useGovernanceEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof governanceABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: governanceABI, ...config } as UseContractEventConfig<
    typeof governanceABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ApproverSet"`.
 */
export function useGovernanceApproverSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ApproverSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ApproverSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ApproverSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ConcurrentProposalsSet"`.
 */
export function useGovernanceConcurrentProposalsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ConcurrentProposalsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ConcurrentProposalsSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ConcurrentProposalsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ConstitutionSet"`.
 */
export function useGovernanceConstitutionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ConstitutionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ConstitutionSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ConstitutionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"DequeueFrequencySet"`.
 */
export function useGovernanceDequeueFrequencySetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'DequeueFrequencySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'DequeueFrequencySet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'DequeueFrequencySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ExecutionStageDurationSet"`.
 */
export function useGovernanceExecutionStageDurationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ExecutionStageDurationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ExecutionStageDurationSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ExecutionStageDurationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"HotfixApproved"`.
 */
export function useGovernanceHotfixApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'HotfixApproved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'HotfixApproved',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'HotfixApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"HotfixExecuted"`.
 */
export function useGovernanceHotfixExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'HotfixExecuted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'HotfixExecuted',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'HotfixExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"HotfixPrepared"`.
 */
export function useGovernanceHotfixPreparedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'HotfixPrepared'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'HotfixPrepared',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'HotfixPrepared'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"HotfixWhitelisted"`.
 */
export function useGovernanceHotfixWhitelistedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'HotfixWhitelisted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'HotfixWhitelisted',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'HotfixWhitelisted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"MinDepositSet"`.
 */
export function useGovernanceMinDepositSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'MinDepositSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'MinDepositSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'MinDepositSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGovernanceOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ParticipationBaselineQuorumFactorSet"`.
 */
export function useGovernanceParticipationBaselineQuorumFactorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineQuorumFactorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ParticipationBaselineQuorumFactorSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineQuorumFactorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ParticipationBaselineUpdateFactorSet"`.
 */
export function useGovernanceParticipationBaselineUpdateFactorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineUpdateFactorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ParticipationBaselineUpdateFactorSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineUpdateFactorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ParticipationBaselineUpdated"`.
 */
export function useGovernanceParticipationBaselineUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ParticipationBaselineUpdated',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ParticipationBaselineUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ParticipationFloorSet"`.
 */
export function useGovernanceParticipationFloorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ParticipationFloorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ParticipationFloorSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ParticipationFloorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalApproved"`.
 */
export function useGovernanceProposalApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalApproved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalApproved',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalDequeued"`.
 */
export function useGovernanceProposalDequeuedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalDequeued'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalDequeued',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalDequeued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalExecuted"`.
 */
export function useGovernanceProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalExpired"`.
 */
export function useGovernanceProposalExpiredEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalExpired'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalExpired',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalExpired'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalQueued"`.
 */
export function useGovernanceProposalQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalQueued'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalQueued',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalQueued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalUpvoteRevoked"`.
 */
export function useGovernanceProposalUpvoteRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalUpvoteRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalUpvoteRevoked',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalUpvoteRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalUpvoted"`.
 */
export function useGovernanceProposalUpvotedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalUpvoted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalUpvoted',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalUpvoted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalVoteRevoked"`.
 */
export function useGovernanceProposalVoteRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalVoteRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalVoteRevoked',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalVoteRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalVoteRevokedV2"`.
 */
export function useGovernanceProposalVoteRevokedV2Event(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalVoteRevokedV2'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalVoteRevokedV2',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalVoteRevokedV2'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalVoted"`.
 */
export function useGovernanceProposalVotedEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalVoted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalVoted',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalVoted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ProposalVotedV2"`.
 */
export function useGovernanceProposalVotedV2Event(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ProposalVotedV2'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ProposalVotedV2',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ProposalVotedV2'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"QueueExpirySet"`.
 */
export function useGovernanceQueueExpirySetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'QueueExpirySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'QueueExpirySet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'QueueExpirySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"ReferendumStageDurationSet"`.
 */
export function useGovernanceReferendumStageDurationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'ReferendumStageDurationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'ReferendumStageDurationSet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'ReferendumStageDurationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useGovernanceRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof governanceABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__.
 */
export function useGovernanceApproverMultiSigRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: governanceApproverMultiSigABI, ...config } as UseContractReadConfig<
    typeof governanceApproverMultiSigABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"MAX_OWNER_COUNT"`.
 */
export function useGovernanceApproverMultiSigMaxOwnerCount<
  TFunctionName extends 'MAX_OWNER_COUNT',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'MAX_OWNER_COUNT',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"confirmations"`.
 */
export function useGovernanceApproverMultiSigConfirmations<
  TFunctionName extends 'confirmations',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'confirmations',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"getConfirmationCount"`.
 */
export function useGovernanceApproverMultiSigGetConfirmationCount<
  TFunctionName extends 'getConfirmationCount',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'getConfirmationCount',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"getConfirmations"`.
 */
export function useGovernanceApproverMultiSigGetConfirmations<
  TFunctionName extends 'getConfirmations',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'getConfirmations',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"getOwners"`.
 */
export function useGovernanceApproverMultiSigGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"getTransactionCount"`.
 */
export function useGovernanceApproverMultiSigGetTransactionCount<
  TFunctionName extends 'getTransactionCount',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'getTransactionCount',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"getTransactionIds"`.
 */
export function useGovernanceApproverMultiSigGetTransactionIds<
  TFunctionName extends 'getTransactionIds',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'getTransactionIds',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"initialized"`.
 */
export function useGovernanceApproverMultiSigInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"internalRequired"`.
 */
export function useGovernanceApproverMultiSigInternalRequired<
  TFunctionName extends 'internalRequired',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'internalRequired',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"isConfirmed"`.
 */
export function useGovernanceApproverMultiSigIsConfirmed<
  TFunctionName extends 'isConfirmed',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'isConfirmed',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"isOwner"`.
 */
export function useGovernanceApproverMultiSigIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"owners"`.
 */
export function useGovernanceApproverMultiSigOwners<
  TFunctionName extends 'owners',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"required"`.
 */
export function useGovernanceApproverMultiSigRequired<
  TFunctionName extends 'required',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'required',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"transactionCount"`.
 */
export function useGovernanceApproverMultiSigTransactionCount<
  TFunctionName extends 'transactionCount',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'transactionCount',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"transactions"`.
 */
export function useGovernanceApproverMultiSigTransactions<
  TFunctionName extends 'transactions',
  TSelectData = ReadContractResult<typeof governanceApproverMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: governanceApproverMultiSigABI,
    functionName: 'transactions',
    ...config,
  } as UseContractReadConfig<typeof governanceApproverMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__.
 */
export function useGovernanceApproverMultiSigWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof governanceApproverMultiSigABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, TFunctionName, TMode>({
    abi: governanceApproverMultiSigABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function useGovernanceApproverMultiSigAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'addOwner'
        >['request']['abi'],
        'addOwner',
        TMode
      > & { functionName?: 'addOwner' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'addOwner', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'addOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function useGovernanceApproverMultiSigChangeInternalRequirement<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'changeInternalRequirement'
        >['request']['abi'],
        'changeInternalRequirement',
        TMode
      > & { functionName?: 'changeInternalRequirement' }
    : UseContractWriteConfig<
        typeof governanceApproverMultiSigABI,
        'changeInternalRequirement',
        TMode
      > & {
        abi?: never
        functionName?: 'changeInternalRequirement'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'changeInternalRequirement', TMode>(
    {
      abi: governanceApproverMultiSigABI,
      functionName: 'changeInternalRequirement',
      ...config,
    } as any
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function useGovernanceApproverMultiSigChangeRequirement<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'changeRequirement'
        >['request']['abi'],
        'changeRequirement',
        TMode
      > & { functionName?: 'changeRequirement' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'changeRequirement', TMode> & {
        abi?: never
        functionName?: 'changeRequirement'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'changeRequirement', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function useGovernanceApproverMultiSigConfirmTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'confirmTransaction'
        >['request']['abi'],
        'confirmTransaction',
        TMode
      > & { functionName?: 'confirmTransaction' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'confirmTransaction', TMode> & {
        abi?: never
        functionName?: 'confirmTransaction'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'confirmTransaction', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useGovernanceApproverMultiSigExecuteTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'executeTransaction'
        >['request']['abi'],
        'executeTransaction',
        TMode
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'executeTransaction', TMode> & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'executeTransaction', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function useGovernanceApproverMultiSigInitialize<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'initialize', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useGovernanceApproverMultiSigRemoveOwner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'removeOwner', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function useGovernanceApproverMultiSigReplaceOwner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'replaceOwner'
        >['request']['abi'],
        'replaceOwner',
        TMode
      > & { functionName?: 'replaceOwner' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'replaceOwner', TMode> & {
        abi?: never
        functionName?: 'replaceOwner'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'replaceOwner', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function useGovernanceApproverMultiSigRevokeConfirmation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'revokeConfirmation'
        >['request']['abi'],
        'revokeConfirmation',
        TMode
      > & { functionName?: 'revokeConfirmation' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'revokeConfirmation', TMode> & {
        abi?: never
        functionName?: 'revokeConfirmation'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'revokeConfirmation', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function useGovernanceApproverMultiSigSubmitTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof governanceApproverMultiSigABI,
          'submitTransaction'
        >['request']['abi'],
        'submitTransaction',
        TMode
      > & { functionName?: 'submitTransaction' }
    : UseContractWriteConfig<typeof governanceApproverMultiSigABI, 'submitTransaction', TMode> & {
        abi?: never
        functionName?: 'submitTransaction'
      } = {} as any
) {
  return useContractWrite<typeof governanceApproverMultiSigABI, 'submitTransaction', TMode>({
    abi: governanceApproverMultiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__.
 */
export function usePrepareGovernanceApproverMultiSigWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareGovernanceApproverMultiSigAddOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'addOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'addOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'addOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function usePrepareGovernanceApproverMultiSigChangeInternalRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof governanceApproverMultiSigABI,
      'changeInternalRequirement'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'changeInternalRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof governanceApproverMultiSigABI,
    'changeInternalRequirement'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function usePrepareGovernanceApproverMultiSigChangeRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'changeRequirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'changeRequirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function usePrepareGovernanceApproverMultiSigConfirmTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'confirmTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'confirmTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareGovernanceApproverMultiSigExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'executeTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'executeTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGovernanceApproverMultiSigInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareGovernanceApproverMultiSigRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function usePrepareGovernanceApproverMultiSigReplaceOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'replaceOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'replaceOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function usePrepareGovernanceApproverMultiSigRevokeConfirmation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'revokeConfirmation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'revokeConfirmation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function usePrepareGovernanceApproverMultiSigSubmitTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'submitTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: governanceApproverMultiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof governanceApproverMultiSigABI, 'submitTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__.
 */
export function useGovernanceApproverMultiSigEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"Confirmation"`.
 */
export function useGovernanceApproverMultiSigConfirmationEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Confirmation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'Confirmation',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Confirmation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"Deposit"`.
 */
export function useGovernanceApproverMultiSigDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"Execution"`.
 */
export function useGovernanceApproverMultiSigExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Execution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'Execution',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Execution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"InternalRequirementChange"`.
 */
export function useGovernanceApproverMultiSigInternalRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'InternalRequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'InternalRequirementChange',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'InternalRequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"OwnerAddition"`.
 */
export function useGovernanceApproverMultiSigOwnerAdditionEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'OwnerAddition'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'OwnerAddition',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'OwnerAddition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"OwnerRemoval"`.
 */
export function useGovernanceApproverMultiSigOwnerRemovalEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'OwnerRemoval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'OwnerRemoval',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'OwnerRemoval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"RequirementChange"`.
 */
export function useGovernanceApproverMultiSigRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'RequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'RequirementChange',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'RequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"Revocation"`.
 */
export function useGovernanceApproverMultiSigRevocationEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Revocation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'Revocation',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Revocation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link governanceApproverMultiSigABI}__ and `eventName` set to `"Submission"`.
 */
export function useGovernanceApproverMultiSigSubmissionEvent(
  config: Omit<
    UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Submission'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: governanceApproverMultiSigABI,
    eventName: 'Submission',
    ...config,
  } as UseContractEventConfig<typeof governanceApproverMultiSigABI, 'Submission'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__.
 */
export function useBlockchainParametersRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: blockchainParametersABI, ...config } as UseContractReadConfig<
    typeof blockchainParametersABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"blockGasLimit"`.
 */
export function useBlockchainParametersBlockGasLimit<
  TFunctionName extends 'blockGasLimit',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'blockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useBlockchainParametersCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useBlockchainParametersFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useBlockchainParametersGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useBlockchainParametersGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useBlockchainParametersGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useBlockchainParametersGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useBlockchainParametersGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useBlockchainParametersGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useBlockchainParametersHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"initialized"`.
 */
export function useBlockchainParametersInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"intrinsicGasForAlternativeFeeCurrency"`.
 */
export function useBlockchainParametersIntrinsicGasForAlternativeFeeCurrency<
  TFunctionName extends 'intrinsicGasForAlternativeFeeCurrency',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'intrinsicGasForAlternativeFeeCurrency',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"isOwner"`.
 */
export function useBlockchainParametersIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useBlockchainParametersMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useBlockchainParametersMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useBlockchainParametersNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useBlockchainParametersNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"owner"`.
 */
export function useBlockchainParametersOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"uptimeLookbackWindow"`.
 */
export function useBlockchainParametersUptimeLookbackWindow<
  TFunctionName extends 'uptimeLookbackWindow',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'uptimeLookbackWindow',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useBlockchainParametersValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useBlockchainParametersValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useBlockchainParametersGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getUptimeLookbackWindow"`.
 */
export function useBlockchainParametersGetUptimeLookbackWindow<
  TFunctionName extends 'getUptimeLookbackWindow',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getUptimeLookbackWindow',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"getMinimumClientVersion"`.
 */
export function useBlockchainParametersGetMinimumClientVersion<
  TFunctionName extends 'getMinimumClientVersion',
  TSelectData = ReadContractResult<typeof blockchainParametersABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: blockchainParametersABI,
    functionName: 'getMinimumClientVersion',
    ...config,
  } as UseContractReadConfig<typeof blockchainParametersABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__.
 */
export function useBlockchainParametersWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blockchainParametersABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof blockchainParametersABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, TFunctionName, TMode>({
    abi: blockchainParametersABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useBlockchainParametersRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'renounceOwnership', TMode>({
    abi: blockchainParametersABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useBlockchainParametersTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'transferOwnership', TMode>({
    abi: blockchainParametersABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"initialize"`.
 */
export function useBlockchainParametersInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof blockchainParametersABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'initialize', TMode>({
    abi: blockchainParametersABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setMinimumClientVersion"`.
 */
export function useBlockchainParametersSetMinimumClientVersion<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'setMinimumClientVersion'
        >['request']['abi'],
        'setMinimumClientVersion',
        TMode
      > & { functionName?: 'setMinimumClientVersion' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'setMinimumClientVersion', TMode> & {
        abi?: never
        functionName?: 'setMinimumClientVersion'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'setMinimumClientVersion', TMode>({
    abi: blockchainParametersABI,
    functionName: 'setMinimumClientVersion',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setBlockGasLimit"`.
 */
export function useBlockchainParametersSetBlockGasLimit<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'setBlockGasLimit'
        >['request']['abi'],
        'setBlockGasLimit',
        TMode
      > & { functionName?: 'setBlockGasLimit' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'setBlockGasLimit', TMode> & {
        abi?: never
        functionName?: 'setBlockGasLimit'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'setBlockGasLimit', TMode>({
    abi: blockchainParametersABI,
    functionName: 'setBlockGasLimit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setIntrinsicGasForAlternativeFeeCurrency"`.
 */
export function useBlockchainParametersSetIntrinsicGasForAlternativeFeeCurrency<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'setIntrinsicGasForAlternativeFeeCurrency'
        >['request']['abi'],
        'setIntrinsicGasForAlternativeFeeCurrency',
        TMode
      > & { functionName?: 'setIntrinsicGasForAlternativeFeeCurrency' }
    : UseContractWriteConfig<
        typeof blockchainParametersABI,
        'setIntrinsicGasForAlternativeFeeCurrency',
        TMode
      > & {
        abi?: never
        functionName?: 'setIntrinsicGasForAlternativeFeeCurrency'
      } = {} as any
) {
  return useContractWrite<
    typeof blockchainParametersABI,
    'setIntrinsicGasForAlternativeFeeCurrency',
    TMode
  >({
    abi: blockchainParametersABI,
    functionName: 'setIntrinsicGasForAlternativeFeeCurrency',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setUptimeLookbackWindow"`.
 */
export function useBlockchainParametersSetUptimeLookbackWindow<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof blockchainParametersABI,
          'setUptimeLookbackWindow'
        >['request']['abi'],
        'setUptimeLookbackWindow',
        TMode
      > & { functionName?: 'setUptimeLookbackWindow' }
    : UseContractWriteConfig<typeof blockchainParametersABI, 'setUptimeLookbackWindow', TMode> & {
        abi?: never
        functionName?: 'setUptimeLookbackWindow'
      } = {} as any
) {
  return useContractWrite<typeof blockchainParametersABI, 'setUptimeLookbackWindow', TMode>({
    abi: blockchainParametersABI,
    functionName: 'setUptimeLookbackWindow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__.
 */
export function usePrepareBlockchainParametersWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareBlockchainParametersRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareBlockchainParametersTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBlockchainParametersInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setMinimumClientVersion"`.
 */
export function usePrepareBlockchainParametersSetMinimumClientVersion(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setMinimumClientVersion'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'setMinimumClientVersion',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setMinimumClientVersion'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setBlockGasLimit"`.
 */
export function usePrepareBlockchainParametersSetBlockGasLimit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setBlockGasLimit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'setBlockGasLimit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setBlockGasLimit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setIntrinsicGasForAlternativeFeeCurrency"`.
 */
export function usePrepareBlockchainParametersSetIntrinsicGasForAlternativeFeeCurrency(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof blockchainParametersABI,
      'setIntrinsicGasForAlternativeFeeCurrency'
    >,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'setIntrinsicGasForAlternativeFeeCurrency',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof blockchainParametersABI,
    'setIntrinsicGasForAlternativeFeeCurrency'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link blockchainParametersABI}__ and `functionName` set to `"setUptimeLookbackWindow"`.
 */
export function usePrepareBlockchainParametersSetUptimeLookbackWindow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setUptimeLookbackWindow'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: blockchainParametersABI,
    functionName: 'setUptimeLookbackWindow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof blockchainParametersABI, 'setUptimeLookbackWindow'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__.
 */
export function useBlockchainParametersEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: blockchainParametersABI, ...config } as UseContractEventConfig<
    typeof blockchainParametersABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__ and `eventName` set to `"BlockGasLimitSet"`.
 */
export function useBlockchainParametersBlockGasLimitSetEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersABI, 'BlockGasLimitSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersABI,
    eventName: 'BlockGasLimitSet',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersABI, 'BlockGasLimitSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__ and `eventName` set to `"IntrinsicGasForAlternativeFeeCurrencySet"`.
 */
export function useBlockchainParametersIntrinsicGasForAlternativeFeeCurrencySetEvent(
  config: Omit<
    UseContractEventConfig<
      typeof blockchainParametersABI,
      'IntrinsicGasForAlternativeFeeCurrencySet'
    >,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersABI,
    eventName: 'IntrinsicGasForAlternativeFeeCurrencySet',
    ...config,
  } as UseContractEventConfig<
    typeof blockchainParametersABI,
    'IntrinsicGasForAlternativeFeeCurrencySet'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__ and `eventName` set to `"MinimumClientVersionSet"`.
 */
export function useBlockchainParametersMinimumClientVersionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersABI, 'MinimumClientVersionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersABI,
    eventName: 'MinimumClientVersionSet',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersABI, 'MinimumClientVersionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useBlockchainParametersOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link blockchainParametersABI}__ and `eventName` set to `"UptimeLookbackWindowSet"`.
 */
export function useBlockchainParametersUptimeLookbackWindowSetEvent(
  config: Omit<
    UseContractEventConfig<typeof blockchainParametersABI, 'UptimeLookbackWindowSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: blockchainParametersABI,
    eventName: 'UptimeLookbackWindowSet',
    ...config,
  } as UseContractEventConfig<typeof blockchainParametersABI, 'UptimeLookbackWindowSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__.
 */
export function useDoubleSigningSlasherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: doubleSigningSlasherABI, ...config } as UseContractReadConfig<
    typeof doubleSigningSlasherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useDoubleSigningSlasherCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useDoubleSigningSlasherFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useDoubleSigningSlasherGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useDoubleSigningSlasherGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useDoubleSigningSlasherGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useDoubleSigningSlasherGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useDoubleSigningSlasherGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useDoubleSigningSlasherGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"groupMembershipAtBlock"`.
 */
export function useDoubleSigningSlasherGroupMembershipAtBlock<
  TFunctionName extends 'groupMembershipAtBlock',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'groupMembershipAtBlock',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useDoubleSigningSlasherHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"initialized"`.
 */
export function useDoubleSigningSlasherInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"isOwner"`.
 */
export function useDoubleSigningSlasherIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useDoubleSigningSlasherMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useDoubleSigningSlasherMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useDoubleSigningSlasherNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useDoubleSigningSlasherNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"owner"`.
 */
export function useDoubleSigningSlasherOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"registry"`.
 */
export function useDoubleSigningSlasherRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"slashingIncentives"`.
 */
export function useDoubleSigningSlasherSlashingIncentives<
  TFunctionName extends 'slashingIncentives',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'slashingIncentives',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useDoubleSigningSlasherValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useDoubleSigningSlasherValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useDoubleSigningSlasherGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"checkForDoubleSigning"`.
 */
export function useDoubleSigningSlasherCheckForDoubleSigning<
  TFunctionName extends 'checkForDoubleSigning',
  TSelectData = ReadContractResult<typeof doubleSigningSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: doubleSigningSlasherABI,
    functionName: 'checkForDoubleSigning',
    ...config,
  } as UseContractReadConfig<typeof doubleSigningSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__.
 */
export function useDoubleSigningSlasherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doubleSigningSlasherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, TFunctionName, TMode>({
    abi: doubleSigningSlasherABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDoubleSigningSlasherRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'renounceOwnership', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useDoubleSigningSlasherSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doubleSigningSlasherABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'setRegistry', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"setSlashingIncentives"`.
 */
export function useDoubleSigningSlasherSetSlashingIncentives<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherABI,
          'setSlashingIncentives'
        >['request']['abi'],
        'setSlashingIncentives',
        TMode
      > & { functionName?: 'setSlashingIncentives' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'setSlashingIncentives', TMode> & {
        abi?: never
        functionName?: 'setSlashingIncentives'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'setSlashingIncentives', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'setSlashingIncentives',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDoubleSigningSlasherTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof doubleSigningSlasherABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'transferOwnership', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"initialize"`.
 */
export function useDoubleSigningSlasherInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doubleSigningSlasherABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'initialize', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"slash"`.
 */
export function useDoubleSigningSlasherSlash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof doubleSigningSlasherABI, 'slash'>['request']['abi'],
        'slash',
        TMode
      > & { functionName?: 'slash' }
    : UseContractWriteConfig<typeof doubleSigningSlasherABI, 'slash', TMode> & {
        abi?: never
        functionName?: 'slash'
      } = {} as any
) {
  return useContractWrite<typeof doubleSigningSlasherABI, 'slash', TMode>({
    abi: doubleSigningSlasherABI,
    functionName: 'slash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__.
 */
export function usePrepareDoubleSigningSlasherWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDoubleSigningSlasherRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareDoubleSigningSlasherSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"setSlashingIncentives"`.
 */
export function usePrepareDoubleSigningSlasherSetSlashingIncentives(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'setSlashingIncentives'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'setSlashingIncentives',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'setSlashingIncentives'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDoubleSigningSlasherTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDoubleSigningSlasherInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `functionName` set to `"slash"`.
 */
export function usePrepareDoubleSigningSlasherSlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'slash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: doubleSigningSlasherABI,
    functionName: 'slash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof doubleSigningSlasherABI, 'slash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherABI}__.
 */
export function useDoubleSigningSlasherEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: doubleSigningSlasherABI, ...config } as UseContractEventConfig<
    typeof doubleSigningSlasherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `eventName` set to `"DoubleSigningSlashPerformed"`.
 */
export function useDoubleSigningSlasherDoubleSigningSlashPerformedEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherABI, 'DoubleSigningSlashPerformed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherABI,
    eventName: 'DoubleSigningSlashPerformed',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherABI, 'DoubleSigningSlashPerformed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDoubleSigningSlasherOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useDoubleSigningSlasherRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link doubleSigningSlasherABI}__ and `eventName` set to `"SlashingIncentivesSet"`.
 */
export function useDoubleSigningSlasherSlashingIncentivesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof doubleSigningSlasherABI, 'SlashingIncentivesSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: doubleSigningSlasherABI,
    eventName: 'SlashingIncentivesSet',
    ...config,
  } as UseContractEventConfig<typeof doubleSigningSlasherABI, 'SlashingIncentivesSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__.
 */
export function useDowntimeSlasherRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: downtimeSlasherABI, ...config } as UseContractReadConfig<
    typeof downtimeSlasherABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"bitmaps"`.
 */
export function useDowntimeSlasherBitmaps<
  TFunctionName extends 'bitmaps',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'bitmaps',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useDowntimeSlasherCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useDowntimeSlasherFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useDowntimeSlasherGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useDowntimeSlasherGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useDowntimeSlasherGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useDowntimeSlasherGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useDowntimeSlasherGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useDowntimeSlasherGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"groupMembershipAtBlock"`.
 */
export function useDowntimeSlasherGroupMembershipAtBlock<
  TFunctionName extends 'groupMembershipAtBlock',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'groupMembershipAtBlock',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useDowntimeSlasherHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"initialized"`.
 */
export function useDowntimeSlasherInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"isOwner"`.
 */
export function useDowntimeSlasherIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"lastSlashedBlock"`.
 */
export function useDowntimeSlasherLastSlashedBlock<
  TFunctionName extends 'lastSlashedBlock',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'lastSlashedBlock',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useDowntimeSlasherMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useDowntimeSlasherMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useDowntimeSlasherNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useDowntimeSlasherNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"owner"`.
 */
export function useDowntimeSlasherOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"registry"`.
 */
export function useDowntimeSlasherRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"slashableDowntime"`.
 */
export function useDowntimeSlasherSlashableDowntime<
  TFunctionName extends 'slashableDowntime',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'slashableDowntime',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"slashingIncentives"`.
 */
export function useDowntimeSlasherSlashingIncentives<
  TFunctionName extends 'slashingIncentives',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'slashingIncentives',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useDowntimeSlasherValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useDowntimeSlasherValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useDowntimeSlasherGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"getBitmapForInterval"`.
 */
export function useDowntimeSlasherGetBitmapForInterval<
  TFunctionName extends 'getBitmapForInterval',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'getBitmapForInterval',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"wasDownForInterval"`.
 */
export function useDowntimeSlasherWasDownForInterval<
  TFunctionName extends 'wasDownForInterval',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'wasDownForInterval',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"isBitmapSetForInterval"`.
 */
export function useDowntimeSlasherIsBitmapSetForInterval<
  TFunctionName extends 'isBitmapSetForInterval',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'isBitmapSetForInterval',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"wasDownForIntervals"`.
 */
export function useDowntimeSlasherWasDownForIntervals<
  TFunctionName extends 'wasDownForIntervals',
  TSelectData = ReadContractResult<typeof downtimeSlasherABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: downtimeSlasherABI,
    functionName: 'wasDownForIntervals',
    ...config,
  } as UseContractReadConfig<typeof downtimeSlasherABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__.
 */
export function useDowntimeSlasherWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof downtimeSlasherABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof downtimeSlasherABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, TFunctionName, TMode>({
    abi: downtimeSlasherABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useDowntimeSlasherRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'renounceOwnership', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useDowntimeSlasherSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof downtimeSlasherABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'setRegistry', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setSlashingIncentives"`.
 */
export function useDowntimeSlasherSetSlashingIncentives<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherABI,
          'setSlashingIncentives'
        >['request']['abi'],
        'setSlashingIncentives',
        TMode
      > & { functionName?: 'setSlashingIncentives' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'setSlashingIncentives', TMode> & {
        abi?: never
        functionName?: 'setSlashingIncentives'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'setSlashingIncentives', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'setSlashingIncentives',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useDowntimeSlasherTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'transferOwnership', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"initialize"`.
 */
export function useDowntimeSlasherInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof downtimeSlasherABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'initialize', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setSlashableDowntime"`.
 */
export function useDowntimeSlasherSetSlashableDowntime<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherABI,
          'setSlashableDowntime'
        >['request']['abi'],
        'setSlashableDowntime',
        TMode
      > & { functionName?: 'setSlashableDowntime' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'setSlashableDowntime', TMode> & {
        abi?: never
        functionName?: 'setSlashableDowntime'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'setSlashableDowntime', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'setSlashableDowntime',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setBitmapForInterval"`.
 */
export function useDowntimeSlasherSetBitmapForInterval<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof downtimeSlasherABI,
          'setBitmapForInterval'
        >['request']['abi'],
        'setBitmapForInterval',
        TMode
      > & { functionName?: 'setBitmapForInterval' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'setBitmapForInterval', TMode> & {
        abi?: never
        functionName?: 'setBitmapForInterval'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'setBitmapForInterval', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'setBitmapForInterval',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"slash"`.
 */
export function useDowntimeSlasherSlash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof downtimeSlasherABI, 'slash'>['request']['abi'],
        'slash',
        TMode
      > & { functionName?: 'slash' }
    : UseContractWriteConfig<typeof downtimeSlasherABI, 'slash', TMode> & {
        abi?: never
        functionName?: 'slash'
      } = {} as any
) {
  return useContractWrite<typeof downtimeSlasherABI, 'slash', TMode>({
    abi: downtimeSlasherABI,
    functionName: 'slash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__.
 */
export function usePrepareDowntimeSlasherWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareDowntimeSlasherRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareDowntimeSlasherSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setSlashingIncentives"`.
 */
export function usePrepareDowntimeSlasherSetSlashingIncentives(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setSlashingIncentives'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'setSlashingIncentives',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setSlashingIncentives'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareDowntimeSlasherTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareDowntimeSlasherInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setSlashableDowntime"`.
 */
export function usePrepareDowntimeSlasherSetSlashableDowntime(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setSlashableDowntime'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'setSlashableDowntime',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setSlashableDowntime'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"setBitmapForInterval"`.
 */
export function usePrepareDowntimeSlasherSetBitmapForInterval(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setBitmapForInterval'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'setBitmapForInterval',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'setBitmapForInterval'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link downtimeSlasherABI}__ and `functionName` set to `"slash"`.
 */
export function usePrepareDowntimeSlasherSlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'slash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: downtimeSlasherABI,
    functionName: 'slash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof downtimeSlasherABI, 'slash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__.
 */
export function useDowntimeSlasherEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof downtimeSlasherABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: downtimeSlasherABI, ...config } as UseContractEventConfig<
    typeof downtimeSlasherABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"BitmapSetForInterval"`.
 */
export function useDowntimeSlasherBitmapSetForIntervalEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'BitmapSetForInterval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'BitmapSetForInterval',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'BitmapSetForInterval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"DowntimeSlashPerformed"`.
 */
export function useDowntimeSlasherDowntimeSlashPerformedEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'DowntimeSlashPerformed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'DowntimeSlashPerformed',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'DowntimeSlashPerformed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useDowntimeSlasherOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useDowntimeSlasherRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"SlashableDowntimeSet"`.
 */
export function useDowntimeSlasherSlashableDowntimeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'SlashableDowntimeSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'SlashableDowntimeSet',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'SlashableDowntimeSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link downtimeSlasherABI}__ and `eventName` set to `"SlashingIncentivesSet"`.
 */
export function useDowntimeSlasherSlashingIncentivesSetEvent(
  config: Omit<
    UseContractEventConfig<typeof downtimeSlasherABI, 'SlashingIncentivesSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: downtimeSlasherABI,
    eventName: 'SlashingIncentivesSet',
    ...config,
  } as UseContractEventConfig<typeof downtimeSlasherABI, 'SlashingIncentivesSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__.
 */
export function useLockedGoldRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: lockedGoldABI, ...config } as UseContractReadConfig<
    typeof lockedGoldABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"initialized"`.
 */
export function useLockedGoldInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"isOwner"`.
 */
export function useLockedGoldIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"owner"`.
 */
export function useLockedGoldOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"registry"`.
 */
export function useLockedGoldRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"slashingWhitelist"`.
 */
export function useLockedGoldSlashingWhitelist<
  TFunctionName extends 'slashingWhitelist',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'slashingWhitelist',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"totalNonvoting"`.
 */
export function useLockedGoldTotalNonvoting<
  TFunctionName extends 'totalNonvoting',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'totalNonvoting',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"unlockingPeriod"`.
 */
export function useLockedGoldUnlockingPeriod<
  TFunctionName extends 'unlockingPeriod',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'unlockingPeriod',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"isSlasher"`.
 */
export function useLockedGoldIsSlasher<
  TFunctionName extends 'isSlasher',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'isSlasher',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useLockedGoldGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getTotalLockedGold"`.
 */
export function useLockedGoldGetTotalLockedGold<
  TFunctionName extends 'getTotalLockedGold',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getTotalLockedGold',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getNonvotingLockedGold"`.
 */
export function useLockedGoldGetNonvotingLockedGold<
  TFunctionName extends 'getNonvotingLockedGold',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getNonvotingLockedGold',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getAccountTotalLockedGold"`.
 */
export function useLockedGoldGetAccountTotalLockedGold<
  TFunctionName extends 'getAccountTotalLockedGold',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getAccountTotalLockedGold',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getAccountNonvotingLockedGold"`.
 */
export function useLockedGoldGetAccountNonvotingLockedGold<
  TFunctionName extends 'getAccountNonvotingLockedGold',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getAccountNonvotingLockedGold',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getPendingWithdrawals"`.
 */
export function useLockedGoldGetPendingWithdrawals<
  TFunctionName extends 'getPendingWithdrawals',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getPendingWithdrawals',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getPendingWithdrawal"`.
 */
export function useLockedGoldGetPendingWithdrawal<
  TFunctionName extends 'getPendingWithdrawal',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getPendingWithdrawal',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getTotalPendingWithdrawals"`.
 */
export function useLockedGoldGetTotalPendingWithdrawals<
  TFunctionName extends 'getTotalPendingWithdrawals',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getTotalPendingWithdrawals',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"getSlashingWhitelist"`.
 */
export function useLockedGoldGetSlashingWhitelist<
  TFunctionName extends 'getSlashingWhitelist',
  TSelectData = ReadContractResult<typeof lockedGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: lockedGoldABI,
    functionName: 'getSlashingWhitelist',
    ...config,
  } as UseContractReadConfig<typeof lockedGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__.
 */
export function useLockedGoldWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof lockedGoldABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, TFunctionName, TMode>({
    abi: lockedGoldABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useLockedGoldRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'renounceOwnership', TMode>({
    abi: lockedGoldABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useLockedGoldSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'setRegistry', TMode>({
    abi: lockedGoldABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useLockedGoldTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'transferOwnership', TMode>({
    abi: lockedGoldABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"initialize"`.
 */
export function useLockedGoldInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'initialize', TMode>({
    abi: lockedGoldABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"setUnlockingPeriod"`.
 */
export function useLockedGoldSetUnlockingPeriod<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'setUnlockingPeriod'>['request']['abi'],
        'setUnlockingPeriod',
        TMode
      > & { functionName?: 'setUnlockingPeriod' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'setUnlockingPeriod', TMode> & {
        abi?: never
        functionName?: 'setUnlockingPeriod'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'setUnlockingPeriod', TMode>({
    abi: lockedGoldABI,
    functionName: 'setUnlockingPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"lock"`.
 */
export function useLockedGoldLock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'lock'>['request']['abi'],
        'lock',
        TMode
      > & { functionName?: 'lock' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'lock', TMode> & {
        abi?: never
        functionName?: 'lock'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'lock', TMode>({
    abi: lockedGoldABI,
    functionName: 'lock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"incrementNonvotingAccountBalance"`.
 */
export function useLockedGoldIncrementNonvotingAccountBalance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lockedGoldABI,
          'incrementNonvotingAccountBalance'
        >['request']['abi'],
        'incrementNonvotingAccountBalance',
        TMode
      > & { functionName?: 'incrementNonvotingAccountBalance' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'incrementNonvotingAccountBalance', TMode> & {
        abi?: never
        functionName?: 'incrementNonvotingAccountBalance'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'incrementNonvotingAccountBalance', TMode>({
    abi: lockedGoldABI,
    functionName: 'incrementNonvotingAccountBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"decrementNonvotingAccountBalance"`.
 */
export function useLockedGoldDecrementNonvotingAccountBalance<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof lockedGoldABI,
          'decrementNonvotingAccountBalance'
        >['request']['abi'],
        'decrementNonvotingAccountBalance',
        TMode
      > & { functionName?: 'decrementNonvotingAccountBalance' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'decrementNonvotingAccountBalance', TMode> & {
        abi?: never
        functionName?: 'decrementNonvotingAccountBalance'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'decrementNonvotingAccountBalance', TMode>({
    abi: lockedGoldABI,
    functionName: 'decrementNonvotingAccountBalance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"unlock"`.
 */
export function useLockedGoldUnlock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'unlock'>['request']['abi'],
        'unlock',
        TMode
      > & { functionName?: 'unlock' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'unlock', TMode> & {
        abi?: never
        functionName?: 'unlock'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'unlock', TMode>({
    abi: lockedGoldABI,
    functionName: 'unlock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"relock"`.
 */
export function useLockedGoldRelock<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'relock'>['request']['abi'],
        'relock',
        TMode
      > & { functionName?: 'relock' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'relock', TMode> & {
        abi?: never
        functionName?: 'relock'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'relock', TMode>({
    abi: lockedGoldABI,
    functionName: 'relock',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"withdraw"`.
 */
export function useLockedGoldWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'withdraw', TMode>({
    abi: lockedGoldABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"addSlasher"`.
 */
export function useLockedGoldAddSlasher<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'addSlasher'>['request']['abi'],
        'addSlasher',
        TMode
      > & { functionName?: 'addSlasher' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'addSlasher', TMode> & {
        abi?: never
        functionName?: 'addSlasher'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'addSlasher', TMode>({
    abi: lockedGoldABI,
    functionName: 'addSlasher',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"removeSlasher"`.
 */
export function useLockedGoldRemoveSlasher<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'removeSlasher'>['request']['abi'],
        'removeSlasher',
        TMode
      > & { functionName?: 'removeSlasher' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'removeSlasher', TMode> & {
        abi?: never
        functionName?: 'removeSlasher'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'removeSlasher', TMode>({
    abi: lockedGoldABI,
    functionName: 'removeSlasher',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"slash"`.
 */
export function useLockedGoldSlash<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof lockedGoldABI, 'slash'>['request']['abi'],
        'slash',
        TMode
      > & { functionName?: 'slash' }
    : UseContractWriteConfig<typeof lockedGoldABI, 'slash', TMode> & {
        abi?: never
        functionName?: 'slash'
      } = {} as any
) {
  return useContractWrite<typeof lockedGoldABI, 'slash', TMode>({
    abi: lockedGoldABI,
    functionName: 'slash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__.
 */
export function usePrepareLockedGoldWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: lockedGoldABI, ...config } as UsePrepareContractWriteConfig<
    typeof lockedGoldABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareLockedGoldRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareLockedGoldSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareLockedGoldTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareLockedGoldInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"setUnlockingPeriod"`.
 */
export function usePrepareLockedGoldSetUnlockingPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'setUnlockingPeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'setUnlockingPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'setUnlockingPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"lock"`.
 */
export function usePrepareLockedGoldLock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'lock'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'lock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'lock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"incrementNonvotingAccountBalance"`.
 */
export function usePrepareLockedGoldIncrementNonvotingAccountBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'incrementNonvotingAccountBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'incrementNonvotingAccountBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'incrementNonvotingAccountBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"decrementNonvotingAccountBalance"`.
 */
export function usePrepareLockedGoldDecrementNonvotingAccountBalance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'decrementNonvotingAccountBalance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'decrementNonvotingAccountBalance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'decrementNonvotingAccountBalance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"unlock"`.
 */
export function usePrepareLockedGoldUnlock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'unlock'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'unlock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'unlock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"relock"`.
 */
export function usePrepareLockedGoldRelock(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'relock'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'relock',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'relock'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareLockedGoldWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"addSlasher"`.
 */
export function usePrepareLockedGoldAddSlasher(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'addSlasher'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'addSlasher',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'addSlasher'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"removeSlasher"`.
 */
export function usePrepareLockedGoldRemoveSlasher(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'removeSlasher'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'removeSlasher',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'removeSlasher'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lockedGoldABI}__ and `functionName` set to `"slash"`.
 */
export function usePrepareLockedGoldSlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lockedGoldABI, 'slash'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: lockedGoldABI,
    functionName: 'slash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lockedGoldABI, 'slash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__.
 */
export function useLockedGoldEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof lockedGoldABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: lockedGoldABI, ...config } as UseContractEventConfig<
    typeof lockedGoldABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"AccountSlashed"`.
 */
export function useLockedGoldAccountSlashedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'AccountSlashed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'AccountSlashed',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'AccountSlashed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"GoldLocked"`.
 */
export function useLockedGoldGoldLockedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'GoldLocked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'GoldLocked',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'GoldLocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"GoldRelocked"`.
 */
export function useLockedGoldGoldRelockedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'GoldRelocked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'GoldRelocked',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'GoldRelocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"GoldUnlocked"`.
 */
export function useLockedGoldGoldUnlockedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'GoldUnlocked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'GoldUnlocked',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'GoldUnlocked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"GoldWithdrawn"`.
 */
export function useLockedGoldGoldWithdrawnEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'GoldWithdrawn'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'GoldWithdrawn',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'GoldWithdrawn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useLockedGoldOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useLockedGoldRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"SlasherWhitelistAdded"`.
 */
export function useLockedGoldSlasherWhitelistAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'SlasherWhitelistAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'SlasherWhitelistAdded',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'SlasherWhitelistAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"SlasherWhitelistRemoved"`.
 */
export function useLockedGoldSlasherWhitelistRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'SlasherWhitelistRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'SlasherWhitelistRemoved',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'SlasherWhitelistRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lockedGoldABI}__ and `eventName` set to `"UnlockingPeriodSet"`.
 */
export function useLockedGoldUnlockingPeriodSetEvent(
  config: Omit<
    UseContractEventConfig<typeof lockedGoldABI, 'UnlockingPeriodSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: lockedGoldABI,
    eventName: 'UnlockingPeriodSet',
    ...config,
  } as UseContractEventConfig<typeof lockedGoldABI, 'UnlockingPeriodSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: validatorsABI, ...config } as UseContractReadConfig<
    typeof validatorsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useValidatorsCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"commissionUpdateDelay"`.
 */
export function useValidatorsCommissionUpdateDelay<
  TFunctionName extends 'commissionUpdateDelay',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'commissionUpdateDelay',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"downtimeGracePeriod"`.
 */
export function useValidatorsDowntimeGracePeriod<
  TFunctionName extends 'downtimeGracePeriod',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'downtimeGracePeriod',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useValidatorsFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useValidatorsGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useValidatorsGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useValidatorsGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useValidatorsGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useValidatorsGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useValidatorsGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"groupLockedGoldRequirements"`.
 */
export function useValidatorsGroupLockedGoldRequirements<
  TFunctionName extends 'groupLockedGoldRequirements',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'groupLockedGoldRequirements',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useValidatorsHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"initialized"`.
 */
export function useValidatorsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useValidatorsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"maxGroupSize"`.
 */
export function useValidatorsMaxGroupSize<
  TFunctionName extends 'maxGroupSize',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'maxGroupSize',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"membershipHistoryLength"`.
 */
export function useValidatorsMembershipHistoryLength<
  TFunctionName extends 'membershipHistoryLength',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'membershipHistoryLength',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useValidatorsMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useValidatorsMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useValidatorsNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useValidatorsNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"owner"`.
 */
export function useValidatorsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"registry"`.
 */
export function useValidatorsRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"slashingMultiplierResetPeriod"`.
 */
export function useValidatorsSlashingMultiplierResetPeriod<
  TFunctionName extends 'slashingMultiplierResetPeriod',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'slashingMultiplierResetPeriod',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validatorLockedGoldRequirements"`.
 */
export function useValidatorsValidatorLockedGoldRequirements<
  TFunctionName extends 'validatorLockedGoldRequirements',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'validatorLockedGoldRequirements',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useValidatorsValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useValidatorsValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useValidatorsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getMaxGroupSize"`.
 */
export function useValidatorsGetMaxGroupSize<
  TFunctionName extends 'getMaxGroupSize',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getMaxGroupSize',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getCommissionUpdateDelay"`.
 */
export function useValidatorsGetCommissionUpdateDelay<
  TFunctionName extends 'getCommissionUpdateDelay',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getCommissionUpdateDelay',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidatorScoreParameters"`.
 */
export function useValidatorsGetValidatorScoreParameters<
  TFunctionName extends 'getValidatorScoreParameters',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidatorScoreParameters',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getMembershipHistory"`.
 */
export function useValidatorsGetMembershipHistory<
  TFunctionName extends 'getMembershipHistory',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getMembershipHistory',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"calculateEpochScore"`.
 */
export function useValidatorsCalculateEpochScore<
  TFunctionName extends 'calculateEpochScore',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'calculateEpochScore',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"calculateGroupEpochScore"`.
 */
export function useValidatorsCalculateGroupEpochScore<
  TFunctionName extends 'calculateGroupEpochScore',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'calculateGroupEpochScore',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getAccountLockedGoldRequirement"`.
 */
export function useValidatorsGetAccountLockedGoldRequirement<
  TFunctionName extends 'getAccountLockedGoldRequirement',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getAccountLockedGoldRequirement',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"meetsAccountLockedGoldRequirements"`.
 */
export function useValidatorsMeetsAccountLockedGoldRequirements<
  TFunctionName extends 'meetsAccountLockedGoldRequirements',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'meetsAccountLockedGoldRequirements',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidatorBlsPublicKeyFromSigner"`.
 */
export function useValidatorsGetValidatorBlsPublicKeyFromSigner<
  TFunctionName extends 'getValidatorBlsPublicKeyFromSigner',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidatorBlsPublicKeyFromSigner',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidator"`.
 */
export function useValidatorsGetValidator<
  TFunctionName extends 'getValidator',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidator',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidatorGroup"`.
 */
export function useValidatorsGetValidatorGroup<
  TFunctionName extends 'getValidatorGroup',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidatorGroup',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getGroupNumMembers"`.
 */
export function useValidatorsGetGroupNumMembers<
  TFunctionName extends 'getGroupNumMembers',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getGroupNumMembers',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getTopGroupValidators"`.
 */
export function useValidatorsGetTopGroupValidators<
  TFunctionName extends 'getTopGroupValidators',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getTopGroupValidators',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getGroupsNumMembers"`.
 */
export function useValidatorsGetGroupsNumMembers<
  TFunctionName extends 'getGroupsNumMembers',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getGroupsNumMembers',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getNumRegisteredValidators"`.
 */
export function useValidatorsGetNumRegisteredValidators<
  TFunctionName extends 'getNumRegisteredValidators',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getNumRegisteredValidators',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidatorLockedGoldRequirements"`.
 */
export function useValidatorsGetValidatorLockedGoldRequirements<
  TFunctionName extends 'getValidatorLockedGoldRequirements',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidatorLockedGoldRequirements',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getGroupLockedGoldRequirements"`.
 */
export function useValidatorsGetGroupLockedGoldRequirements<
  TFunctionName extends 'getGroupLockedGoldRequirements',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getGroupLockedGoldRequirements',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getRegisteredValidators"`.
 */
export function useValidatorsGetRegisteredValidators<
  TFunctionName extends 'getRegisteredValidators',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getRegisteredValidators',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getRegisteredValidatorSigners"`.
 */
export function useValidatorsGetRegisteredValidatorSigners<
  TFunctionName extends 'getRegisteredValidatorSigners',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getRegisteredValidatorSigners',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getRegisteredValidatorGroups"`.
 */
export function useValidatorsGetRegisteredValidatorGroups<
  TFunctionName extends 'getRegisteredValidatorGroups',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getRegisteredValidatorGroups',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"isValidatorGroup"`.
 */
export function useValidatorsIsValidatorGroup<
  TFunctionName extends 'isValidatorGroup',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'isValidatorGroup',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"isValidator"`.
 */
export function useValidatorsIsValidator<
  TFunctionName extends 'isValidator',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'isValidator',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getMembershipInLastEpochFromSigner"`.
 */
export function useValidatorsGetMembershipInLastEpochFromSigner<
  TFunctionName extends 'getMembershipInLastEpochFromSigner',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getMembershipInLastEpochFromSigner',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getMembershipInLastEpoch"`.
 */
export function useValidatorsGetMembershipInLastEpoch<
  TFunctionName extends 'getMembershipInLastEpoch',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getMembershipInLastEpoch',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"getValidatorGroupSlashingMultiplier"`.
 */
export function useValidatorsGetValidatorGroupSlashingMultiplier<
  TFunctionName extends 'getValidatorGroupSlashingMultiplier',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'getValidatorGroupSlashingMultiplier',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"groupMembershipInEpoch"`.
 */
export function useValidatorsGroupMembershipInEpoch<
  TFunctionName extends 'groupMembershipInEpoch',
  TSelectData = ReadContractResult<typeof validatorsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: validatorsABI,
    functionName: 'groupMembershipInEpoch',
    ...config,
  } as UseContractReadConfig<typeof validatorsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof validatorsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, TFunctionName, TMode>({
    abi: validatorsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useValidatorsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof validatorsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'renounceOwnership', TMode>({
    abi: validatorsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useValidatorsSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof validatorsABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setRegistry', TMode>({
    abi: validatorsABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useValidatorsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof validatorsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'transferOwnership', TMode>({
    abi: validatorsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"initialize"`.
 */
export function useValidatorsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof validatorsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'initialize', TMode>({
    abi: validatorsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setCommissionUpdateDelay"`.
 */
export function useValidatorsSetCommissionUpdateDelay<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setCommissionUpdateDelay'
        >['request']['abi'],
        'setCommissionUpdateDelay',
        TMode
      > & { functionName?: 'setCommissionUpdateDelay' }
    : UseContractWriteConfig<typeof validatorsABI, 'setCommissionUpdateDelay', TMode> & {
        abi?: never
        functionName?: 'setCommissionUpdateDelay'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setCommissionUpdateDelay', TMode>({
    abi: validatorsABI,
    functionName: 'setCommissionUpdateDelay',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setMaxGroupSize"`.
 */
export function useValidatorsSetMaxGroupSize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'setMaxGroupSize'>['request']['abi'],
        'setMaxGroupSize',
        TMode
      > & { functionName?: 'setMaxGroupSize' }
    : UseContractWriteConfig<typeof validatorsABI, 'setMaxGroupSize', TMode> & {
        abi?: never
        functionName?: 'setMaxGroupSize'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setMaxGroupSize', TMode>({
    abi: validatorsABI,
    functionName: 'setMaxGroupSize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setMembershipHistoryLength"`.
 */
export function useValidatorsSetMembershipHistoryLength<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setMembershipHistoryLength'
        >['request']['abi'],
        'setMembershipHistoryLength',
        TMode
      > & { functionName?: 'setMembershipHistoryLength' }
    : UseContractWriteConfig<typeof validatorsABI, 'setMembershipHistoryLength', TMode> & {
        abi?: never
        functionName?: 'setMembershipHistoryLength'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setMembershipHistoryLength', TMode>({
    abi: validatorsABI,
    functionName: 'setMembershipHistoryLength',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorScoreParameters"`.
 */
export function useValidatorsSetValidatorScoreParameters<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setValidatorScoreParameters'
        >['request']['abi'],
        'setValidatorScoreParameters',
        TMode
      > & { functionName?: 'setValidatorScoreParameters' }
    : UseContractWriteConfig<typeof validatorsABI, 'setValidatorScoreParameters', TMode> & {
        abi?: never
        functionName?: 'setValidatorScoreParameters'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setValidatorScoreParameters', TMode>({
    abi: validatorsABI,
    functionName: 'setValidatorScoreParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setGroupLockedGoldRequirements"`.
 */
export function useValidatorsSetGroupLockedGoldRequirements<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setGroupLockedGoldRequirements'
        >['request']['abi'],
        'setGroupLockedGoldRequirements',
        TMode
      > & { functionName?: 'setGroupLockedGoldRequirements' }
    : UseContractWriteConfig<typeof validatorsABI, 'setGroupLockedGoldRequirements', TMode> & {
        abi?: never
        functionName?: 'setGroupLockedGoldRequirements'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setGroupLockedGoldRequirements', TMode>({
    abi: validatorsABI,
    functionName: 'setGroupLockedGoldRequirements',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorLockedGoldRequirements"`.
 */
export function useValidatorsSetValidatorLockedGoldRequirements<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setValidatorLockedGoldRequirements'
        >['request']['abi'],
        'setValidatorLockedGoldRequirements',
        TMode
      > & { functionName?: 'setValidatorLockedGoldRequirements' }
    : UseContractWriteConfig<typeof validatorsABI, 'setValidatorLockedGoldRequirements', TMode> & {
        abi?: never
        functionName?: 'setValidatorLockedGoldRequirements'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setValidatorLockedGoldRequirements', TMode>({
    abi: validatorsABI,
    functionName: 'setValidatorLockedGoldRequirements',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"registerValidator"`.
 */
export function useValidatorsRegisterValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'registerValidator'>['request']['abi'],
        'registerValidator',
        TMode
      > & { functionName?: 'registerValidator' }
    : UseContractWriteConfig<typeof validatorsABI, 'registerValidator', TMode> & {
        abi?: never
        functionName?: 'registerValidator'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'registerValidator', TMode>({
    abi: validatorsABI,
    functionName: 'registerValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateValidatorScoreFromSigner"`.
 */
export function useValidatorsUpdateValidatorScoreFromSigner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'updateValidatorScoreFromSigner'
        >['request']['abi'],
        'updateValidatorScoreFromSigner',
        TMode
      > & { functionName?: 'updateValidatorScoreFromSigner' }
    : UseContractWriteConfig<typeof validatorsABI, 'updateValidatorScoreFromSigner', TMode> & {
        abi?: never
        functionName?: 'updateValidatorScoreFromSigner'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'updateValidatorScoreFromSigner', TMode>({
    abi: validatorsABI,
    functionName: 'updateValidatorScoreFromSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"distributeEpochPaymentsFromSigner"`.
 */
export function useValidatorsDistributeEpochPaymentsFromSigner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'distributeEpochPaymentsFromSigner'
        >['request']['abi'],
        'distributeEpochPaymentsFromSigner',
        TMode
      > & { functionName?: 'distributeEpochPaymentsFromSigner' }
    : UseContractWriteConfig<typeof validatorsABI, 'distributeEpochPaymentsFromSigner', TMode> & {
        abi?: never
        functionName?: 'distributeEpochPaymentsFromSigner'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'distributeEpochPaymentsFromSigner', TMode>({
    abi: validatorsABI,
    functionName: 'distributeEpochPaymentsFromSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deregisterValidator"`.
 */
export function useValidatorsDeregisterValidator<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'deregisterValidator'>['request']['abi'],
        'deregisterValidator',
        TMode
      > & { functionName?: 'deregisterValidator' }
    : UseContractWriteConfig<typeof validatorsABI, 'deregisterValidator', TMode> & {
        abi?: never
        functionName?: 'deregisterValidator'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'deregisterValidator', TMode>({
    abi: validatorsABI,
    functionName: 'deregisterValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"affiliate"`.
 */
export function useValidatorsAffiliate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'affiliate'>['request']['abi'],
        'affiliate',
        TMode
      > & { functionName?: 'affiliate' }
    : UseContractWriteConfig<typeof validatorsABI, 'affiliate', TMode> & {
        abi?: never
        functionName?: 'affiliate'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'affiliate', TMode>({
    abi: validatorsABI,
    functionName: 'affiliate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deaffiliate"`.
 */
export function useValidatorsDeaffiliate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'deaffiliate'>['request']['abi'],
        'deaffiliate',
        TMode
      > & { functionName?: 'deaffiliate' }
    : UseContractWriteConfig<typeof validatorsABI, 'deaffiliate', TMode> & {
        abi?: never
        functionName?: 'deaffiliate'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'deaffiliate', TMode>({
    abi: validatorsABI,
    functionName: 'deaffiliate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateBlsPublicKey"`.
 */
export function useValidatorsUpdateBlsPublicKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'updateBlsPublicKey'>['request']['abi'],
        'updateBlsPublicKey',
        TMode
      > & { functionName?: 'updateBlsPublicKey' }
    : UseContractWriteConfig<typeof validatorsABI, 'updateBlsPublicKey', TMode> & {
        abi?: never
        functionName?: 'updateBlsPublicKey'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'updateBlsPublicKey', TMode>({
    abi: validatorsABI,
    functionName: 'updateBlsPublicKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateEcdsaPublicKey"`.
 */
export function useValidatorsUpdateEcdsaPublicKey<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'updateEcdsaPublicKey'>['request']['abi'],
        'updateEcdsaPublicKey',
        TMode
      > & { functionName?: 'updateEcdsaPublicKey' }
    : UseContractWriteConfig<typeof validatorsABI, 'updateEcdsaPublicKey', TMode> & {
        abi?: never
        functionName?: 'updateEcdsaPublicKey'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'updateEcdsaPublicKey', TMode>({
    abi: validatorsABI,
    functionName: 'updateEcdsaPublicKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updatePublicKeys"`.
 */
export function useValidatorsUpdatePublicKeys<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'updatePublicKeys'>['request']['abi'],
        'updatePublicKeys',
        TMode
      > & { functionName?: 'updatePublicKeys' }
    : UseContractWriteConfig<typeof validatorsABI, 'updatePublicKeys', TMode> & {
        abi?: never
        functionName?: 'updatePublicKeys'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'updatePublicKeys', TMode>({
    abi: validatorsABI,
    functionName: 'updatePublicKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"registerValidatorGroup"`.
 */
export function useValidatorsRegisterValidatorGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'registerValidatorGroup'
        >['request']['abi'],
        'registerValidatorGroup',
        TMode
      > & { functionName?: 'registerValidatorGroup' }
    : UseContractWriteConfig<typeof validatorsABI, 'registerValidatorGroup', TMode> & {
        abi?: never
        functionName?: 'registerValidatorGroup'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'registerValidatorGroup', TMode>({
    abi: validatorsABI,
    functionName: 'registerValidatorGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deregisterValidatorGroup"`.
 */
export function useValidatorsDeregisterValidatorGroup<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'deregisterValidatorGroup'
        >['request']['abi'],
        'deregisterValidatorGroup',
        TMode
      > & { functionName?: 'deregisterValidatorGroup' }
    : UseContractWriteConfig<typeof validatorsABI, 'deregisterValidatorGroup', TMode> & {
        abi?: never
        functionName?: 'deregisterValidatorGroup'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'deregisterValidatorGroup', TMode>({
    abi: validatorsABI,
    functionName: 'deregisterValidatorGroup',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addMember"`.
 */
export function useValidatorsAddMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'addMember'>['request']['abi'],
        'addMember',
        TMode
      > & { functionName?: 'addMember' }
    : UseContractWriteConfig<typeof validatorsABI, 'addMember', TMode> & {
        abi?: never
        functionName?: 'addMember'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'addMember', TMode>({
    abi: validatorsABI,
    functionName: 'addMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addFirstMember"`.
 */
export function useValidatorsAddFirstMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'addFirstMember'>['request']['abi'],
        'addFirstMember',
        TMode
      > & { functionName?: 'addFirstMember' }
    : UseContractWriteConfig<typeof validatorsABI, 'addFirstMember', TMode> & {
        abi?: never
        functionName?: 'addFirstMember'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'addFirstMember', TMode>({
    abi: validatorsABI,
    functionName: 'addFirstMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeMember"`.
 */
export function useValidatorsRemoveMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'removeMember'>['request']['abi'],
        'removeMember',
        TMode
      > & { functionName?: 'removeMember' }
    : UseContractWriteConfig<typeof validatorsABI, 'removeMember', TMode> & {
        abi?: never
        functionName?: 'removeMember'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'removeMember', TMode>({
    abi: validatorsABI,
    functionName: 'removeMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"reorderMember"`.
 */
export function useValidatorsReorderMember<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'reorderMember'>['request']['abi'],
        'reorderMember',
        TMode
      > & { functionName?: 'reorderMember' }
    : UseContractWriteConfig<typeof validatorsABI, 'reorderMember', TMode> & {
        abi?: never
        functionName?: 'reorderMember'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'reorderMember', TMode>({
    abi: validatorsABI,
    functionName: 'reorderMember',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setNextCommissionUpdate"`.
 */
export function useValidatorsSetNextCommissionUpdate<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setNextCommissionUpdate'
        >['request']['abi'],
        'setNextCommissionUpdate',
        TMode
      > & { functionName?: 'setNextCommissionUpdate' }
    : UseContractWriteConfig<typeof validatorsABI, 'setNextCommissionUpdate', TMode> & {
        abi?: never
        functionName?: 'setNextCommissionUpdate'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setNextCommissionUpdate', TMode>({
    abi: validatorsABI,
    functionName: 'setNextCommissionUpdate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateCommission"`.
 */
export function useValidatorsUpdateCommission<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof validatorsABI, 'updateCommission'>['request']['abi'],
        'updateCommission',
        TMode
      > & { functionName?: 'updateCommission' }
    : UseContractWriteConfig<typeof validatorsABI, 'updateCommission', TMode> & {
        abi?: never
        functionName?: 'updateCommission'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'updateCommission', TMode>({
    abi: validatorsABI,
    functionName: 'updateCommission',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"forceDeaffiliateIfValidator"`.
 */
export function useValidatorsForceDeaffiliateIfValidator<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'forceDeaffiliateIfValidator'
        >['request']['abi'],
        'forceDeaffiliateIfValidator',
        TMode
      > & { functionName?: 'forceDeaffiliateIfValidator' }
    : UseContractWriteConfig<typeof validatorsABI, 'forceDeaffiliateIfValidator', TMode> & {
        abi?: never
        functionName?: 'forceDeaffiliateIfValidator'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'forceDeaffiliateIfValidator', TMode>({
    abi: validatorsABI,
    functionName: 'forceDeaffiliateIfValidator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setSlashingMultiplierResetPeriod"`.
 */
export function useValidatorsSetSlashingMultiplierResetPeriod<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setSlashingMultiplierResetPeriod'
        >['request']['abi'],
        'setSlashingMultiplierResetPeriod',
        TMode
      > & { functionName?: 'setSlashingMultiplierResetPeriod' }
    : UseContractWriteConfig<typeof validatorsABI, 'setSlashingMultiplierResetPeriod', TMode> & {
        abi?: never
        functionName?: 'setSlashingMultiplierResetPeriod'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setSlashingMultiplierResetPeriod', TMode>({
    abi: validatorsABI,
    functionName: 'setSlashingMultiplierResetPeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setDowntimeGracePeriod"`.
 */
export function useValidatorsSetDowntimeGracePeriod<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'setDowntimeGracePeriod'
        >['request']['abi'],
        'setDowntimeGracePeriod',
        TMode
      > & { functionName?: 'setDowntimeGracePeriod' }
    : UseContractWriteConfig<typeof validatorsABI, 'setDowntimeGracePeriod', TMode> & {
        abi?: never
        functionName?: 'setDowntimeGracePeriod'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'setDowntimeGracePeriod', TMode>({
    abi: validatorsABI,
    functionName: 'setDowntimeGracePeriod',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"resetSlashingMultiplier"`.
 */
export function useValidatorsResetSlashingMultiplier<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'resetSlashingMultiplier'
        >['request']['abi'],
        'resetSlashingMultiplier',
        TMode
      > & { functionName?: 'resetSlashingMultiplier' }
    : UseContractWriteConfig<typeof validatorsABI, 'resetSlashingMultiplier', TMode> & {
        abi?: never
        functionName?: 'resetSlashingMultiplier'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'resetSlashingMultiplier', TMode>({
    abi: validatorsABI,
    functionName: 'resetSlashingMultiplier',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"halveSlashingMultiplier"`.
 */
export function useValidatorsHalveSlashingMultiplier<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof validatorsABI,
          'halveSlashingMultiplier'
        >['request']['abi'],
        'halveSlashingMultiplier',
        TMode
      > & { functionName?: 'halveSlashingMultiplier' }
    : UseContractWriteConfig<typeof validatorsABI, 'halveSlashingMultiplier', TMode> & {
        abi?: never
        functionName?: 'halveSlashingMultiplier'
      } = {} as any
) {
  return useContractWrite<typeof validatorsABI, 'halveSlashingMultiplier', TMode>({
    abi: validatorsABI,
    functionName: 'halveSlashingMultiplier',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__.
 */
export function usePrepareValidatorsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({ abi: validatorsABI, ...config } as UsePrepareContractWriteConfig<
    typeof validatorsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareValidatorsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareValidatorsSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareValidatorsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareValidatorsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setCommissionUpdateDelay"`.
 */
export function usePrepareValidatorsSetCommissionUpdateDelay(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setCommissionUpdateDelay'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setCommissionUpdateDelay',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setCommissionUpdateDelay'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setMaxGroupSize"`.
 */
export function usePrepareValidatorsSetMaxGroupSize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setMaxGroupSize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setMaxGroupSize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setMaxGroupSize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setMembershipHistoryLength"`.
 */
export function usePrepareValidatorsSetMembershipHistoryLength(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setMembershipHistoryLength'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setMembershipHistoryLength',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setMembershipHistoryLength'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorScoreParameters"`.
 */
export function usePrepareValidatorsSetValidatorScoreParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorScoreParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setValidatorScoreParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorScoreParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setGroupLockedGoldRequirements"`.
 */
export function usePrepareValidatorsSetGroupLockedGoldRequirements(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setGroupLockedGoldRequirements'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setGroupLockedGoldRequirements',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setGroupLockedGoldRequirements'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setValidatorLockedGoldRequirements"`.
 */
export function usePrepareValidatorsSetValidatorLockedGoldRequirements(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorLockedGoldRequirements'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setValidatorLockedGoldRequirements',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setValidatorLockedGoldRequirements'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"registerValidator"`.
 */
export function usePrepareValidatorsRegisterValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'registerValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'registerValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'registerValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateValidatorScoreFromSigner"`.
 */
export function usePrepareValidatorsUpdateValidatorScoreFromSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'updateValidatorScoreFromSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'updateValidatorScoreFromSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'updateValidatorScoreFromSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"distributeEpochPaymentsFromSigner"`.
 */
export function usePrepareValidatorsDistributeEpochPaymentsFromSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'distributeEpochPaymentsFromSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'distributeEpochPaymentsFromSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'distributeEpochPaymentsFromSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deregisterValidator"`.
 */
export function usePrepareValidatorsDeregisterValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'deregisterValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'deregisterValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'deregisterValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"affiliate"`.
 */
export function usePrepareValidatorsAffiliate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'affiliate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'affiliate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'affiliate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deaffiliate"`.
 */
export function usePrepareValidatorsDeaffiliate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'deaffiliate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'deaffiliate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'deaffiliate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateBlsPublicKey"`.
 */
export function usePrepareValidatorsUpdateBlsPublicKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'updateBlsPublicKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'updateBlsPublicKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'updateBlsPublicKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateEcdsaPublicKey"`.
 */
export function usePrepareValidatorsUpdateEcdsaPublicKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'updateEcdsaPublicKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'updateEcdsaPublicKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'updateEcdsaPublicKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updatePublicKeys"`.
 */
export function usePrepareValidatorsUpdatePublicKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'updatePublicKeys'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'updatePublicKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'updatePublicKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"registerValidatorGroup"`.
 */
export function usePrepareValidatorsRegisterValidatorGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'registerValidatorGroup'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'registerValidatorGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'registerValidatorGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"deregisterValidatorGroup"`.
 */
export function usePrepareValidatorsDeregisterValidatorGroup(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'deregisterValidatorGroup'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'deregisterValidatorGroup',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'deregisterValidatorGroup'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addMember"`.
 */
export function usePrepareValidatorsAddMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'addMember'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'addMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'addMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"addFirstMember"`.
 */
export function usePrepareValidatorsAddFirstMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'addFirstMember'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'addFirstMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'addFirstMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"removeMember"`.
 */
export function usePrepareValidatorsRemoveMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'removeMember'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'removeMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'removeMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"reorderMember"`.
 */
export function usePrepareValidatorsReorderMember(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'reorderMember'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'reorderMember',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'reorderMember'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setNextCommissionUpdate"`.
 */
export function usePrepareValidatorsSetNextCommissionUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setNextCommissionUpdate'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setNextCommissionUpdate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setNextCommissionUpdate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"updateCommission"`.
 */
export function usePrepareValidatorsUpdateCommission(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'updateCommission'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'updateCommission',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'updateCommission'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"forceDeaffiliateIfValidator"`.
 */
export function usePrepareValidatorsForceDeaffiliateIfValidator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'forceDeaffiliateIfValidator'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'forceDeaffiliateIfValidator',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'forceDeaffiliateIfValidator'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setSlashingMultiplierResetPeriod"`.
 */
export function usePrepareValidatorsSetSlashingMultiplierResetPeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setSlashingMultiplierResetPeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setSlashingMultiplierResetPeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setSlashingMultiplierResetPeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"setDowntimeGracePeriod"`.
 */
export function usePrepareValidatorsSetDowntimeGracePeriod(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'setDowntimeGracePeriod'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'setDowntimeGracePeriod',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'setDowntimeGracePeriod'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"resetSlashingMultiplier"`.
 */
export function usePrepareValidatorsResetSlashingMultiplier(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'resetSlashingMultiplier'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'resetSlashingMultiplier',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'resetSlashingMultiplier'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link validatorsABI}__ and `functionName` set to `"halveSlashingMultiplier"`.
 */
export function usePrepareValidatorsHalveSlashingMultiplier(
  config: Omit<
    UsePrepareContractWriteConfig<typeof validatorsABI, 'halveSlashingMultiplier'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: validatorsABI,
    functionName: 'halveSlashingMultiplier',
    ...config,
  } as UsePrepareContractWriteConfig<typeof validatorsABI, 'halveSlashingMultiplier'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__.
 */
export function useValidatorsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof validatorsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: validatorsABI, ...config } as UseContractEventConfig<
    typeof validatorsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"CommissionUpdateDelaySet"`.
 */
export function useValidatorsCommissionUpdateDelaySetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'CommissionUpdateDelaySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'CommissionUpdateDelaySet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'CommissionUpdateDelaySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"GroupLockedGoldRequirementsSet"`.
 */
export function useValidatorsGroupLockedGoldRequirementsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'GroupLockedGoldRequirementsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'GroupLockedGoldRequirementsSet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'GroupLockedGoldRequirementsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"MaxGroupSizeSet"`.
 */
export function useValidatorsMaxGroupSizeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'MaxGroupSizeSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'MaxGroupSizeSet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'MaxGroupSizeSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"MembershipHistoryLengthSet"`.
 */
export function useValidatorsMembershipHistoryLengthSetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'MembershipHistoryLengthSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'MembershipHistoryLengthSet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'MembershipHistoryLengthSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useValidatorsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useValidatorsRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorAffiliated"`.
 */
export function useValidatorsValidatorAffiliatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorAffiliated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorAffiliated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorAffiliated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorBlsPublicKeyUpdated"`.
 */
export function useValidatorsValidatorBlsPublicKeyUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorBlsPublicKeyUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorBlsPublicKeyUpdated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorBlsPublicKeyUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorDeaffiliated"`.
 */
export function useValidatorsValidatorDeaffiliatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorDeaffiliated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorDeaffiliated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorDeaffiliated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorDeregistered"`.
 */
export function useValidatorsValidatorDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorDeregistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorDeregistered',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorEcdsaPublicKeyUpdated"`.
 */
export function useValidatorsValidatorEcdsaPublicKeyUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorEcdsaPublicKeyUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorEcdsaPublicKeyUpdated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorEcdsaPublicKeyUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorEpochPaymentDistributed"`.
 */
export function useValidatorsValidatorEpochPaymentDistributedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorEpochPaymentDistributed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorEpochPaymentDistributed',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorEpochPaymentDistributed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupCommissionUpdateQueued"`.
 */
export function useValidatorsValidatorGroupCommissionUpdateQueuedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupCommissionUpdateQueued'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupCommissionUpdateQueued',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupCommissionUpdateQueued'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupCommissionUpdated"`.
 */
export function useValidatorsValidatorGroupCommissionUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupCommissionUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupCommissionUpdated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupCommissionUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupDeregistered"`.
 */
export function useValidatorsValidatorGroupDeregisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupDeregistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupDeregistered',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupDeregistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupMemberAdded"`.
 */
export function useValidatorsValidatorGroupMemberAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupMemberAdded',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupMemberRemoved"`.
 */
export function useValidatorsValidatorGroupMemberRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupMemberRemoved',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupMemberReordered"`.
 */
export function useValidatorsValidatorGroupMemberReorderedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberReordered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupMemberReordered',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupMemberReordered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorGroupRegistered"`.
 */
export function useValidatorsValidatorGroupRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupRegistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorGroupRegistered',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorGroupRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorLockedGoldRequirementsSet"`.
 */
export function useValidatorsValidatorLockedGoldRequirementsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorLockedGoldRequirementsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorLockedGoldRequirementsSet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorLockedGoldRequirementsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorRegistered"`.
 */
export function useValidatorsValidatorRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorRegistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorRegistered',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorScoreParametersSet"`.
 */
export function useValidatorsValidatorScoreParametersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorScoreParametersSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorScoreParametersSet',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorScoreParametersSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link validatorsABI}__ and `eventName` set to `"ValidatorScoreUpdated"`.
 */
export function useValidatorsValidatorScoreUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof validatorsABI, 'ValidatorScoreUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: validatorsABI,
    eventName: 'ValidatorScoreUpdated',
    ...config,
  } as UseContractEventConfig<typeof validatorsABI, 'ValidatorScoreUpdated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__.
 */
export function useReleaseGoldRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: releaseGoldABI, ...config } as UseContractReadConfig<
    typeof releaseGoldABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"EXPIRATION_TIME"`.
 */
export function useReleaseGoldExpirationTime<
  TFunctionName extends 'EXPIRATION_TIME',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'EXPIRATION_TIME',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"beneficiary"`.
 */
export function useReleaseGoldBeneficiary<
  TFunctionName extends 'beneficiary',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'beneficiary',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"canValidate"`.
 */
export function useReleaseGoldCanValidate<
  TFunctionName extends 'canValidate',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'canValidate',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"canVote"`.
 */
export function useReleaseGoldCanVote<
  TFunctionName extends 'canVote',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'canVote',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"initialized"`.
 */
export function useReleaseGoldInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"isOwner"`.
 */
export function useReleaseGoldIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"liquidityProvisionMet"`.
 */
export function useReleaseGoldLiquidityProvisionMet<
  TFunctionName extends 'liquidityProvisionMet',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'liquidityProvisionMet',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"maxDistribution"`.
 */
export function useReleaseGoldMaxDistribution<
  TFunctionName extends 'maxDistribution',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'maxDistribution',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"owner"`.
 */
export function useReleaseGoldOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"refundAddress"`.
 */
export function useReleaseGoldRefundAddress<
  TFunctionName extends 'refundAddress',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'refundAddress',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"registry"`.
 */
export function useReleaseGoldRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"releaseOwner"`.
 */
export function useReleaseGoldReleaseOwner<
  TFunctionName extends 'releaseOwner',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'releaseOwner',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"releaseSchedule"`.
 */
export function useReleaseGoldReleaseSchedule<
  TFunctionName extends 'releaseSchedule',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'releaseSchedule',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revocationInfo"`.
 */
export function useReleaseGoldRevocationInfo<
  TFunctionName extends 'revocationInfo',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'revocationInfo',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"totalWithdrawn"`.
 */
export function useReleaseGoldTotalWithdrawn<
  TFunctionName extends 'totalWithdrawn',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'totalWithdrawn',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"isFunded"`.
 */
export function useReleaseGoldIsFunded<
  TFunctionName extends 'isFunded',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'isFunded',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"isRevoked"`.
 */
export function useReleaseGoldIsRevoked<
  TFunctionName extends 'isRevoked',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'isRevoked',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getTotalBalance"`.
 */
export function useReleaseGoldGetTotalBalance<
  TFunctionName extends 'getTotalBalance',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getTotalBalance',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getRemainingTotalBalance"`.
 */
export function useReleaseGoldGetRemainingTotalBalance<
  TFunctionName extends 'getRemainingTotalBalance',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getRemainingTotalBalance',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getRemainingUnlockedBalance"`.
 */
export function useReleaseGoldGetRemainingUnlockedBalance<
  TFunctionName extends 'getRemainingUnlockedBalance',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getRemainingUnlockedBalance',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getRemainingLockedBalance"`.
 */
export function useReleaseGoldGetRemainingLockedBalance<
  TFunctionName extends 'getRemainingLockedBalance',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getRemainingLockedBalance',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getCurrentReleasedTotalAmount"`.
 */
export function useReleaseGoldGetCurrentReleasedTotalAmount<
  TFunctionName extends 'getCurrentReleasedTotalAmount',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getCurrentReleasedTotalAmount',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"getWithdrawableAmount"`.
 */
export function useReleaseGoldGetWithdrawableAmount<
  TFunctionName extends 'getWithdrawableAmount',
  TSelectData = ReadContractResult<typeof releaseGoldABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: releaseGoldABI,
    functionName: 'getWithdrawableAmount',
    ...config,
  } as UseContractReadConfig<typeof releaseGoldABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__.
 */
export function useReleaseGoldWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof releaseGoldABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, TFunctionName, TMode>({
    abi: releaseGoldABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useReleaseGoldRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'renounceOwnership', TMode>({
    abi: releaseGoldABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useReleaseGoldSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setRegistry', TMode>({
    abi: releaseGoldABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useReleaseGoldTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'transferOwnership', TMode>({
    abi: releaseGoldABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"transfer"`.
 */
export function useReleaseGoldTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'transfer', TMode>({
    abi: releaseGoldABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"genericTransfer"`.
 */
export function useReleaseGoldGenericTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'genericTransfer'>['request']['abi'],
        'genericTransfer',
        TMode
      > & { functionName?: 'genericTransfer' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'genericTransfer', TMode> & {
        abi?: never
        functionName?: 'genericTransfer'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'genericTransfer', TMode>({
    abi: releaseGoldABI,
    functionName: 'genericTransfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"initialize"`.
 */
export function useReleaseGoldInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'initialize', TMode>({
    abi: releaseGoldABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setLiquidityProvision"`.
 */
export function useReleaseGoldSetLiquidityProvision<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'setLiquidityProvision'
        >['request']['abi'],
        'setLiquidityProvision',
        TMode
      > & { functionName?: 'setLiquidityProvision' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setLiquidityProvision', TMode> & {
        abi?: never
        functionName?: 'setLiquidityProvision'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setLiquidityProvision', TMode>({
    abi: releaseGoldABI,
    functionName: 'setLiquidityProvision',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setCanExpire"`.
 */
export function useReleaseGoldSetCanExpire<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setCanExpire'>['request']['abi'],
        'setCanExpire',
        TMode
      > & { functionName?: 'setCanExpire' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setCanExpire', TMode> & {
        abi?: never
        functionName?: 'setCanExpire'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setCanExpire', TMode>({
    abi: releaseGoldABI,
    functionName: 'setCanExpire',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setMaxDistribution"`.
 */
export function useReleaseGoldSetMaxDistribution<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setMaxDistribution'>['request']['abi'],
        'setMaxDistribution',
        TMode
      > & { functionName?: 'setMaxDistribution' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setMaxDistribution', TMode> & {
        abi?: never
        functionName?: 'setMaxDistribution'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setMaxDistribution', TMode>({
    abi: releaseGoldABI,
    functionName: 'setMaxDistribution',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setBeneficiary"`.
 */
export function useReleaseGoldSetBeneficiary<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setBeneficiary'>['request']['abi'],
        'setBeneficiary',
        TMode
      > & { functionName?: 'setBeneficiary' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setBeneficiary', TMode> & {
        abi?: never
        functionName?: 'setBeneficiary'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setBeneficiary', TMode>({
    abi: releaseGoldABI,
    functionName: 'setBeneficiary',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"withdraw"`.
 */
export function useReleaseGoldWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'withdraw', TMode>({
    abi: releaseGoldABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"refundAndFinalize"`.
 */
export function useReleaseGoldRefundAndFinalize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'refundAndFinalize'>['request']['abi'],
        'refundAndFinalize',
        TMode
      > & { functionName?: 'refundAndFinalize' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'refundAndFinalize', TMode> & {
        abi?: never
        functionName?: 'refundAndFinalize'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'refundAndFinalize', TMode>({
    abi: releaseGoldABI,
    functionName: 'refundAndFinalize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revoke"`.
 */
export function useReleaseGoldRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'revoke', TMode>({
    abi: releaseGoldABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"expire"`.
 */
export function useReleaseGoldExpire<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'expire'>['request']['abi'],
        'expire',
        TMode
      > & { functionName?: 'expire' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'expire', TMode> & {
        abi?: never
        functionName?: 'expire'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'expire', TMode>({
    abi: releaseGoldABI,
    functionName: 'expire',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"lockGold"`.
 */
export function useReleaseGoldLockGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'lockGold'>['request']['abi'],
        'lockGold',
        TMode
      > & { functionName?: 'lockGold' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'lockGold', TMode> & {
        abi?: never
        functionName?: 'lockGold'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'lockGold', TMode>({
    abi: releaseGoldABI,
    functionName: 'lockGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"unlockGold"`.
 */
export function useReleaseGoldUnlockGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'unlockGold'>['request']['abi'],
        'unlockGold',
        TMode
      > & { functionName?: 'unlockGold' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'unlockGold', TMode> & {
        abi?: never
        functionName?: 'unlockGold'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'unlockGold', TMode>({
    abi: releaseGoldABI,
    functionName: 'unlockGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"relockGold"`.
 */
export function useReleaseGoldRelockGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'relockGold'>['request']['abi'],
        'relockGold',
        TMode
      > & { functionName?: 'relockGold' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'relockGold', TMode> & {
        abi?: never
        functionName?: 'relockGold'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'relockGold', TMode>({
    abi: releaseGoldABI,
    functionName: 'relockGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"withdrawLockedGold"`.
 */
export function useReleaseGoldWithdrawLockedGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'withdrawLockedGold'>['request']['abi'],
        'withdrawLockedGold',
        TMode
      > & { functionName?: 'withdrawLockedGold' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'withdrawLockedGold', TMode> & {
        abi?: never
        functionName?: 'withdrawLockedGold'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'withdrawLockedGold', TMode>({
    abi: releaseGoldABI,
    functionName: 'withdrawLockedGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeVoteSigner"`.
 */
export function useReleaseGoldAuthorizeVoteSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'authorizeVoteSigner'>['request']['abi'],
        'authorizeVoteSigner',
        TMode
      > & { functionName?: 'authorizeVoteSigner' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'authorizeVoteSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeVoteSigner'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'authorizeVoteSigner', TMode>({
    abi: releaseGoldABI,
    functionName: 'authorizeVoteSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSigner"`.
 */
export function useReleaseGoldAuthorizeValidatorSigner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'authorizeValidatorSigner'
        >['request']['abi'],
        'authorizeValidatorSigner',
        TMode
      > & { functionName?: 'authorizeValidatorSigner' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeValidatorSigner'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'authorizeValidatorSigner', TMode>({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSignerWithPublicKey"`.
 */
export function useReleaseGoldAuthorizeValidatorSignerWithPublicKey<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'authorizeValidatorSignerWithPublicKey'
        >['request']['abi'],
        'authorizeValidatorSignerWithPublicKey',
        TMode
      > & { functionName?: 'authorizeValidatorSignerWithPublicKey' }
    : UseContractWriteConfig<
        typeof releaseGoldABI,
        'authorizeValidatorSignerWithPublicKey',
        TMode
      > & {
        abi?: never
        functionName?: 'authorizeValidatorSignerWithPublicKey'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'authorizeValidatorSignerWithPublicKey', TMode>({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSignerWithPublicKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSignerWithKeys"`.
 */
export function useReleaseGoldAuthorizeValidatorSignerWithKeys<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'authorizeValidatorSignerWithKeys'
        >['request']['abi'],
        'authorizeValidatorSignerWithKeys',
        TMode
      > & { functionName?: 'authorizeValidatorSignerWithKeys' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSignerWithKeys', TMode> & {
        abi?: never
        functionName?: 'authorizeValidatorSignerWithKeys'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'authorizeValidatorSignerWithKeys', TMode>({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSignerWithKeys',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeAttestationSigner"`.
 */
export function useReleaseGoldAuthorizeAttestationSigner<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'authorizeAttestationSigner'
        >['request']['abi'],
        'authorizeAttestationSigner',
        TMode
      > & { functionName?: 'authorizeAttestationSigner' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'authorizeAttestationSigner', TMode> & {
        abi?: never
        functionName?: 'authorizeAttestationSigner'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'authorizeAttestationSigner', TMode>({
    abi: releaseGoldABI,
    functionName: 'authorizeAttestationSigner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccount"`.
 */
export function useReleaseGoldSetAccount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setAccount'>['request']['abi'],
        'setAccount',
        TMode
      > & { functionName?: 'setAccount' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setAccount', TMode> & {
        abi?: never
        functionName?: 'setAccount'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setAccount', TMode>({
    abi: releaseGoldABI,
    functionName: 'setAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"createAccount"`.
 */
export function useReleaseGoldCreateAccount<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'createAccount'>['request']['abi'],
        'createAccount',
        TMode
      > & { functionName?: 'createAccount' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'createAccount', TMode> & {
        abi?: never
        functionName?: 'createAccount'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'createAccount', TMode>({
    abi: releaseGoldABI,
    functionName: 'createAccount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountName"`.
 */
export function useReleaseGoldSetAccountName<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'setAccountName'>['request']['abi'],
        'setAccountName',
        TMode
      > & { functionName?: 'setAccountName' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setAccountName', TMode> & {
        abi?: never
        functionName?: 'setAccountName'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setAccountName', TMode>({
    abi: releaseGoldABI,
    functionName: 'setAccountName',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountWalletAddress"`.
 */
export function useReleaseGoldSetAccountWalletAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'setAccountWalletAddress'
        >['request']['abi'],
        'setAccountWalletAddress',
        TMode
      > & { functionName?: 'setAccountWalletAddress' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setAccountWalletAddress', TMode> & {
        abi?: never
        functionName?: 'setAccountWalletAddress'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setAccountWalletAddress', TMode>({
    abi: releaseGoldABI,
    functionName: 'setAccountWalletAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountDataEncryptionKey"`.
 */
export function useReleaseGoldSetAccountDataEncryptionKey<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'setAccountDataEncryptionKey'
        >['request']['abi'],
        'setAccountDataEncryptionKey',
        TMode
      > & { functionName?: 'setAccountDataEncryptionKey' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setAccountDataEncryptionKey', TMode> & {
        abi?: never
        functionName?: 'setAccountDataEncryptionKey'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setAccountDataEncryptionKey', TMode>({
    abi: releaseGoldABI,
    functionName: 'setAccountDataEncryptionKey',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountMetadataURL"`.
 */
export function useReleaseGoldSetAccountMetadataUrl<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof releaseGoldABI,
          'setAccountMetadataURL'
        >['request']['abi'],
        'setAccountMetadataURL',
        TMode
      > & { functionName?: 'setAccountMetadataURL' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'setAccountMetadataURL', TMode> & {
        abi?: never
        functionName?: 'setAccountMetadataURL'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'setAccountMetadataURL', TMode>({
    abi: releaseGoldABI,
    functionName: 'setAccountMetadataURL',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revokeActive"`.
 */
export function useReleaseGoldRevokeActive<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'revokeActive'>['request']['abi'],
        'revokeActive',
        TMode
      > & { functionName?: 'revokeActive' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'revokeActive', TMode> & {
        abi?: never
        functionName?: 'revokeActive'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'revokeActive', TMode>({
    abi: releaseGoldABI,
    functionName: 'revokeActive',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revokePending"`.
 */
export function useReleaseGoldRevokePending<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof releaseGoldABI, 'revokePending'>['request']['abi'],
        'revokePending',
        TMode
      > & { functionName?: 'revokePending' }
    : UseContractWriteConfig<typeof releaseGoldABI, 'revokePending', TMode> & {
        abi?: never
        functionName?: 'revokePending'
      } = {} as any
) {
  return useContractWrite<typeof releaseGoldABI, 'revokePending', TMode>({
    abi: releaseGoldABI,
    functionName: 'revokePending',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__.
 */
export function usePrepareReleaseGoldWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareReleaseGoldRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareReleaseGoldSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareReleaseGoldTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareReleaseGoldTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"genericTransfer"`.
 */
export function usePrepareReleaseGoldGenericTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'genericTransfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'genericTransfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'genericTransfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareReleaseGoldInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setLiquidityProvision"`.
 */
export function usePrepareReleaseGoldSetLiquidityProvision(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setLiquidityProvision'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setLiquidityProvision',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setLiquidityProvision'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setCanExpire"`.
 */
export function usePrepareReleaseGoldSetCanExpire(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setCanExpire'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setCanExpire',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setCanExpire'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setMaxDistribution"`.
 */
export function usePrepareReleaseGoldSetMaxDistribution(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setMaxDistribution'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setMaxDistribution',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setMaxDistribution'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setBeneficiary"`.
 */
export function usePrepareReleaseGoldSetBeneficiary(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setBeneficiary'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setBeneficiary',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setBeneficiary'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareReleaseGoldWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"refundAndFinalize"`.
 */
export function usePrepareReleaseGoldRefundAndFinalize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'refundAndFinalize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'refundAndFinalize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'refundAndFinalize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareReleaseGoldRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"expire"`.
 */
export function usePrepareReleaseGoldExpire(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'expire'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'expire',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'expire'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"lockGold"`.
 */
export function usePrepareReleaseGoldLockGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'lockGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'lockGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'lockGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"unlockGold"`.
 */
export function usePrepareReleaseGoldUnlockGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'unlockGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'unlockGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'unlockGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"relockGold"`.
 */
export function usePrepareReleaseGoldRelockGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'relockGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'relockGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'relockGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"withdrawLockedGold"`.
 */
export function usePrepareReleaseGoldWithdrawLockedGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'withdrawLockedGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'withdrawLockedGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'withdrawLockedGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeVoteSigner"`.
 */
export function usePrepareReleaseGoldAuthorizeVoteSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeVoteSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'authorizeVoteSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeVoteSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSigner"`.
 */
export function usePrepareReleaseGoldAuthorizeValidatorSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSignerWithPublicKey"`.
 */
export function usePrepareReleaseGoldAuthorizeValidatorSignerWithPublicKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSignerWithPublicKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSignerWithPublicKey',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof releaseGoldABI,
    'authorizeValidatorSignerWithPublicKey'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeValidatorSignerWithKeys"`.
 */
export function usePrepareReleaseGoldAuthorizeValidatorSignerWithKeys(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSignerWithKeys'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'authorizeValidatorSignerWithKeys',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeValidatorSignerWithKeys'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"authorizeAttestationSigner"`.
 */
export function usePrepareReleaseGoldAuthorizeAttestationSigner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeAttestationSigner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'authorizeAttestationSigner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'authorizeAttestationSigner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccount"`.
 */
export function usePrepareReleaseGoldSetAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setAccount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"createAccount"`.
 */
export function usePrepareReleaseGoldCreateAccount(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'createAccount'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'createAccount',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'createAccount'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountName"`.
 */
export function usePrepareReleaseGoldSetAccountName(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountName'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setAccountName',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountName'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountWalletAddress"`.
 */
export function usePrepareReleaseGoldSetAccountWalletAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountWalletAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setAccountWalletAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountWalletAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountDataEncryptionKey"`.
 */
export function usePrepareReleaseGoldSetAccountDataEncryptionKey(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountDataEncryptionKey'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setAccountDataEncryptionKey',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountDataEncryptionKey'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"setAccountMetadataURL"`.
 */
export function usePrepareReleaseGoldSetAccountMetadataUrl(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountMetadataURL'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'setAccountMetadataURL',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'setAccountMetadataURL'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revokeActive"`.
 */
export function usePrepareReleaseGoldRevokeActive(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revokeActive'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'revokeActive',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revokeActive'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link releaseGoldABI}__ and `functionName` set to `"revokePending"`.
 */
export function usePrepareReleaseGoldRevokePending(
  config: Omit<
    UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revokePending'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: releaseGoldABI,
    functionName: 'revokePending',
    ...config,
  } as UsePrepareContractWriteConfig<typeof releaseGoldABI, 'revokePending'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__.
 */
export function useReleaseGoldEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof releaseGoldABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: releaseGoldABI, ...config } as UseContractEventConfig<
    typeof releaseGoldABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"BeneficiarySet"`.
 */
export function useReleaseGoldBeneficiarySetEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'BeneficiarySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'BeneficiarySet',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'BeneficiarySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"CanExpireSet"`.
 */
export function useReleaseGoldCanExpireSetEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'CanExpireSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'CanExpireSet',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'CanExpireSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"DistributionLimitSet"`.
 */
export function useReleaseGoldDistributionLimitSetEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'DistributionLimitSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'DistributionLimitSet',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'DistributionLimitSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"LiquidityProvisionSet"`.
 */
export function useReleaseGoldLiquidityProvisionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'LiquidityProvisionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'LiquidityProvisionSet',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'LiquidityProvisionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useReleaseGoldOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useReleaseGoldRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"ReleaseGoldInstanceCreated"`.
 */
export function useReleaseGoldReleaseGoldInstanceCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'ReleaseGoldInstanceCreated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'ReleaseGoldInstanceCreated',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'ReleaseGoldInstanceCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"ReleaseGoldInstanceDestroyed"`.
 */
export function useReleaseGoldReleaseGoldInstanceDestroyedEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'ReleaseGoldInstanceDestroyed'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'ReleaseGoldInstanceDestroyed',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'ReleaseGoldInstanceDestroyed'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link releaseGoldABI}__ and `eventName` set to `"ReleaseScheduleRevoked"`.
 */
export function useReleaseGoldReleaseScheduleRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof releaseGoldABI, 'ReleaseScheduleRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: releaseGoldABI,
    eventName: 'ReleaseScheduleRevoked',
    ...config,
  } as UseContractEventConfig<typeof releaseGoldABI, 'ReleaseScheduleRevoked'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__.
 */
export function useAttestationsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: attestationsABI, ...config } as UseContractReadConfig<
    typeof attestationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"attestationExpiryBlocks"`.
 */
export function useAttestationsAttestationExpiryBlocks<
  TFunctionName extends 'attestationExpiryBlocks',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'attestationExpiryBlocks',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"attestationRequestFees"`.
 */
export function useAttestationsAttestationRequestFees<
  TFunctionName extends 'attestationRequestFees',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'attestationRequestFees',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useAttestationsCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useAttestationsFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useAttestationsGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useAttestationsGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useAttestationsGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useAttestationsGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useAttestationsGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useAttestationsGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useAttestationsHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"initialized"`.
 */
export function useAttestationsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useAttestationsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"maxAttestations"`.
 */
export function useAttestationsMaxAttestations<
  TFunctionName extends 'maxAttestations',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'maxAttestations',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useAttestationsMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useAttestationsMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useAttestationsNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useAttestationsNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"owner"`.
 */
export function useAttestationsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"pendingWithdrawals"`.
 */
export function useAttestationsPendingWithdrawals<
  TFunctionName extends 'pendingWithdrawals',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'pendingWithdrawals',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"registry"`.
 */
export function useAttestationsRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"selectIssuersWaitBlocks"`.
 */
export function useAttestationsSelectIssuersWaitBlocks<
  TFunctionName extends 'selectIssuersWaitBlocks',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'selectIssuersWaitBlocks',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"transferApprovals"`.
 */
export function useAttestationsTransferApprovals<
  TFunctionName extends 'transferApprovals',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'transferApprovals',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useAttestationsValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useAttestationsValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useAttestationsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getUnselectedRequest"`.
 */
export function useAttestationsGetUnselectedRequest<
  TFunctionName extends 'getUnselectedRequest',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getUnselectedRequest',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getAttestationIssuers"`.
 */
export function useAttestationsGetAttestationIssuers<
  TFunctionName extends 'getAttestationIssuers',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getAttestationIssuers',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getAttestationStats"`.
 */
export function useAttestationsGetAttestationStats<
  TFunctionName extends 'getAttestationStats',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getAttestationStats',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"batchGetAttestationStats"`.
 */
export function useAttestationsBatchGetAttestationStats<
  TFunctionName extends 'batchGetAttestationStats',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'batchGetAttestationStats',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getAttestationState"`.
 */
export function useAttestationsGetAttestationState<
  TFunctionName extends 'getAttestationState',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getAttestationState',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getCompletableAttestations"`.
 */
export function useAttestationsGetCompletableAttestations<
  TFunctionName extends 'getCompletableAttestations',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getCompletableAttestations',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getAttestationRequestFee"`.
 */
export function useAttestationsGetAttestationRequestFee<
  TFunctionName extends 'getAttestationRequestFee',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getAttestationRequestFee',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"getMaxAttestations"`.
 */
export function useAttestationsGetMaxAttestations<
  TFunctionName extends 'getMaxAttestations',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'getMaxAttestations',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"validateAttestationCode"`.
 */
export function useAttestationsValidateAttestationCode<
  TFunctionName extends 'validateAttestationCode',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'validateAttestationCode',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"lookupAccountsForIdentifier"`.
 */
export function useAttestationsLookupAccountsForIdentifier<
  TFunctionName extends 'lookupAccountsForIdentifier',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'lookupAccountsForIdentifier',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"requireNAttestationsRequested"`.
 */
export function useAttestationsRequireNAttestationsRequested<
  TFunctionName extends 'requireNAttestationsRequested',
  TSelectData = ReadContractResult<typeof attestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: attestationsABI,
    functionName: 'requireNAttestationsRequested',
    ...config,
  } as UseContractReadConfig<typeof attestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__.
 */
export function useAttestationsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof attestationsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, TFunctionName, TMode>({
    abi: attestationsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useAttestationsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof attestationsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'renounceOwnership', TMode>({
    abi: attestationsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useAttestationsSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof attestationsABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'setRegistry', TMode>({
    abi: attestationsABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useAttestationsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof attestationsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'transferOwnership', TMode>({
    abi: attestationsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"initialize"`.
 */
export function useAttestationsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof attestationsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'initialize', TMode>({
    abi: attestationsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"revoke"`.
 */
export function useAttestationsRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof attestationsABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'revoke', TMode>({
    abi: attestationsABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"withdraw"`.
 */
export function useAttestationsWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof attestationsABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'withdraw', TMode>({
    abi: attestationsABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setAttestationRequestFee"`.
 */
export function useAttestationsSetAttestationRequestFee<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsABI,
          'setAttestationRequestFee'
        >['request']['abi'],
        'setAttestationRequestFee',
        TMode
      > & { functionName?: 'setAttestationRequestFee' }
    : UseContractWriteConfig<typeof attestationsABI, 'setAttestationRequestFee', TMode> & {
        abi?: never
        functionName?: 'setAttestationRequestFee'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'setAttestationRequestFee', TMode>({
    abi: attestationsABI,
    functionName: 'setAttestationRequestFee',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setAttestationExpiryBlocks"`.
 */
export function useAttestationsSetAttestationExpiryBlocks<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsABI,
          'setAttestationExpiryBlocks'
        >['request']['abi'],
        'setAttestationExpiryBlocks',
        TMode
      > & { functionName?: 'setAttestationExpiryBlocks' }
    : UseContractWriteConfig<typeof attestationsABI, 'setAttestationExpiryBlocks', TMode> & {
        abi?: never
        functionName?: 'setAttestationExpiryBlocks'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'setAttestationExpiryBlocks', TMode>({
    abi: attestationsABI,
    functionName: 'setAttestationExpiryBlocks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setSelectIssuersWaitBlocks"`.
 */
export function useAttestationsSetSelectIssuersWaitBlocks<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof attestationsABI,
          'setSelectIssuersWaitBlocks'
        >['request']['abi'],
        'setSelectIssuersWaitBlocks',
        TMode
      > & { functionName?: 'setSelectIssuersWaitBlocks' }
    : UseContractWriteConfig<typeof attestationsABI, 'setSelectIssuersWaitBlocks', TMode> & {
        abi?: never
        functionName?: 'setSelectIssuersWaitBlocks'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'setSelectIssuersWaitBlocks', TMode>({
    abi: attestationsABI,
    functionName: 'setSelectIssuersWaitBlocks',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setMaxAttestations"`.
 */
export function useAttestationsSetMaxAttestations<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof attestationsABI, 'setMaxAttestations'>['request']['abi'],
        'setMaxAttestations',
        TMode
      > & { functionName?: 'setMaxAttestations' }
    : UseContractWriteConfig<typeof attestationsABI, 'setMaxAttestations', TMode> & {
        abi?: never
        functionName?: 'setMaxAttestations'
      } = {} as any
) {
  return useContractWrite<typeof attestationsABI, 'setMaxAttestations', TMode>({
    abi: attestationsABI,
    functionName: 'setMaxAttestations',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__.
 */
export function usePrepareAttestationsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareAttestationsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareAttestationsSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareAttestationsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareAttestationsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareAttestationsRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'revoke'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareAttestationsWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setAttestationRequestFee"`.
 */
export function usePrepareAttestationsSetAttestationRequestFee(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'setAttestationRequestFee'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'setAttestationRequestFee',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'setAttestationRequestFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setAttestationExpiryBlocks"`.
 */
export function usePrepareAttestationsSetAttestationExpiryBlocks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'setAttestationExpiryBlocks'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'setAttestationExpiryBlocks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'setAttestationExpiryBlocks'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setSelectIssuersWaitBlocks"`.
 */
export function usePrepareAttestationsSetSelectIssuersWaitBlocks(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'setSelectIssuersWaitBlocks'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'setSelectIssuersWaitBlocks',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'setSelectIssuersWaitBlocks'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link attestationsABI}__ and `functionName` set to `"setMaxAttestations"`.
 */
export function usePrepareAttestationsSetMaxAttestations(
  config: Omit<
    UsePrepareContractWriteConfig<typeof attestationsABI, 'setMaxAttestations'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: attestationsABI,
    functionName: 'setMaxAttestations',
    ...config,
  } as UsePrepareContractWriteConfig<typeof attestationsABI, 'setMaxAttestations'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__.
 */
export function useAttestationsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof attestationsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: attestationsABI, ...config } as UseContractEventConfig<
    typeof attestationsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationCompleted"`.
 */
export function useAttestationsAttestationCompletedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationCompleted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationCompleted',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationCompleted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationExpiryBlocksSet"`.
 */
export function useAttestationsAttestationExpiryBlocksSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationExpiryBlocksSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationExpiryBlocksSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationExpiryBlocksSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationIssuerSelected"`.
 */
export function useAttestationsAttestationIssuerSelectedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationIssuerSelected'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationIssuerSelected',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationIssuerSelected'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationRequestFeeSet"`.
 */
export function useAttestationsAttestationRequestFeeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationRequestFeeSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationRequestFeeSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationRequestFeeSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationsRequested"`.
 */
export function useAttestationsAttestationsRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationsRequested'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationsRequested',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationsRequested'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"AttestationsTransferred"`.
 */
export function useAttestationsAttestationsTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'AttestationsTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'AttestationsTransferred',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'AttestationsTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"MaxAttestationsSet"`.
 */
export function useAttestationsMaxAttestationsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'MaxAttestationsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'MaxAttestationsSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'MaxAttestationsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useAttestationsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useAttestationsRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"SelectIssuersWaitBlocksSet"`.
 */
export function useAttestationsSelectIssuersWaitBlocksSetEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'SelectIssuersWaitBlocksSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'SelectIssuersWaitBlocksSet',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'SelectIssuersWaitBlocksSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"TransferApproval"`.
 */
export function useAttestationsTransferApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'TransferApproval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'TransferApproval',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'TransferApproval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link attestationsABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function useAttestationsWithdrawalEvent(
  config: Omit<
    UseContractEventConfig<typeof attestationsABI, 'Withdrawal'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: attestationsABI,
    eventName: 'Withdrawal',
    ...config,
  } as UseContractEventConfig<typeof attestationsABI, 'Withdrawal'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__.
 */
export function useEscrowRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: escrowABI, ...config } as UseContractReadConfig<
    typeof escrowABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"MAX_TRUSTED_ISSUERS_PER_PAYMENT"`.
 */
export function useEscrowMaxTrustedIssuersPerPayment<
  TFunctionName extends 'MAX_TRUSTED_ISSUERS_PER_PAYMENT',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'MAX_TRUSTED_ISSUERS_PER_PAYMENT',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"defaultTrustedIssuers"`.
 */
export function useEscrowDefaultTrustedIssuers<
  TFunctionName extends 'defaultTrustedIssuers',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'defaultTrustedIssuers',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"escrowedPayments"`.
 */
export function useEscrowEscrowedPayments<
  TFunctionName extends 'escrowedPayments',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'escrowedPayments',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"initialized"`.
 */
export function useEscrowInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"isOwner"`.
 */
export function useEscrowIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"owner"`.
 */
export function useEscrowOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"receivedPaymentIds"`.
 */
export function useEscrowReceivedPaymentIds<
  TFunctionName extends 'receivedPaymentIds',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'receivedPaymentIds',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"registry"`.
 */
export function useEscrowRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"registryContract"`.
 */
export function useEscrowRegistryContract<
  TFunctionName extends 'registryContract',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'registryContract',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"sentPaymentIds"`.
 */
export function useEscrowSentPaymentIds<
  TFunctionName extends 'sentPaymentIds',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'sentPaymentIds',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"trustedIssuersPerPayment"`.
 */
export function useEscrowTrustedIssuersPerPayment<
  TFunctionName extends 'trustedIssuersPerPayment',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'trustedIssuersPerPayment',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useEscrowGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"getReceivedPaymentIds"`.
 */
export function useEscrowGetReceivedPaymentIds<
  TFunctionName extends 'getReceivedPaymentIds',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'getReceivedPaymentIds',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"getSentPaymentIds"`.
 */
export function useEscrowGetSentPaymentIds<
  TFunctionName extends 'getSentPaymentIds',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'getSentPaymentIds',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"getTrustedIssuersPerPayment"`.
 */
export function useEscrowGetTrustedIssuersPerPayment<
  TFunctionName extends 'getTrustedIssuersPerPayment',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'getTrustedIssuersPerPayment',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"getDefaultTrustedIssuers"`.
 */
export function useEscrowGetDefaultTrustedIssuers<
  TFunctionName extends 'getDefaultTrustedIssuers',
  TSelectData = ReadContractResult<typeof escrowABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: escrowABI,
    functionName: 'getDefaultTrustedIssuers',
    ...config,
  } as UseContractReadConfig<typeof escrowABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__.
 */
export function useEscrowWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof escrowABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, TFunctionName, TMode>({
    abi: escrowABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useEscrowRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof escrowABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'renounceOwnership', TMode>({
    abi: escrowABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useEscrowTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof escrowABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'transferOwnership', TMode>({
    abi: escrowABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"initialize"`.
 */
export function useEscrowInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof escrowABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'initialize', TMode>({
    abi: escrowABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"addDefaultTrustedIssuer"`.
 */
export function useEscrowAddDefaultTrustedIssuer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'addDefaultTrustedIssuer'>['request']['abi'],
        'addDefaultTrustedIssuer',
        TMode
      > & { functionName?: 'addDefaultTrustedIssuer' }
    : UseContractWriteConfig<typeof escrowABI, 'addDefaultTrustedIssuer', TMode> & {
        abi?: never
        functionName?: 'addDefaultTrustedIssuer'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'addDefaultTrustedIssuer', TMode>({
    abi: escrowABI,
    functionName: 'addDefaultTrustedIssuer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"removeDefaultTrustedIssuer"`.
 */
export function useEscrowRemoveDefaultTrustedIssuer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof escrowABI,
          'removeDefaultTrustedIssuer'
        >['request']['abi'],
        'removeDefaultTrustedIssuer',
        TMode
      > & { functionName?: 'removeDefaultTrustedIssuer' }
    : UseContractWriteConfig<typeof escrowABI, 'removeDefaultTrustedIssuer', TMode> & {
        abi?: never
        functionName?: 'removeDefaultTrustedIssuer'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'removeDefaultTrustedIssuer', TMode>({
    abi: escrowABI,
    functionName: 'removeDefaultTrustedIssuer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transfer"`.
 */
export function useEscrowTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof escrowABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'transfer', TMode>({
    abi: escrowABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transferWithTrustedIssuers"`.
 */
export function useEscrowTransferWithTrustedIssuers<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof escrowABI,
          'transferWithTrustedIssuers'
        >['request']['abi'],
        'transferWithTrustedIssuers',
        TMode
      > & { functionName?: 'transferWithTrustedIssuers' }
    : UseContractWriteConfig<typeof escrowABI, 'transferWithTrustedIssuers', TMode> & {
        abi?: never
        functionName?: 'transferWithTrustedIssuers'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'transferWithTrustedIssuers', TMode>({
    abi: escrowABI,
    functionName: 'transferWithTrustedIssuers',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"withdraw"`.
 */
export function useEscrowWithdraw<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'withdraw'>['request']['abi'],
        'withdraw',
        TMode
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<typeof escrowABI, 'withdraw', TMode> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'withdraw', TMode>({
    abi: escrowABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"revoke"`.
 */
export function useEscrowRevoke<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof escrowABI, 'revoke'>['request']['abi'],
        'revoke',
        TMode
      > & { functionName?: 'revoke' }
    : UseContractWriteConfig<typeof escrowABI, 'revoke', TMode> & {
        abi?: never
        functionName?: 'revoke'
      } = {} as any
) {
  return useContractWrite<typeof escrowABI, 'revoke', TMode>({
    abi: escrowABI,
    functionName: 'revoke',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__.
 */
export function usePrepareEscrowWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof escrowABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: escrowABI, ...config } as UsePrepareContractWriteConfig<
    typeof escrowABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareEscrowRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareEscrowTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareEscrowInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"addDefaultTrustedIssuer"`.
 */
export function usePrepareEscrowAddDefaultTrustedIssuer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'addDefaultTrustedIssuer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'addDefaultTrustedIssuer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'addDefaultTrustedIssuer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"removeDefaultTrustedIssuer"`.
 */
export function usePrepareEscrowRemoveDefaultTrustedIssuer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'removeDefaultTrustedIssuer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'removeDefaultTrustedIssuer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'removeDefaultTrustedIssuer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareEscrowTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"transferWithTrustedIssuers"`.
 */
export function usePrepareEscrowTransferWithTrustedIssuers(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'transferWithTrustedIssuers'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'transferWithTrustedIssuers',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'transferWithTrustedIssuers'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareEscrowWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'withdraw'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link escrowABI}__ and `functionName` set to `"revoke"`.
 */
export function usePrepareEscrowRevoke(
  config: Omit<
    UsePrepareContractWriteConfig<typeof escrowABI, 'revoke'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: escrowABI,
    functionName: 'revoke',
    ...config,
  } as UsePrepareContractWriteConfig<typeof escrowABI, 'revoke'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__.
 */
export function useEscrowEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof escrowABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: escrowABI, ...config } as UseContractEventConfig<
    typeof escrowABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"DefaultTrustedIssuerAdded"`.
 */
export function useEscrowDefaultTrustedIssuerAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'DefaultTrustedIssuerAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'DefaultTrustedIssuerAdded',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'DefaultTrustedIssuerAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"DefaultTrustedIssuerRemoved"`.
 */
export function useEscrowDefaultTrustedIssuerRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'DefaultTrustedIssuerRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'DefaultTrustedIssuerRemoved',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'DefaultTrustedIssuerRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useEscrowOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"Revocation"`.
 */
export function useEscrowRevocationEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'Revocation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'Revocation',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'Revocation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"Transfer"`.
 */
export function useEscrowTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"TrustedIssuersSet"`.
 */
export function useEscrowTrustedIssuersSetEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'TrustedIssuersSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'TrustedIssuersSet',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'TrustedIssuersSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"TrustedIssuersUnset"`.
 */
export function useEscrowTrustedIssuersUnsetEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'TrustedIssuersUnset'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'TrustedIssuersUnset',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'TrustedIssuersUnset'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link escrowABI}__ and `eventName` set to `"Withdrawal"`.
 */
export function useEscrowWithdrawalEvent(
  config: Omit<
    UseContractEventConfig<typeof escrowABI, 'Withdrawal'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: escrowABI,
    eventName: 'Withdrawal',
    ...config,
  } as UseContractEventConfig<typeof escrowABI, 'Withdrawal'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__.
 */
export function useFederatedAttestationsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: federatedAttestationsABI, ...config } as UseContractReadConfig<
    typeof federatedAttestationsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"EIP712_OWNERSHIP_ATTESTATION_TYPEHASH"`.
 */
export function useFederatedAttestationsEip712OwnershipAttestationTypehash<
  TFunctionName extends 'EIP712_OWNERSHIP_ATTESTATION_TYPEHASH',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'EIP712_OWNERSHIP_ATTESTATION_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"MAX_ATTESTATIONS_PER_IDENTIFIER"`.
 */
export function useFederatedAttestationsMaxAttestationsPerIdentifier<
  TFunctionName extends 'MAX_ATTESTATIONS_PER_IDENTIFIER',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'MAX_ATTESTATIONS_PER_IDENTIFIER',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"MAX_IDENTIFIERS_PER_ADDRESS"`.
 */
export function useFederatedAttestationsMaxIdentifiersPerAddress<
  TFunctionName extends 'MAX_IDENTIFIERS_PER_ADDRESS',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'MAX_IDENTIFIERS_PER_ADDRESS',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"addressToIdentifiers"`.
 */
export function useFederatedAttestationsAddressToIdentifiers<
  TFunctionName extends 'addressToIdentifiers',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'addressToIdentifiers',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"eip712DomainSeparator"`.
 */
export function useFederatedAttestationsEip712DomainSeparator<
  TFunctionName extends 'eip712DomainSeparator',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'eip712DomainSeparator',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"identifierToAttestations"`.
 */
export function useFederatedAttestationsIdentifierToAttestations<
  TFunctionName extends 'identifierToAttestations',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'identifierToAttestations',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"initialized"`.
 */
export function useFederatedAttestationsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useFederatedAttestationsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"owner"`.
 */
export function useFederatedAttestationsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"registryContract"`.
 */
export function useFederatedAttestationsRegistryContract<
  TFunctionName extends 'registryContract',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'registryContract',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"revokedAttestations"`.
 */
export function useFederatedAttestationsRevokedAttestations<
  TFunctionName extends 'revokedAttestations',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'revokedAttestations',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useFederatedAttestationsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"lookupAttestations"`.
 */
export function useFederatedAttestationsLookupAttestations<
  TFunctionName extends 'lookupAttestations',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'lookupAttestations',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"lookupIdentifiers"`.
 */
export function useFederatedAttestationsLookupIdentifiers<
  TFunctionName extends 'lookupIdentifiers',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'lookupIdentifiers',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"validateAttestationSig"`.
 */
export function useFederatedAttestationsValidateAttestationSig<
  TFunctionName extends 'validateAttestationSig',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'validateAttestationSig',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"getUniqueAttestationHash"`.
 */
export function useFederatedAttestationsGetUniqueAttestationHash<
  TFunctionName extends 'getUniqueAttestationHash',
  TSelectData = ReadContractResult<typeof federatedAttestationsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: federatedAttestationsABI,
    functionName: 'getUniqueAttestationHash',
    ...config,
  } as UseContractReadConfig<typeof federatedAttestationsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__.
 */
export function useFederatedAttestationsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof federatedAttestationsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof federatedAttestationsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, TFunctionName, TMode>({
    abi: federatedAttestationsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useFederatedAttestationsRenounceOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'renounceOwnership'
        >['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'renounceOwnership', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useFederatedAttestationsTransferOwnership<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'transferOwnership'
        >['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'transferOwnership', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"initialize"`.
 */
export function useFederatedAttestationsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof federatedAttestationsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'initialize', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"registerAttestationAsIssuer"`.
 */
export function useFederatedAttestationsRegisterAttestationAsIssuer<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'registerAttestationAsIssuer'
        >['request']['abi'],
        'registerAttestationAsIssuer',
        TMode
      > & { functionName?: 'registerAttestationAsIssuer' }
    : UseContractWriteConfig<
        typeof federatedAttestationsABI,
        'registerAttestationAsIssuer',
        TMode
      > & {
        abi?: never
        functionName?: 'registerAttestationAsIssuer'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'registerAttestationAsIssuer', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'registerAttestationAsIssuer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"registerAttestation"`.
 */
export function useFederatedAttestationsRegisterAttestation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'registerAttestation'
        >['request']['abi'],
        'registerAttestation',
        TMode
      > & { functionName?: 'registerAttestation' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'registerAttestation', TMode> & {
        abi?: never
        functionName?: 'registerAttestation'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'registerAttestation', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'registerAttestation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"revokeAttestation"`.
 */
export function useFederatedAttestationsRevokeAttestation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'revokeAttestation'
        >['request']['abi'],
        'revokeAttestation',
        TMode
      > & { functionName?: 'revokeAttestation' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'revokeAttestation', TMode> & {
        abi?: never
        functionName?: 'revokeAttestation'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'revokeAttestation', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'revokeAttestation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"batchRevokeAttestations"`.
 */
export function useFederatedAttestationsBatchRevokeAttestations<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof federatedAttestationsABI,
          'batchRevokeAttestations'
        >['request']['abi'],
        'batchRevokeAttestations',
        TMode
      > & { functionName?: 'batchRevokeAttestations' }
    : UseContractWriteConfig<typeof federatedAttestationsABI, 'batchRevokeAttestations', TMode> & {
        abi?: never
        functionName?: 'batchRevokeAttestations'
      } = {} as any
) {
  return useContractWrite<typeof federatedAttestationsABI, 'batchRevokeAttestations', TMode>({
    abi: federatedAttestationsABI,
    functionName: 'batchRevokeAttestations',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__.
 */
export function usePrepareFederatedAttestationsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareFederatedAttestationsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareFederatedAttestationsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareFederatedAttestationsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"registerAttestationAsIssuer"`.
 */
export function usePrepareFederatedAttestationsRegisterAttestationAsIssuer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'registerAttestationAsIssuer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'registerAttestationAsIssuer',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof federatedAttestationsABI,
    'registerAttestationAsIssuer'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"registerAttestation"`.
 */
export function usePrepareFederatedAttestationsRegisterAttestation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'registerAttestation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'registerAttestation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'registerAttestation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"revokeAttestation"`.
 */
export function usePrepareFederatedAttestationsRevokeAttestation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'revokeAttestation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'revokeAttestation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'revokeAttestation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link federatedAttestationsABI}__ and `functionName` set to `"batchRevokeAttestations"`.
 */
export function usePrepareFederatedAttestationsBatchRevokeAttestations(
  config: Omit<
    UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'batchRevokeAttestations'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: federatedAttestationsABI,
    functionName: 'batchRevokeAttestations',
    ...config,
  } as UsePrepareContractWriteConfig<typeof federatedAttestationsABI, 'batchRevokeAttestations'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsABI}__.
 */
export function useFederatedAttestationsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: federatedAttestationsABI, ...config } as UseContractEventConfig<
    typeof federatedAttestationsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsABI}__ and `eventName` set to `"AttestationRegistered"`.
 */
export function useFederatedAttestationsAttestationRegisteredEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsABI, 'AttestationRegistered'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsABI,
    eventName: 'AttestationRegistered',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsABI, 'AttestationRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsABI}__ and `eventName` set to `"AttestationRevoked"`.
 */
export function useFederatedAttestationsAttestationRevokedEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsABI, 'AttestationRevoked'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsABI,
    eventName: 'AttestationRevoked',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsABI, 'AttestationRevoked'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsABI}__ and `eventName` set to `"EIP712DomainSeparatorSet"`.
 */
export function useFederatedAttestationsEip712DomainSeparatorSetEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsABI, 'EIP712DomainSeparatorSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsABI,
    eventName: 'EIP712DomainSeparatorSet',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsABI, 'EIP712DomainSeparatorSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link federatedAttestationsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useFederatedAttestationsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof federatedAttestationsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: federatedAttestationsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof federatedAttestationsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__.
 */
export function useRandomRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: randomABI, ...config } as UseContractReadConfig<
    typeof randomABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useRandomCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"commitments"`.
 */
export function useRandomCommitments<
  TFunctionName extends 'commitments',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'commitments',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useRandomFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useRandomGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useRandomGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useRandomGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useRandomGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useRandomGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useRandomGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useRandomHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"initialized"`.
 */
export function useRandomInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"isOwner"`.
 */
export function useRandomIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useRandomMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useRandomMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useRandomNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useRandomNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"owner"`.
 */
export function useRandomOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"randomnessBlockRetentionWindow"`.
 */
export function useRandomRandomnessBlockRetentionWindow<
  TFunctionName extends 'randomnessBlockRetentionWindow',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'randomnessBlockRetentionWindow',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useRandomValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useRandomValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useRandomGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"computeCommitment"`.
 */
export function useRandomComputeCommitment<
  TFunctionName extends 'computeCommitment',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'computeCommitment',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"random"`.
 */
export function useRandomRandom<
  TFunctionName extends 'random',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'random',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"getBlockRandomness"`.
 */
export function useRandomGetBlockRandomness<
  TFunctionName extends 'getBlockRandomness',
  TSelectData = ReadContractResult<typeof randomABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: randomABI,
    functionName: 'getBlockRandomness',
    ...config,
  } as UseContractReadConfig<typeof randomABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__.
 */
export function useRandomWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof randomABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof randomABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof randomABI, TFunctionName, TMode>({
    abi: randomABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useRandomRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof randomABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof randomABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof randomABI, 'renounceOwnership', TMode>({
    abi: randomABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useRandomTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof randomABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof randomABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof randomABI, 'transferOwnership', TMode>({
    abi: randomABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"initialize"`.
 */
export function useRandomInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof randomABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof randomABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof randomABI, 'initialize', TMode>({
    abi: randomABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"setRandomnessBlockRetentionWindow"`.
 */
export function useRandomSetRandomnessBlockRetentionWindow<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof randomABI,
          'setRandomnessBlockRetentionWindow'
        >['request']['abi'],
        'setRandomnessBlockRetentionWindow',
        TMode
      > & { functionName?: 'setRandomnessBlockRetentionWindow' }
    : UseContractWriteConfig<typeof randomABI, 'setRandomnessBlockRetentionWindow', TMode> & {
        abi?: never
        functionName?: 'setRandomnessBlockRetentionWindow'
      } = {} as any
) {
  return useContractWrite<typeof randomABI, 'setRandomnessBlockRetentionWindow', TMode>({
    abi: randomABI,
    functionName: 'setRandomnessBlockRetentionWindow',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"revealAndCommit"`.
 */
export function useRandomRevealAndCommit<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof randomABI, 'revealAndCommit'>['request']['abi'],
        'revealAndCommit',
        TMode
      > & { functionName?: 'revealAndCommit' }
    : UseContractWriteConfig<typeof randomABI, 'revealAndCommit', TMode> & {
        abi?: never
        functionName?: 'revealAndCommit'
      } = {} as any
) {
  return useContractWrite<typeof randomABI, 'revealAndCommit', TMode>({
    abi: randomABI,
    functionName: 'revealAndCommit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__.
 */
export function usePrepareRandomWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof randomABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: randomABI, ...config } as UsePrepareContractWriteConfig<
    typeof randomABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareRandomRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof randomABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: randomABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof randomABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareRandomTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof randomABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: randomABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof randomABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRandomInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof randomABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: randomABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof randomABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"setRandomnessBlockRetentionWindow"`.
 */
export function usePrepareRandomSetRandomnessBlockRetentionWindow(
  config: Omit<
    UsePrepareContractWriteConfig<typeof randomABI, 'setRandomnessBlockRetentionWindow'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: randomABI,
    functionName: 'setRandomnessBlockRetentionWindow',
    ...config,
  } as UsePrepareContractWriteConfig<typeof randomABI, 'setRandomnessBlockRetentionWindow'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link randomABI}__ and `functionName` set to `"revealAndCommit"`.
 */
export function usePrepareRandomRevealAndCommit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof randomABI, 'revealAndCommit'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: randomABI,
    functionName: 'revealAndCommit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof randomABI, 'revealAndCommit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link randomABI}__.
 */
export function useRandomEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof randomABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: randomABI, ...config } as UseContractEventConfig<
    typeof randomABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link randomABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useRandomOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof randomABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: randomABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof randomABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link randomABI}__ and `eventName` set to `"RandomnessBlockRetentionWindowSet"`.
 */
export function useRandomRandomnessBlockRetentionWindowSetEvent(
  config: Omit<
    UseContractEventConfig<typeof randomABI, 'RandomnessBlockRetentionWindowSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: randomABI,
    eventName: 'RandomnessBlockRetentionWindowSet',
    ...config,
  } as UseContractEventConfig<typeof randomABI, 'RandomnessBlockRetentionWindowSet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__.
 */
export function useOdisPaymentsRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: odisPaymentsABI, ...config } as UseContractReadConfig<
    typeof odisPaymentsABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"initialized"`.
 */
export function useOdisPaymentsInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"isOwner"`.
 */
export function useOdisPaymentsIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"owner"`.
 */
export function useOdisPaymentsOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"registryContract"`.
 */
export function useOdisPaymentsRegistryContract<
  TFunctionName extends 'registryContract',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'registryContract',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"totalPaidCUSD"`.
 */
export function useOdisPaymentsTotalPaidCusd<
  TFunctionName extends 'totalPaidCUSD',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'totalPaidCUSD',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useOdisPaymentsGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof odisPaymentsABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: odisPaymentsABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof odisPaymentsABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__.
 */
export function useOdisPaymentsWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof odisPaymentsABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsABI, TFunctionName, TMode>({
    abi: odisPaymentsABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useOdisPaymentsRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof odisPaymentsABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsABI, 'renounceOwnership', TMode>({
    abi: odisPaymentsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useOdisPaymentsTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof odisPaymentsABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsABI, 'transferOwnership', TMode>({
    abi: odisPaymentsABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"initialize"`.
 */
export function useOdisPaymentsInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof odisPaymentsABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsABI, 'initialize', TMode>({
    abi: odisPaymentsABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"payInCUSD"`.
 */
export function useOdisPaymentsPayInCusd<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof odisPaymentsABI, 'payInCUSD'>['request']['abi'],
        'payInCUSD',
        TMode
      > & { functionName?: 'payInCUSD' }
    : UseContractWriteConfig<typeof odisPaymentsABI, 'payInCUSD', TMode> & {
        abi?: never
        functionName?: 'payInCUSD'
      } = {} as any
) {
  return useContractWrite<typeof odisPaymentsABI, 'payInCUSD', TMode>({
    abi: odisPaymentsABI,
    functionName: 'payInCUSD',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__.
 */
export function usePrepareOdisPaymentsWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareOdisPaymentsRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareOdisPaymentsTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareOdisPaymentsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link odisPaymentsABI}__ and `functionName` set to `"payInCUSD"`.
 */
export function usePrepareOdisPaymentsPayInCusd(
  config: Omit<
    UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'payInCUSD'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: odisPaymentsABI,
    functionName: 'payInCUSD',
    ...config,
  } as UsePrepareContractWriteConfig<typeof odisPaymentsABI, 'payInCUSD'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsABI}__.
 */
export function useOdisPaymentsEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof odisPaymentsABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: odisPaymentsABI, ...config } as UseContractEventConfig<
    typeof odisPaymentsABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useOdisPaymentsOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof odisPaymentsABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: odisPaymentsABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof odisPaymentsABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link odisPaymentsABI}__ and `eventName` set to `"PaymentMade"`.
 */
export function useOdisPaymentsPaymentMadeEvent(
  config: Omit<
    UseContractEventConfig<typeof odisPaymentsABI, 'PaymentMade'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: odisPaymentsABI,
    eventName: 'PaymentMade',
    ...config,
  } as UseContractEventConfig<typeof odisPaymentsABI, 'PaymentMade'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__.
 */
export function useExchangeRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeABI, ...config } as UseContractReadConfig<
    typeof exchangeABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"goldBucket"`.
 */
export function useExchangeGoldBucket<
  TFunctionName extends 'goldBucket',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'goldBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"initialized"`.
 */
export function useExchangeInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"isOwner"`.
 */
export function useExchangeIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"lastBucketUpdate"`.
 */
export function useExchangeLastBucketUpdate<
  TFunctionName extends 'lastBucketUpdate',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'lastBucketUpdate',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"minimumReports"`.
 */
export function useExchangeMinimumReports<
  TFunctionName extends 'minimumReports',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'minimumReports',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"owner"`.
 */
export function useExchangeOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"registry"`.
 */
export function useExchangeRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"reserveFraction"`.
 */
export function useExchangeReserveFraction<
  TFunctionName extends 'reserveFraction',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'reserveFraction',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"spread"`.
 */
export function useExchangeSpread<
  TFunctionName extends 'spread',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'spread',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"stable"`.
 */
export function useExchangeStable<
  TFunctionName extends 'stable',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'stable',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"stableBucket"`.
 */
export function useExchangeStableBucket<
  TFunctionName extends 'stableBucket',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'stableBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"stableTokenRegistryId"`.
 */
export function useExchangeStableTokenRegistryId<
  TFunctionName extends 'stableTokenRegistryId',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'stableTokenRegistryId',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"updateFrequency"`.
 */
export function useExchangeUpdateFrequency<
  TFunctionName extends 'updateFrequency',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'updateFrequency',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useExchangeGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"getBuyTokenAmount"`.
 */
export function useExchangeGetBuyTokenAmount<
  TFunctionName extends 'getBuyTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'getBuyTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"getSellTokenAmount"`.
 */
export function useExchangeGetSellTokenAmount<
  TFunctionName extends 'getSellTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'getSellTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"getBuyAndSellBuckets"`.
 */
export function useExchangeGetBuyAndSellBuckets<
  TFunctionName extends 'getBuyAndSellBuckets',
  TSelectData = ReadContractResult<typeof exchangeABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeABI,
    functionName: 'getBuyAndSellBuckets',
    ...config,
  } as UseContractReadConfig<typeof exchangeABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__.
 */
export function useExchangeWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, TFunctionName, TMode>({
    abi: exchangeABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useExchangeRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof exchangeABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'renounceOwnership', TMode>({
    abi: exchangeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useExchangeSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof exchangeABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setRegistry', TMode>({
    abi: exchangeABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useExchangeTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof exchangeABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'transferOwnership', TMode>({
    abi: exchangeABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"initialize"`.
 */
export function useExchangeInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof exchangeABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'initialize', TMode>({
    abi: exchangeABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"activateStable"`.
 */
export function useExchangeActivateStable<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'activateStable'>['request']['abi'],
        'activateStable',
        TMode
      > & { functionName?: 'activateStable' }
    : UseContractWriteConfig<typeof exchangeABI, 'activateStable', TMode> & {
        abi?: never
        functionName?: 'activateStable'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'activateStable', TMode>({
    abi: exchangeABI,
    functionName: 'activateStable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"sell"`.
 */
export function useExchangeSell<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'sell'>['request']['abi'],
        'sell',
        TMode
      > & { functionName?: 'sell' }
    : UseContractWriteConfig<typeof exchangeABI, 'sell', TMode> & {
        abi?: never
        functionName?: 'sell'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'sell', TMode>({
    abi: exchangeABI,
    functionName: 'sell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"exchange"`.
 */
export function useExchangeExchange<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'exchange'>['request']['abi'],
        'exchange',
        TMode
      > & { functionName?: 'exchange' }
    : UseContractWriteConfig<typeof exchangeABI, 'exchange', TMode> & {
        abi?: never
        functionName?: 'exchange'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'exchange', TMode>({
    abi: exchangeABI,
    functionName: 'exchange',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"buy"`.
 */
export function useExchangeBuy<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'buy'>['request']['abi'],
        'buy',
        TMode
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<typeof exchangeABI, 'buy', TMode> & {
        abi?: never
        functionName?: 'buy'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'buy', TMode>({
    abi: exchangeABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function useExchangeSetUpdateFrequency<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setUpdateFrequency'>['request']['abi'],
        'setUpdateFrequency',
        TMode
      > & { functionName?: 'setUpdateFrequency' }
    : UseContractWriteConfig<typeof exchangeABI, 'setUpdateFrequency', TMode> & {
        abi?: never
        functionName?: 'setUpdateFrequency'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setUpdateFrequency', TMode>({
    abi: exchangeABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function useExchangeSetMinimumReports<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setMinimumReports'>['request']['abi'],
        'setMinimumReports',
        TMode
      > & { functionName?: 'setMinimumReports' }
    : UseContractWriteConfig<typeof exchangeABI, 'setMinimumReports', TMode> & {
        abi?: never
        functionName?: 'setMinimumReports'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setMinimumReports', TMode>({
    abi: exchangeABI,
    functionName: 'setMinimumReports',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setStableToken"`.
 */
export function useExchangeSetStableToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setStableToken'>['request']['abi'],
        'setStableToken',
        TMode
      > & { functionName?: 'setStableToken' }
    : UseContractWriteConfig<typeof exchangeABI, 'setStableToken', TMode> & {
        abi?: never
        functionName?: 'setStableToken'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setStableToken', TMode>({
    abi: exchangeABI,
    functionName: 'setStableToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setSpread"`.
 */
export function useExchangeSetSpread<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setSpread'>['request']['abi'],
        'setSpread',
        TMode
      > & { functionName?: 'setSpread' }
    : UseContractWriteConfig<typeof exchangeABI, 'setSpread', TMode> & {
        abi?: never
        functionName?: 'setSpread'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setSpread', TMode>({
    abi: exchangeABI,
    functionName: 'setSpread',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function useExchangeSetReserveFraction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeABI, 'setReserveFraction'>['request']['abi'],
        'setReserveFraction',
        TMode
      > & { functionName?: 'setReserveFraction' }
    : UseContractWriteConfig<typeof exchangeABI, 'setReserveFraction', TMode> & {
        abi?: never
        functionName?: 'setReserveFraction'
      } = {} as any
) {
  return useContractWrite<typeof exchangeABI, 'setReserveFraction', TMode>({
    abi: exchangeABI,
    functionName: 'setReserveFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__.
 */
export function usePrepareExchangeWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof exchangeABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: exchangeABI, ...config } as UsePrepareContractWriteConfig<
    typeof exchangeABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareExchangeRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareExchangeSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareExchangeTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareExchangeInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"activateStable"`.
 */
export function usePrepareExchangeActivateStable(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'activateStable'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'activateStable',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'activateStable'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"sell"`.
 */
export function usePrepareExchangeSell(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'sell'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'sell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'sell'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"exchange"`.
 */
export function usePrepareExchangeExchange(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'exchange'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'exchange',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'exchange'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareExchangeBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'buy'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'buy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function usePrepareExchangeSetUpdateFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setUpdateFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setUpdateFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function usePrepareExchangeSetMinimumReports(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setMinimumReports'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setMinimumReports',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setMinimumReports'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setStableToken"`.
 */
export function usePrepareExchangeSetStableToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setStableToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setStableToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setStableToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setSpread"`.
 */
export function usePrepareExchangeSetSpread(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setSpread'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setSpread',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setSpread'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function usePrepareExchangeSetReserveFraction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeABI, 'setReserveFraction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeABI,
    functionName: 'setReserveFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeABI, 'setReserveFraction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__.
 */
export function useExchangeEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeABI, ...config } as UseContractEventConfig<
    typeof exchangeABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"BucketsUpdated"`.
 */
export function useExchangeBucketsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'BucketsUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'BucketsUpdated',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'BucketsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"Exchanged"`.
 */
export function useExchangeExchangedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'Exchanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'Exchanged',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'Exchanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"MinimumReportsSet"`.
 */
export function useExchangeMinimumReportsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'MinimumReportsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'MinimumReportsSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'MinimumReportsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useExchangeOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useExchangeRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"ReserveFractionSet"`.
 */
export function useExchangeReserveFractionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'ReserveFractionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'ReserveFractionSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'ReserveFractionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"SpreadSet"`.
 */
export function useExchangeSpreadSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'SpreadSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'SpreadSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'SpreadSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"StableTokenSet"`.
 */
export function useExchangeStableTokenSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'StableTokenSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'StableTokenSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'StableTokenSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeABI}__ and `eventName` set to `"UpdateFrequencySet"`.
 */
export function useExchangeUpdateFrequencySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeABI, 'UpdateFrequencySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeABI,
    eventName: 'UpdateFrequencySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeABI, 'UpdateFrequencySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__.
 */
export function useExchangeEurRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeEurABI, ...config } as UseContractReadConfig<
    typeof exchangeEurABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"getBuyAndSellBuckets"`.
 */
export function useExchangeEurGetBuyAndSellBuckets<
  TFunctionName extends 'getBuyAndSellBuckets',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'getBuyAndSellBuckets',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"getBuyTokenAmount"`.
 */
export function useExchangeEurGetBuyTokenAmount<
  TFunctionName extends 'getBuyTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'getBuyTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"getSellTokenAmount"`.
 */
export function useExchangeEurGetSellTokenAmount<
  TFunctionName extends 'getSellTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'getSellTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"goldBucket"`.
 */
export function useExchangeEurGoldBucket<
  TFunctionName extends 'goldBucket',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'goldBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"initialized"`.
 */
export function useExchangeEurInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"isOwner"`.
 */
export function useExchangeEurIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"lastBucketUpdate"`.
 */
export function useExchangeEurLastBucketUpdate<
  TFunctionName extends 'lastBucketUpdate',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'lastBucketUpdate',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"minimumReports"`.
 */
export function useExchangeEurMinimumReports<
  TFunctionName extends 'minimumReports',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'minimumReports',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"owner"`.
 */
export function useExchangeEurOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"registry"`.
 */
export function useExchangeEurRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"reserveFraction"`.
 */
export function useExchangeEurReserveFraction<
  TFunctionName extends 'reserveFraction',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'reserveFraction',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"spread"`.
 */
export function useExchangeEurSpread<
  TFunctionName extends 'spread',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'spread',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"stable"`.
 */
export function useExchangeEurStable<
  TFunctionName extends 'stable',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'stable',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"stableBucket"`.
 */
export function useExchangeEurStableBucket<
  TFunctionName extends 'stableBucket',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'stableBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"stableTokenRegistryId"`.
 */
export function useExchangeEurStableTokenRegistryId<
  TFunctionName extends 'stableTokenRegistryId',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'stableTokenRegistryId',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"updateFrequency"`.
 */
export function useExchangeEurUpdateFrequency<
  TFunctionName extends 'updateFrequency',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'updateFrequency',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useExchangeEurGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof exchangeEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeEurABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof exchangeEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__.
 */
export function useExchangeEurWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeEurABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, TFunctionName, TMode>({
    abi: exchangeEurABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"activateStable"`.
 */
export function useExchangeEurActivateStable<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'activateStable'>['request']['abi'],
        'activateStable',
        TMode
      > & { functionName?: 'activateStable' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'activateStable', TMode> & {
        abi?: never
        functionName?: 'activateStable'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'activateStable', TMode>({
    abi: exchangeEurABI,
    functionName: 'activateStable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"buy"`.
 */
export function useExchangeEurBuy<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'buy'>['request']['abi'],
        'buy',
        TMode
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'buy', TMode> & {
        abi?: never
        functionName?: 'buy'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'buy', TMode>({
    abi: exchangeEurABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"exchange"`.
 */
export function useExchangeEurExchange<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'exchange'>['request']['abi'],
        'exchange',
        TMode
      > & { functionName?: 'exchange' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'exchange', TMode> & {
        abi?: never
        functionName?: 'exchange'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'exchange', TMode>({
    abi: exchangeEurABI,
    functionName: 'exchange',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"initialize"`.
 */
export function useExchangeEurInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'initialize', TMode>({
    abi: exchangeEurABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useExchangeEurRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'renounceOwnership', TMode>({
    abi: exchangeEurABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"sell"`.
 */
export function useExchangeEurSell<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'sell'>['request']['abi'],
        'sell',
        TMode
      > & { functionName?: 'sell' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'sell', TMode> & {
        abi?: never
        functionName?: 'sell'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'sell', TMode>({
    abi: exchangeEurABI,
    functionName: 'sell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function useExchangeEurSetMinimumReports<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setMinimumReports'>['request']['abi'],
        'setMinimumReports',
        TMode
      > & { functionName?: 'setMinimumReports' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setMinimumReports', TMode> & {
        abi?: never
        functionName?: 'setMinimumReports'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setMinimumReports', TMode>({
    abi: exchangeEurABI,
    functionName: 'setMinimumReports',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useExchangeEurSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setRegistry', TMode>({
    abi: exchangeEurABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function useExchangeEurSetReserveFraction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setReserveFraction'>['request']['abi'],
        'setReserveFraction',
        TMode
      > & { functionName?: 'setReserveFraction' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setReserveFraction', TMode> & {
        abi?: never
        functionName?: 'setReserveFraction'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setReserveFraction', TMode>({
    abi: exchangeEurABI,
    functionName: 'setReserveFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setSpread"`.
 */
export function useExchangeEurSetSpread<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setSpread'>['request']['abi'],
        'setSpread',
        TMode
      > & { functionName?: 'setSpread' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setSpread', TMode> & {
        abi?: never
        functionName?: 'setSpread'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setSpread', TMode>({
    abi: exchangeEurABI,
    functionName: 'setSpread',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setStableToken"`.
 */
export function useExchangeEurSetStableToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setStableToken'>['request']['abi'],
        'setStableToken',
        TMode
      > & { functionName?: 'setStableToken' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setStableToken', TMode> & {
        abi?: never
        functionName?: 'setStableToken'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setStableToken', TMode>({
    abi: exchangeEurABI,
    functionName: 'setStableToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function useExchangeEurSetUpdateFrequency<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'setUpdateFrequency'>['request']['abi'],
        'setUpdateFrequency',
        TMode
      > & { functionName?: 'setUpdateFrequency' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'setUpdateFrequency', TMode> & {
        abi?: never
        functionName?: 'setUpdateFrequency'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'setUpdateFrequency', TMode>({
    abi: exchangeEurABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useExchangeEurTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeEurABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof exchangeEurABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeEurABI, 'transferOwnership', TMode>({
    abi: exchangeEurABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__.
 */
export function usePrepareExchangeEurWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"activateStable"`.
 */
export function usePrepareExchangeEurActivateStable(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'activateStable'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'activateStable',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'activateStable'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareExchangeEurBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'buy'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'buy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"exchange"`.
 */
export function usePrepareExchangeEurExchange(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'exchange'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'exchange',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'exchange'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareExchangeEurInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareExchangeEurRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"sell"`.
 */
export function usePrepareExchangeEurSell(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'sell'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'sell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'sell'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function usePrepareExchangeEurSetMinimumReports(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setMinimumReports'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setMinimumReports',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setMinimumReports'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareExchangeEurSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function usePrepareExchangeEurSetReserveFraction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setReserveFraction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setReserveFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setReserveFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setSpread"`.
 */
export function usePrepareExchangeEurSetSpread(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setSpread'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setSpread',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setSpread'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setStableToken"`.
 */
export function usePrepareExchangeEurSetStableToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setStableToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setStableToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setStableToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function usePrepareExchangeEurSetUpdateFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setUpdateFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'setUpdateFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeEurABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareExchangeEurTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeEurABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeEurABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeEurABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__.
 */
export function useExchangeEurEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeEurABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeEurABI, ...config } as UseContractEventConfig<
    typeof exchangeEurABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"BucketsUpdated"`.
 */
export function useExchangeEurBucketsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'BucketsUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'BucketsUpdated',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'BucketsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"Exchanged"`.
 */
export function useExchangeEurExchangedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'Exchanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'Exchanged',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'Exchanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"MinimumReportsSet"`.
 */
export function useExchangeEurMinimumReportsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'MinimumReportsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'MinimumReportsSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'MinimumReportsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useExchangeEurOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useExchangeEurRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"ReserveFractionSet"`.
 */
export function useExchangeEurReserveFractionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'ReserveFractionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'ReserveFractionSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'ReserveFractionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"SpreadSet"`.
 */
export function useExchangeEurSpreadSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'SpreadSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'SpreadSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'SpreadSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"StableTokenSet"`.
 */
export function useExchangeEurStableTokenSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'StableTokenSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'StableTokenSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'StableTokenSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeEurABI}__ and `eventName` set to `"UpdateFrequencySet"`.
 */
export function useExchangeEurUpdateFrequencySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeEurABI, 'UpdateFrequencySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeEurABI,
    eventName: 'UpdateFrequencySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeEurABI, 'UpdateFrequencySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__.
 */
export function useExchangeBrlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: exchangeBrlABI, ...config } as UseContractReadConfig<
    typeof exchangeBrlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"getBuyAndSellBuckets"`.
 */
export function useExchangeBrlGetBuyAndSellBuckets<
  TFunctionName extends 'getBuyAndSellBuckets',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'getBuyAndSellBuckets',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"getBuyTokenAmount"`.
 */
export function useExchangeBrlGetBuyTokenAmount<
  TFunctionName extends 'getBuyTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'getBuyTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"getSellTokenAmount"`.
 */
export function useExchangeBrlGetSellTokenAmount<
  TFunctionName extends 'getSellTokenAmount',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'getSellTokenAmount',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"goldBucket"`.
 */
export function useExchangeBrlGoldBucket<
  TFunctionName extends 'goldBucket',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'goldBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"initialized"`.
 */
export function useExchangeBrlInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"isOwner"`.
 */
export function useExchangeBrlIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"lastBucketUpdate"`.
 */
export function useExchangeBrlLastBucketUpdate<
  TFunctionName extends 'lastBucketUpdate',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'lastBucketUpdate',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"minimumReports"`.
 */
export function useExchangeBrlMinimumReports<
  TFunctionName extends 'minimumReports',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'minimumReports',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"owner"`.
 */
export function useExchangeBrlOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"registry"`.
 */
export function useExchangeBrlRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"reserveFraction"`.
 */
export function useExchangeBrlReserveFraction<
  TFunctionName extends 'reserveFraction',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'reserveFraction',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"spread"`.
 */
export function useExchangeBrlSpread<
  TFunctionName extends 'spread',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'spread',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"stable"`.
 */
export function useExchangeBrlStable<
  TFunctionName extends 'stable',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'stable',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"stableBucket"`.
 */
export function useExchangeBrlStableBucket<
  TFunctionName extends 'stableBucket',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'stableBucket',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"stableTokenRegistryId"`.
 */
export function useExchangeBrlStableTokenRegistryId<
  TFunctionName extends 'stableTokenRegistryId',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'stableTokenRegistryId',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"updateFrequency"`.
 */
export function useExchangeBrlUpdateFrequency<
  TFunctionName extends 'updateFrequency',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'updateFrequency',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useExchangeBrlGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof exchangeBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: exchangeBrlABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof exchangeBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__.
 */
export function useExchangeBrlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof exchangeBrlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, TFunctionName, TMode>({
    abi: exchangeBrlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"activateStable"`.
 */
export function useExchangeBrlActivateStable<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'activateStable'>['request']['abi'],
        'activateStable',
        TMode
      > & { functionName?: 'activateStable' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'activateStable', TMode> & {
        abi?: never
        functionName?: 'activateStable'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'activateStable', TMode>({
    abi: exchangeBrlABI,
    functionName: 'activateStable',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"buy"`.
 */
export function useExchangeBrlBuy<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'buy'>['request']['abi'],
        'buy',
        TMode
      > & { functionName?: 'buy' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'buy', TMode> & {
        abi?: never
        functionName?: 'buy'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'buy', TMode>({
    abi: exchangeBrlABI,
    functionName: 'buy',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"exchange"`.
 */
export function useExchangeBrlExchange<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'exchange'>['request']['abi'],
        'exchange',
        TMode
      > & { functionName?: 'exchange' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'exchange', TMode> & {
        abi?: never
        functionName?: 'exchange'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'exchange', TMode>({
    abi: exchangeBrlABI,
    functionName: 'exchange',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"initialize"`.
 */
export function useExchangeBrlInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'initialize', TMode>({
    abi: exchangeBrlABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useExchangeBrlRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'renounceOwnership', TMode>({
    abi: exchangeBrlABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"sell"`.
 */
export function useExchangeBrlSell<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'sell'>['request']['abi'],
        'sell',
        TMode
      > & { functionName?: 'sell' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'sell', TMode> & {
        abi?: never
        functionName?: 'sell'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'sell', TMode>({
    abi: exchangeBrlABI,
    functionName: 'sell',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function useExchangeBrlSetMinimumReports<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setMinimumReports'>['request']['abi'],
        'setMinimumReports',
        TMode
      > & { functionName?: 'setMinimumReports' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setMinimumReports', TMode> & {
        abi?: never
        functionName?: 'setMinimumReports'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setMinimumReports', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setMinimumReports',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useExchangeBrlSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setRegistry', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function useExchangeBrlSetReserveFraction<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setReserveFraction'>['request']['abi'],
        'setReserveFraction',
        TMode
      > & { functionName?: 'setReserveFraction' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setReserveFraction', TMode> & {
        abi?: never
        functionName?: 'setReserveFraction'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setReserveFraction', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setReserveFraction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setSpread"`.
 */
export function useExchangeBrlSetSpread<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setSpread'>['request']['abi'],
        'setSpread',
        TMode
      > & { functionName?: 'setSpread' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setSpread', TMode> & {
        abi?: never
        functionName?: 'setSpread'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setSpread', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setSpread',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setStableToken"`.
 */
export function useExchangeBrlSetStableToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setStableToken'>['request']['abi'],
        'setStableToken',
        TMode
      > & { functionName?: 'setStableToken' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setStableToken', TMode> & {
        abi?: never
        functionName?: 'setStableToken'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setStableToken', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setStableToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function useExchangeBrlSetUpdateFrequency<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'setUpdateFrequency'>['request']['abi'],
        'setUpdateFrequency',
        TMode
      > & { functionName?: 'setUpdateFrequency' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'setUpdateFrequency', TMode> & {
        abi?: never
        functionName?: 'setUpdateFrequency'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'setUpdateFrequency', TMode>({
    abi: exchangeBrlABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useExchangeBrlTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof exchangeBrlABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof exchangeBrlABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof exchangeBrlABI, 'transferOwnership', TMode>({
    abi: exchangeBrlABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__.
 */
export function usePrepareExchangeBrlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"activateStable"`.
 */
export function usePrepareExchangeBrlActivateStable(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'activateStable'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'activateStable',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'activateStable'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"buy"`.
 */
export function usePrepareExchangeBrlBuy(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'buy'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'buy',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'buy'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"exchange"`.
 */
export function usePrepareExchangeBrlExchange(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'exchange'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'exchange',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'exchange'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareExchangeBrlInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareExchangeBrlRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"sell"`.
 */
export function usePrepareExchangeBrlSell(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'sell'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'sell',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'sell'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setMinimumReports"`.
 */
export function usePrepareExchangeBrlSetMinimumReports(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setMinimumReports'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setMinimumReports',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setMinimumReports'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareExchangeBrlSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setReserveFraction"`.
 */
export function usePrepareExchangeBrlSetReserveFraction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setReserveFraction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setReserveFraction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setReserveFraction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setSpread"`.
 */
export function usePrepareExchangeBrlSetSpread(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setSpread'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setSpread',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setSpread'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setStableToken"`.
 */
export function usePrepareExchangeBrlSetStableToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setStableToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setStableToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setStableToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"setUpdateFrequency"`.
 */
export function usePrepareExchangeBrlSetUpdateFrequency(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setUpdateFrequency'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'setUpdateFrequency',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'setUpdateFrequency'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link exchangeBrlABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareExchangeBrlTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: exchangeBrlABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof exchangeBrlABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__.
 */
export function useExchangeBrlEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof exchangeBrlABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: exchangeBrlABI, ...config } as UseContractEventConfig<
    typeof exchangeBrlABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"BucketsUpdated"`.
 */
export function useExchangeBrlBucketsUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'BucketsUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'BucketsUpdated',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'BucketsUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"Exchanged"`.
 */
export function useExchangeBrlExchangedEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'Exchanged'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'Exchanged',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'Exchanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"MinimumReportsSet"`.
 */
export function useExchangeBrlMinimumReportsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'MinimumReportsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'MinimumReportsSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'MinimumReportsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useExchangeBrlOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useExchangeBrlRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"ReserveFractionSet"`.
 */
export function useExchangeBrlReserveFractionSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'ReserveFractionSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'ReserveFractionSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'ReserveFractionSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"SpreadSet"`.
 */
export function useExchangeBrlSpreadSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'SpreadSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'SpreadSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'SpreadSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"StableTokenSet"`.
 */
export function useExchangeBrlStableTokenSetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'StableTokenSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'StableTokenSet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'StableTokenSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link exchangeBrlABI}__ and `eventName` set to `"UpdateFrequencySet"`.
 */
export function useExchangeBrlUpdateFrequencySetEvent(
  config: Omit<
    UseContractEventConfig<typeof exchangeBrlABI, 'UpdateFrequencySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: exchangeBrlABI,
    eventName: 'UpdateFrequencySet',
    ...config,
  } as UseContractEventConfig<typeof exchangeBrlABI, 'UpdateFrequencySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__.
 */
export function useReserveRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: reserveABI, ...config } as UseContractReadConfig<
    typeof reserveABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"assetAllocationSymbols"`.
 */
export function useReserveAssetAllocationSymbols<
  TFunctionName extends 'assetAllocationSymbols',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'assetAllocationSymbols',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"assetAllocationWeights"`.
 */
export function useReserveAssetAllocationWeights<
  TFunctionName extends 'assetAllocationWeights',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'assetAllocationWeights',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"exchangeSpenderAddresses"`.
 */
export function useReserveExchangeSpenderAddresses<
  TFunctionName extends 'exchangeSpenderAddresses',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'exchangeSpenderAddresses',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"frozenReserveGoldDays"`.
 */
export function useReserveFrozenReserveGoldDays<
  TFunctionName extends 'frozenReserveGoldDays',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'frozenReserveGoldDays',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"frozenReserveGoldStartBalance"`.
 */
export function useReserveFrozenReserveGoldStartBalance<
  TFunctionName extends 'frozenReserveGoldStartBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'frozenReserveGoldStartBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"frozenReserveGoldStartDay"`.
 */
export function useReserveFrozenReserveGoldStartDay<
  TFunctionName extends 'frozenReserveGoldStartDay',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'frozenReserveGoldStartDay',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"initialized"`.
 */
export function useReserveInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"isExchangeSpender"`.
 */
export function useReserveIsExchangeSpender<
  TFunctionName extends 'isExchangeSpender',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'isExchangeSpender',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"isOtherReserveAddress"`.
 */
export function useReserveIsOtherReserveAddress<
  TFunctionName extends 'isOtherReserveAddress',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'isOtherReserveAddress',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"isOwner"`.
 */
export function useReserveIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"isSpender"`.
 */
export function useReserveIsSpender<
  TFunctionName extends 'isSpender',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'isSpender',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"isToken"`.
 */
export function useReserveIsToken<
  TFunctionName extends 'isToken',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'isToken',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"lastSpendingDay"`.
 */
export function useReserveLastSpendingDay<
  TFunctionName extends 'lastSpendingDay',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'lastSpendingDay',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"otherReserveAddresses"`.
 */
export function useReserveOtherReserveAddresses<
  TFunctionName extends 'otherReserveAddresses',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'otherReserveAddresses',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"owner"`.
 */
export function useReserveOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"registry"`.
 */
export function useReserveRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"spendingLimit"`.
 */
export function useReserveSpendingLimit<
  TFunctionName extends 'spendingLimit',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'spendingLimit',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"tobinTax"`.
 */
export function useReserveTobinTax<
  TFunctionName extends 'tobinTax',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'tobinTax',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"tobinTaxCache"`.
 */
export function useReserveTobinTaxCache<
  TFunctionName extends 'tobinTaxCache',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'tobinTaxCache',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"tobinTaxReserveRatio"`.
 */
export function useReserveTobinTaxReserveRatio<
  TFunctionName extends 'tobinTaxReserveRatio',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'tobinTaxReserveRatio',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"tobinTaxStalenessThreshold"`.
 */
export function useReserveTobinTaxStalenessThreshold<
  TFunctionName extends 'tobinTaxStalenessThreshold',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'tobinTaxStalenessThreshold',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useReserveGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getDailySpendingRatio"`.
 */
export function useReserveGetDailySpendingRatio<
  TFunctionName extends 'getDailySpendingRatio',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getDailySpendingRatio',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getExchangeSpenders"`.
 */
export function useReserveGetExchangeSpenders<
  TFunctionName extends 'getExchangeSpenders',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getExchangeSpenders',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getTokens"`.
 */
export function useReserveGetTokens<
  TFunctionName extends 'getTokens',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getTokens',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getOtherReserveAddresses"`.
 */
export function useReserveGetOtherReserveAddresses<
  TFunctionName extends 'getOtherReserveAddresses',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getOtherReserveAddresses',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getAssetAllocationSymbols"`.
 */
export function useReserveGetAssetAllocationSymbols<
  TFunctionName extends 'getAssetAllocationSymbols',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getAssetAllocationSymbols',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getAssetAllocationWeights"`.
 */
export function useReserveGetAssetAllocationWeights<
  TFunctionName extends 'getAssetAllocationWeights',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getAssetAllocationWeights',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getUnfrozenBalance"`.
 */
export function useReserveGetUnfrozenBalance<
  TFunctionName extends 'getUnfrozenBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getUnfrozenBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getReserveGoldBalance"`.
 */
export function useReserveGetReserveGoldBalance<
  TFunctionName extends 'getReserveGoldBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getReserveGoldBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getOtherReserveAddressesGoldBalance"`.
 */
export function useReserveGetOtherReserveAddressesGoldBalance<
  TFunctionName extends 'getOtherReserveAddressesGoldBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getOtherReserveAddressesGoldBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getUnfrozenReserveGoldBalance"`.
 */
export function useReserveGetUnfrozenReserveGoldBalance<
  TFunctionName extends 'getUnfrozenReserveGoldBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getUnfrozenReserveGoldBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getFrozenReserveGoldBalance"`.
 */
export function useReserveGetFrozenReserveGoldBalance<
  TFunctionName extends 'getFrozenReserveGoldBalance',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getFrozenReserveGoldBalance',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getReserveRatio"`.
 */
export function useReserveGetReserveRatio<
  TFunctionName extends 'getReserveRatio',
  TSelectData = ReadContractResult<typeof reserveABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveABI,
    functionName: 'getReserveRatio',
    ...config,
  } as UseContractReadConfig<typeof reserveABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__.
 */
export function useReserveWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof reserveABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, TFunctionName, TMode>({
    abi: reserveABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useReserveRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof reserveABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'renounceOwnership', TMode>({
    abi: reserveABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useReserveSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof reserveABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setRegistry', TMode>({
    abi: reserveABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useReserveTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof reserveABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'transferOwnership', TMode>({
    abi: reserveABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"initialize"`.
 */
export function useReserveInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof reserveABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'initialize', TMode>({
    abi: reserveABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTaxStalenessThreshold"`.
 */
export function useReserveSetTobinTaxStalenessThreshold<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveABI,
          'setTobinTaxStalenessThreshold'
        >['request']['abi'],
        'setTobinTaxStalenessThreshold',
        TMode
      > & { functionName?: 'setTobinTaxStalenessThreshold' }
    : UseContractWriteConfig<typeof reserveABI, 'setTobinTaxStalenessThreshold', TMode> & {
        abi?: never
        functionName?: 'setTobinTaxStalenessThreshold'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setTobinTaxStalenessThreshold', TMode>({
    abi: reserveABI,
    functionName: 'setTobinTaxStalenessThreshold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTax"`.
 */
export function useReserveSetTobinTax<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setTobinTax'>['request']['abi'],
        'setTobinTax',
        TMode
      > & { functionName?: 'setTobinTax' }
    : UseContractWriteConfig<typeof reserveABI, 'setTobinTax', TMode> & {
        abi?: never
        functionName?: 'setTobinTax'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setTobinTax', TMode>({
    abi: reserveABI,
    functionName: 'setTobinTax',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTaxReserveRatio"`.
 */
export function useReserveSetTobinTaxReserveRatio<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setTobinTaxReserveRatio'>['request']['abi'],
        'setTobinTaxReserveRatio',
        TMode
      > & { functionName?: 'setTobinTaxReserveRatio' }
    : UseContractWriteConfig<typeof reserveABI, 'setTobinTaxReserveRatio', TMode> & {
        abi?: never
        functionName?: 'setTobinTaxReserveRatio'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setTobinTaxReserveRatio', TMode>({
    abi: reserveABI,
    functionName: 'setTobinTaxReserveRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setDailySpendingRatio"`.
 */
export function useReserveSetDailySpendingRatio<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setDailySpendingRatio'>['request']['abi'],
        'setDailySpendingRatio',
        TMode
      > & { functionName?: 'setDailySpendingRatio' }
    : UseContractWriteConfig<typeof reserveABI, 'setDailySpendingRatio', TMode> & {
        abi?: never
        functionName?: 'setDailySpendingRatio'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setDailySpendingRatio', TMode>({
    abi: reserveABI,
    functionName: 'setDailySpendingRatio',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setFrozenGold"`.
 */
export function useReserveSetFrozenGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setFrozenGold'>['request']['abi'],
        'setFrozenGold',
        TMode
      > & { functionName?: 'setFrozenGold' }
    : UseContractWriteConfig<typeof reserveABI, 'setFrozenGold', TMode> & {
        abi?: never
        functionName?: 'setFrozenGold'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setFrozenGold', TMode>({
    abi: reserveABI,
    functionName: 'setFrozenGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setAssetAllocations"`.
 */
export function useReserveSetAssetAllocations<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'setAssetAllocations'>['request']['abi'],
        'setAssetAllocations',
        TMode
      > & { functionName?: 'setAssetAllocations' }
    : UseContractWriteConfig<typeof reserveABI, 'setAssetAllocations', TMode> & {
        abi?: never
        functionName?: 'setAssetAllocations'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'setAssetAllocations', TMode>({
    abi: reserveABI,
    functionName: 'setAssetAllocations',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addToken"`.
 */
export function useReserveAddToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'addToken'>['request']['abi'],
        'addToken',
        TMode
      > & { functionName?: 'addToken' }
    : UseContractWriteConfig<typeof reserveABI, 'addToken', TMode> & {
        abi?: never
        functionName?: 'addToken'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'addToken', TMode>({
    abi: reserveABI,
    functionName: 'addToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeToken"`.
 */
export function useReserveRemoveToken<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'removeToken'>['request']['abi'],
        'removeToken',
        TMode
      > & { functionName?: 'removeToken' }
    : UseContractWriteConfig<typeof reserveABI, 'removeToken', TMode> & {
        abi?: never
        functionName?: 'removeToken'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'removeToken', TMode>({
    abi: reserveABI,
    functionName: 'removeToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addOtherReserveAddress"`.
 */
export function useReserveAddOtherReserveAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'addOtherReserveAddress'>['request']['abi'],
        'addOtherReserveAddress',
        TMode
      > & { functionName?: 'addOtherReserveAddress' }
    : UseContractWriteConfig<typeof reserveABI, 'addOtherReserveAddress', TMode> & {
        abi?: never
        functionName?: 'addOtherReserveAddress'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'addOtherReserveAddress', TMode>({
    abi: reserveABI,
    functionName: 'addOtherReserveAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeOtherReserveAddress"`.
 */
export function useReserveRemoveOtherReserveAddress<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveABI,
          'removeOtherReserveAddress'
        >['request']['abi'],
        'removeOtherReserveAddress',
        TMode
      > & { functionName?: 'removeOtherReserveAddress' }
    : UseContractWriteConfig<typeof reserveABI, 'removeOtherReserveAddress', TMode> & {
        abi?: never
        functionName?: 'removeOtherReserveAddress'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'removeOtherReserveAddress', TMode>({
    abi: reserveABI,
    functionName: 'removeOtherReserveAddress',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addSpender"`.
 */
export function useReserveAddSpender<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'addSpender'>['request']['abi'],
        'addSpender',
        TMode
      > & { functionName?: 'addSpender' }
    : UseContractWriteConfig<typeof reserveABI, 'addSpender', TMode> & {
        abi?: never
        functionName?: 'addSpender'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'addSpender', TMode>({
    abi: reserveABI,
    functionName: 'addSpender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeSpender"`.
 */
export function useReserveRemoveSpender<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'removeSpender'>['request']['abi'],
        'removeSpender',
        TMode
      > & { functionName?: 'removeSpender' }
    : UseContractWriteConfig<typeof reserveABI, 'removeSpender', TMode> & {
        abi?: never
        functionName?: 'removeSpender'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'removeSpender', TMode>({
    abi: reserveABI,
    functionName: 'removeSpender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addExchangeSpender"`.
 */
export function useReserveAddExchangeSpender<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'addExchangeSpender'>['request']['abi'],
        'addExchangeSpender',
        TMode
      > & { functionName?: 'addExchangeSpender' }
    : UseContractWriteConfig<typeof reserveABI, 'addExchangeSpender', TMode> & {
        abi?: never
        functionName?: 'addExchangeSpender'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'addExchangeSpender', TMode>({
    abi: reserveABI,
    functionName: 'addExchangeSpender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeExchangeSpender"`.
 */
export function useReserveRemoveExchangeSpender<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'removeExchangeSpender'>['request']['abi'],
        'removeExchangeSpender',
        TMode
      > & { functionName?: 'removeExchangeSpender' }
    : UseContractWriteConfig<typeof reserveABI, 'removeExchangeSpender', TMode> & {
        abi?: never
        functionName?: 'removeExchangeSpender'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'removeExchangeSpender', TMode>({
    abi: reserveABI,
    functionName: 'removeExchangeSpender',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferGold"`.
 */
export function useReserveTransferGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'transferGold'>['request']['abi'],
        'transferGold',
        TMode
      > & { functionName?: 'transferGold' }
    : UseContractWriteConfig<typeof reserveABI, 'transferGold', TMode> & {
        abi?: never
        functionName?: 'transferGold'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'transferGold', TMode>({
    abi: reserveABI,
    functionName: 'transferGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferExchangeGold"`.
 */
export function useReserveTransferExchangeGold<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'transferExchangeGold'>['request']['abi'],
        'transferExchangeGold',
        TMode
      > & { functionName?: 'transferExchangeGold' }
    : UseContractWriteConfig<typeof reserveABI, 'transferExchangeGold', TMode> & {
        abi?: never
        functionName?: 'transferExchangeGold'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'transferExchangeGold', TMode>({
    abi: reserveABI,
    functionName: 'transferExchangeGold',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getOrComputeTobinTax"`.
 */
export function useReserveGetOrComputeTobinTax<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveABI, 'getOrComputeTobinTax'>['request']['abi'],
        'getOrComputeTobinTax',
        TMode
      > & { functionName?: 'getOrComputeTobinTax' }
    : UseContractWriteConfig<typeof reserveABI, 'getOrComputeTobinTax', TMode> & {
        abi?: never
        functionName?: 'getOrComputeTobinTax'
      } = {} as any
) {
  return useContractWrite<typeof reserveABI, 'getOrComputeTobinTax', TMode>({
    abi: reserveABI,
    functionName: 'getOrComputeTobinTax',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__.
 */
export function usePrepareReserveWrite<TFunctionName extends string>(
  config: Omit<UsePrepareContractWriteConfig<typeof reserveABI, TFunctionName>, 'abi'> = {} as any
) {
  return usePrepareContractWrite({ abi: reserveABI, ...config } as UsePrepareContractWriteConfig<
    typeof reserveABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareReserveRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareReserveSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareReserveTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareReserveInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTaxStalenessThreshold"`.
 */
export function usePrepareReserveSetTobinTaxStalenessThreshold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTaxStalenessThreshold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setTobinTaxStalenessThreshold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTaxStalenessThreshold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTax"`.
 */
export function usePrepareReserveSetTobinTax(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTax'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setTobinTax',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTax'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setTobinTaxReserveRatio"`.
 */
export function usePrepareReserveSetTobinTaxReserveRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTaxReserveRatio'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setTobinTaxReserveRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setTobinTaxReserveRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setDailySpendingRatio"`.
 */
export function usePrepareReserveSetDailySpendingRatio(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setDailySpendingRatio'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setDailySpendingRatio',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setDailySpendingRatio'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setFrozenGold"`.
 */
export function usePrepareReserveSetFrozenGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setFrozenGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setFrozenGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setFrozenGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"setAssetAllocations"`.
 */
export function usePrepareReserveSetAssetAllocations(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'setAssetAllocations'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'setAssetAllocations',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'setAssetAllocations'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addToken"`.
 */
export function usePrepareReserveAddToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'addToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'addToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'addToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeToken"`.
 */
export function usePrepareReserveRemoveToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'removeToken'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'removeToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'removeToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addOtherReserveAddress"`.
 */
export function usePrepareReserveAddOtherReserveAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'addOtherReserveAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'addOtherReserveAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'addOtherReserveAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeOtherReserveAddress"`.
 */
export function usePrepareReserveRemoveOtherReserveAddress(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'removeOtherReserveAddress'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'removeOtherReserveAddress',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'removeOtherReserveAddress'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addSpender"`.
 */
export function usePrepareReserveAddSpender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'addSpender'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'addSpender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'addSpender'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeSpender"`.
 */
export function usePrepareReserveRemoveSpender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'removeSpender'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'removeSpender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'removeSpender'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"addExchangeSpender"`.
 */
export function usePrepareReserveAddExchangeSpender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'addExchangeSpender'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'addExchangeSpender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'addExchangeSpender'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"removeExchangeSpender"`.
 */
export function usePrepareReserveRemoveExchangeSpender(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'removeExchangeSpender'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'removeExchangeSpender',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'removeExchangeSpender'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferGold"`.
 */
export function usePrepareReserveTransferGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'transferGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'transferGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'transferGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"transferExchangeGold"`.
 */
export function usePrepareReserveTransferExchangeGold(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'transferExchangeGold'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'transferExchangeGold',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'transferExchangeGold'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveABI}__ and `functionName` set to `"getOrComputeTobinTax"`.
 */
export function usePrepareReserveGetOrComputeTobinTax(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveABI, 'getOrComputeTobinTax'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveABI,
    functionName: 'getOrComputeTobinTax',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveABI, 'getOrComputeTobinTax'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__.
 */
export function useReserveEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof reserveABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: reserveABI, ...config } as UseContractEventConfig<
    typeof reserveABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"AssetAllocationSet"`.
 */
export function useReserveAssetAllocationSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'AssetAllocationSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'AssetAllocationSet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'AssetAllocationSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"DailySpendingRatioSet"`.
 */
export function useReserveDailySpendingRatioSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'DailySpendingRatioSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'DailySpendingRatioSet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'DailySpendingRatioSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"ExchangeSpenderAdded"`.
 */
export function useReserveExchangeSpenderAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'ExchangeSpenderAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'ExchangeSpenderAdded',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'ExchangeSpenderAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"ExchangeSpenderRemoved"`.
 */
export function useReserveExchangeSpenderRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'ExchangeSpenderRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'ExchangeSpenderRemoved',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'ExchangeSpenderRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"OtherReserveAddressAdded"`.
 */
export function useReserveOtherReserveAddressAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'OtherReserveAddressAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'OtherReserveAddressAdded',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'OtherReserveAddressAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"OtherReserveAddressRemoved"`.
 */
export function useReserveOtherReserveAddressRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'OtherReserveAddressRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'OtherReserveAddressRemoved',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'OtherReserveAddressRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useReserveOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useReserveRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"ReserveGoldTransferred"`.
 */
export function useReserveReserveGoldTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'ReserveGoldTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'ReserveGoldTransferred',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'ReserveGoldTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"SpenderAdded"`.
 */
export function useReserveSpenderAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'SpenderAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'SpenderAdded',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'SpenderAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"SpenderRemoved"`.
 */
export function useReserveSpenderRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'SpenderRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'SpenderRemoved',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'SpenderRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"TobinTaxReserveRatioSet"`.
 */
export function useReserveTobinTaxReserveRatioSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'TobinTaxReserveRatioSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'TobinTaxReserveRatioSet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'TobinTaxReserveRatioSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"TobinTaxSet"`.
 */
export function useReserveTobinTaxSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'TobinTaxSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'TobinTaxSet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'TobinTaxSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"TobinTaxStalenessThresholdSet"`.
 */
export function useReserveTobinTaxStalenessThresholdSetEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'TobinTaxStalenessThresholdSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'TobinTaxStalenessThresholdSet',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'TobinTaxStalenessThresholdSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"TokenAdded"`.
 */
export function useReserveTokenAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'TokenAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'TokenAdded',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'TokenAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveABI}__ and `eventName` set to `"TokenRemoved"`.
 */
export function useReserveTokenRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveABI, 'TokenRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveABI,
    eventName: 'TokenRemoved',
    ...config,
  } as UseContractEventConfig<typeof reserveABI, 'TokenRemoved'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__.
 */
export function useReserveSpenderMultiSigRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: reserveSpenderMultiSigABI, ...config } as UseContractReadConfig<
    typeof reserveSpenderMultiSigABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"MAX_OWNER_COUNT"`.
 */
export function useReserveSpenderMultiSigMaxOwnerCount<
  TFunctionName extends 'MAX_OWNER_COUNT',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'MAX_OWNER_COUNT',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"confirmations"`.
 */
export function useReserveSpenderMultiSigConfirmations<
  TFunctionName extends 'confirmations',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'confirmations',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"getConfirmationCount"`.
 */
export function useReserveSpenderMultiSigGetConfirmationCount<
  TFunctionName extends 'getConfirmationCount',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'getConfirmationCount',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"getConfirmations"`.
 */
export function useReserveSpenderMultiSigGetConfirmations<
  TFunctionName extends 'getConfirmations',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'getConfirmations',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"getOwners"`.
 */
export function useReserveSpenderMultiSigGetOwners<
  TFunctionName extends 'getOwners',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'getOwners',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"getTransactionCount"`.
 */
export function useReserveSpenderMultiSigGetTransactionCount<
  TFunctionName extends 'getTransactionCount',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'getTransactionCount',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"getTransactionIds"`.
 */
export function useReserveSpenderMultiSigGetTransactionIds<
  TFunctionName extends 'getTransactionIds',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'getTransactionIds',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"initialized"`.
 */
export function useReserveSpenderMultiSigInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"internalRequired"`.
 */
export function useReserveSpenderMultiSigInternalRequired<
  TFunctionName extends 'internalRequired',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'internalRequired',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"isConfirmed"`.
 */
export function useReserveSpenderMultiSigIsConfirmed<
  TFunctionName extends 'isConfirmed',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'isConfirmed',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"isOwner"`.
 */
export function useReserveSpenderMultiSigIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"owners"`.
 */
export function useReserveSpenderMultiSigOwners<
  TFunctionName extends 'owners',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'owners',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"required"`.
 */
export function useReserveSpenderMultiSigRequired<
  TFunctionName extends 'required',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'required',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"transactionCount"`.
 */
export function useReserveSpenderMultiSigTransactionCount<
  TFunctionName extends 'transactionCount',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'transactionCount',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"transactions"`.
 */
export function useReserveSpenderMultiSigTransactions<
  TFunctionName extends 'transactions',
  TSelectData = ReadContractResult<typeof reserveSpenderMultiSigABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: reserveSpenderMultiSigABI,
    functionName: 'transactions',
    ...config,
  } as UseContractReadConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__.
 */
export function useReserveSpenderMultiSigWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveSpenderMultiSigABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, TFunctionName, TMode>({
    abi: reserveSpenderMultiSigABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function useReserveSpenderMultiSigAddOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof reserveSpenderMultiSigABI, 'addOwner'>['request']['abi'],
        'addOwner',
        TMode
      > & { functionName?: 'addOwner' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'addOwner', TMode> & {
        abi?: never
        functionName?: 'addOwner'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'addOwner', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'addOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function useReserveSpenderMultiSigChangeInternalRequirement<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'changeInternalRequirement'
        >['request']['abi'],
        'changeInternalRequirement',
        TMode
      > & { functionName?: 'changeInternalRequirement' }
    : UseContractWriteConfig<
        typeof reserveSpenderMultiSigABI,
        'changeInternalRequirement',
        TMode
      > & {
        abi?: never
        functionName?: 'changeInternalRequirement'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'changeInternalRequirement', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'changeInternalRequirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function useReserveSpenderMultiSigChangeRequirement<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'changeRequirement'
        >['request']['abi'],
        'changeRequirement',
        TMode
      > & { functionName?: 'changeRequirement' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'changeRequirement', TMode> & {
        abi?: never
        functionName?: 'changeRequirement'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'changeRequirement', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function useReserveSpenderMultiSigConfirmTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'confirmTransaction'
        >['request']['abi'],
        'confirmTransaction',
        TMode
      > & { functionName?: 'confirmTransaction' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'confirmTransaction', TMode> & {
        abi?: never
        functionName?: 'confirmTransaction'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'confirmTransaction', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function useReserveSpenderMultiSigExecuteTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'executeTransaction'
        >['request']['abi'],
        'executeTransaction',
        TMode
      > & { functionName?: 'executeTransaction' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'executeTransaction', TMode> & {
        abi?: never
        functionName?: 'executeTransaction'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'executeTransaction', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function useReserveSpenderMultiSigInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'initialize'
        >['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'initialize', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function useReserveSpenderMultiSigRemoveOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'removeOwner'
        >['request']['abi'],
        'removeOwner',
        TMode
      > & { functionName?: 'removeOwner' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'removeOwner', TMode> & {
        abi?: never
        functionName?: 'removeOwner'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'removeOwner', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function useReserveSpenderMultiSigReplaceOwner<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'replaceOwner'
        >['request']['abi'],
        'replaceOwner',
        TMode
      > & { functionName?: 'replaceOwner' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'replaceOwner', TMode> & {
        abi?: never
        functionName?: 'replaceOwner'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'replaceOwner', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function useReserveSpenderMultiSigRevokeConfirmation<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'revokeConfirmation'
        >['request']['abi'],
        'revokeConfirmation',
        TMode
      > & { functionName?: 'revokeConfirmation' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'revokeConfirmation', TMode> & {
        abi?: never
        functionName?: 'revokeConfirmation'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'revokeConfirmation', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function useReserveSpenderMultiSigSubmitTransaction<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof reserveSpenderMultiSigABI,
          'submitTransaction'
        >['request']['abi'],
        'submitTransaction',
        TMode
      > & { functionName?: 'submitTransaction' }
    : UseContractWriteConfig<typeof reserveSpenderMultiSigABI, 'submitTransaction', TMode> & {
        abi?: never
        functionName?: 'submitTransaction'
      } = {} as any
) {
  return useContractWrite<typeof reserveSpenderMultiSigABI, 'submitTransaction', TMode>({
    abi: reserveSpenderMultiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__.
 */
export function usePrepareReserveSpenderMultiSigWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"addOwner"`.
 */
export function usePrepareReserveSpenderMultiSigAddOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'addOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'addOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'addOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"changeInternalRequirement"`.
 */
export function usePrepareReserveSpenderMultiSigChangeInternalRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'changeInternalRequirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'changeInternalRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'changeInternalRequirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"changeRequirement"`.
 */
export function usePrepareReserveSpenderMultiSigChangeRequirement(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'changeRequirement'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'changeRequirement',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'changeRequirement'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"confirmTransaction"`.
 */
export function usePrepareReserveSpenderMultiSigConfirmTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'confirmTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'confirmTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'confirmTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"executeTransaction"`.
 */
export function usePrepareReserveSpenderMultiSigExecuteTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'executeTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'executeTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'executeTransaction'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareReserveSpenderMultiSigInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"removeOwner"`.
 */
export function usePrepareReserveSpenderMultiSigRemoveOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'removeOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'removeOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'removeOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"replaceOwner"`.
 */
export function usePrepareReserveSpenderMultiSigReplaceOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'replaceOwner'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'replaceOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'replaceOwner'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"revokeConfirmation"`.
 */
export function usePrepareReserveSpenderMultiSigRevokeConfirmation(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'revokeConfirmation'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'revokeConfirmation',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'revokeConfirmation'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `functionName` set to `"submitTransaction"`.
 */
export function usePrepareReserveSpenderMultiSigSubmitTransaction(
  config: Omit<
    UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'submitTransaction'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: reserveSpenderMultiSigABI,
    functionName: 'submitTransaction',
    ...config,
  } as UsePrepareContractWriteConfig<typeof reserveSpenderMultiSigABI, 'submitTransaction'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__.
 */
export function useReserveSpenderMultiSigEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, TEventName>,
    'abi'
  > = {} as any
) {
  return useContractEvent({ abi: reserveSpenderMultiSigABI, ...config } as UseContractEventConfig<
    typeof reserveSpenderMultiSigABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"Confirmation"`.
 */
export function useReserveSpenderMultiSigConfirmationEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Confirmation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'Confirmation',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Confirmation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"Deposit"`.
 */
export function useReserveSpenderMultiSigDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"Execution"`.
 */
export function useReserveSpenderMultiSigExecutionEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Execution'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'Execution',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Execution'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"InternalRequirementChange"`.
 */
export function useReserveSpenderMultiSigInternalRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'InternalRequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'InternalRequirementChange',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'InternalRequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"OwnerAddition"`.
 */
export function useReserveSpenderMultiSigOwnerAdditionEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'OwnerAddition'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'OwnerAddition',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'OwnerAddition'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"OwnerRemoval"`.
 */
export function useReserveSpenderMultiSigOwnerRemovalEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'OwnerRemoval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'OwnerRemoval',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'OwnerRemoval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"RequirementChange"`.
 */
export function useReserveSpenderMultiSigRequirementChangeEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'RequirementChange'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'RequirementChange',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'RequirementChange'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"Revocation"`.
 */
export function useReserveSpenderMultiSigRevocationEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Revocation'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'Revocation',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Revocation'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link reserveSpenderMultiSigABI}__ and `eventName` set to `"Submission"`.
 */
export function useReserveSpenderMultiSigSubmissionEvent(
  config: Omit<
    UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Submission'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: reserveSpenderMultiSigABI,
    eventName: 'Submission',
    ...config,
  } as UseContractEventConfig<typeof reserveSpenderMultiSigABI, 'Submission'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__.
 */
export function useStableTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenABI, ...config } as UseContractReadConfig<
    typeof stableTokenABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useStableTokenCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useStableTokenFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useStableTokenGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useStableTokenGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useStableTokenGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useStableTokenGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useStableTokenGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useStableTokenGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useStableTokenHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"initialized"`.
 */
export function useStableTokenInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"isOwner"`.
 */
export function useStableTokenIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useStableTokenMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useStableTokenMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useStableTokenNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useStableTokenNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"owner"`.
 */
export function useStableTokenOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"registry"`.
 */
export function useStableTokenRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useStableTokenValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useStableTokenValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useStableTokenGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"name"`.
 */
export function useStableTokenName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useStableTokenSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useStableTokenDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useStableTokenAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStableTokenBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStableTokenTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getInflationParameters"`.
 */
export function useStableTokenGetInflationParameters<
  TFunctionName extends 'getInflationParameters',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getInflationParameters',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"valueToUnits"`.
 */
export function useStableTokenValueToUnits<
  TFunctionName extends 'valueToUnits',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'valueToUnits',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"getExchangeRegistryId"`.
 */
export function useStableTokenGetExchangeRegistryId<
  TFunctionName extends 'getExchangeRegistryId',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'getExchangeRegistryId',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"unitsToValue"`.
 */
export function useStableTokenUnitsToValue<
  TFunctionName extends 'unitsToValue',
  TSelectData = ReadContractResult<typeof stableTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenABI,
    functionName: 'unitsToValue',
    ...config,
  } as UseContractReadConfig<typeof stableTokenABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__.
 */
export function useStableTokenWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, TFunctionName, TMode>({
    abi: stableTokenABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStableTokenRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof stableTokenABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'renounceOwnership', TMode>({
    abi: stableTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useStableTokenSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof stableTokenABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'setRegistry', TMode>({
    abi: stableTokenABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStableTokenTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'transferOwnership', TMode>({
    abi: stableTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useStableTokenInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stableTokenABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'initialize', TMode>({
    abi: stableTokenABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function useStableTokenSetInflationParameters<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenABI,
          'setInflationParameters'
        >['request']['abi'],
        'setInflationParameters',
        TMode
      > & { functionName?: 'setInflationParameters' }
    : UseContractWriteConfig<typeof stableTokenABI, 'setInflationParameters', TMode> & {
        abi?: never
        functionName?: 'setInflationParameters'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'setInflationParameters', TMode>({
    abi: stableTokenABI,
    functionName: 'setInflationParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStableTokenIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'increaseAllowance', TMode>({
    abi: stableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStableTokenDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'decreaseAllowance', TMode>({
    abi: stableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useStableTokenApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stableTokenABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'approve', TMode>({
    abi: stableTokenABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useStableTokenMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof stableTokenABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'mint', TMode>({
    abi: stableTokenABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function useStableTokenTransferWithComment<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'transferWithComment'>['request']['abi'],
        'transferWithComment',
        TMode
      > & { functionName?: 'transferWithComment' }
    : UseContractWriteConfig<typeof stableTokenABI, 'transferWithComment', TMode> & {
        abi?: never
        functionName?: 'transferWithComment'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'transferWithComment', TMode>({
    abi: stableTokenABI,
    functionName: 'transferWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useStableTokenBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stableTokenABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'burn', TMode>({
    abi: stableTokenABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStableTokenTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stableTokenABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'transferFrom', TMode>({
    abi: stableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useStableTokenTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stableTokenABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'transfer', TMode>({
    abi: stableTokenABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function useStableTokenDebitGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'debitGasFees'>['request']['abi'],
        'debitGasFees',
        TMode
      > & { functionName?: 'debitGasFees' }
    : UseContractWriteConfig<typeof stableTokenABI, 'debitGasFees', TMode> & {
        abi?: never
        functionName?: 'debitGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'debitGasFees', TMode>({
    abi: stableTokenABI,
    functionName: 'debitGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function useStableTokenCreditGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenABI, 'creditGasFees'>['request']['abi'],
        'creditGasFees',
        TMode
      > & { functionName?: 'creditGasFees' }
    : UseContractWriteConfig<typeof stableTokenABI, 'creditGasFees', TMode> & {
        abi?: never
        functionName?: 'creditGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenABI, 'creditGasFees', TMode>({
    abi: stableTokenABI,
    functionName: 'creditGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__.
 */
export function usePrepareStableTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStableTokenRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareStableTokenSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStableTokenTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStableTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function usePrepareStableTokenSetInflationParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'setInflationParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'setInflationParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'setInflationParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStableTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStableTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStableTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareStableTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function usePrepareStableTokenTransferWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferWithComment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'transferWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferWithComment'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStableTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStableTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStableTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function usePrepareStableTokenDebitGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'debitGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'debitGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'debitGasFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function usePrepareStableTokenCreditGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenABI, 'creditGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenABI,
    functionName: 'creditGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenABI, 'creditGasFees'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__.
 */
export function useStableTokenEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenABI, ...config } as UseContractEventConfig<
    typeof stableTokenABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useStableTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"InflationFactorUpdated"`.
 */
export function useStableTokenInflationFactorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'InflationFactorUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'InflationFactorUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'InflationFactorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"InflationParametersUpdated"`.
 */
export function useStableTokenInflationParametersUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'InflationParametersUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'InflationParametersUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'InflationParametersUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStableTokenOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useStableTokenRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStableTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenABI}__ and `eventName` set to `"TransferComment"`.
 */
export function useStableTokenTransferCommentEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenABI, 'TransferComment'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenABI,
    eventName: 'TransferComment',
    ...config,
  } as UseContractEventConfig<typeof stableTokenABI, 'TransferComment'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__.
 */
export function useStableTokenEurRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenEurABI, ...config } as UseContractReadConfig<
    typeof stableTokenEurABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"allowance"`.
 */
export function useStableTokenEurAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStableTokenEurBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useStableTokenEurCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"decimals"`.
 */
export function useStableTokenEurDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useStableTokenEurFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useStableTokenEurGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useStableTokenEurGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useStableTokenEurGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useStableTokenEurGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getExchangeRegistryId"`.
 */
export function useStableTokenEurGetExchangeRegistryId<
  TFunctionName extends 'getExchangeRegistryId',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getExchangeRegistryId',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getInflationParameters"`.
 */
export function useStableTokenEurGetInflationParameters<
  TFunctionName extends 'getInflationParameters',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getInflationParameters',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useStableTokenEurGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useStableTokenEurGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useStableTokenEurHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"initialized"`.
 */
export function useStableTokenEurInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"isOwner"`.
 */
export function useStableTokenEurIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useStableTokenEurMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useStableTokenEurMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"name"`.
 */
export function useStableTokenEurName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useStableTokenEurNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useStableTokenEurNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"owner"`.
 */
export function useStableTokenEurOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"registry"`.
 */
export function useStableTokenEurRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"symbol"`.
 */
export function useStableTokenEurSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStableTokenEurTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"unitsToValue"`.
 */
export function useStableTokenEurUnitsToValue<
  TFunctionName extends 'unitsToValue',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'unitsToValue',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useStableTokenEurValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useStableTokenEurValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"valueToUnits"`.
 */
export function useStableTokenEurValueToUnits<
  TFunctionName extends 'valueToUnits',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'valueToUnits',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useStableTokenEurGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof stableTokenEurABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenEurABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenEurABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__.
 */
export function useStableTokenEurWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenEurABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, TFunctionName, TMode>({
    abi: stableTokenEurABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"approve"`.
 */
export function useStableTokenEurApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'approve', TMode>({
    abi: stableTokenEurABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"burn"`.
 */
export function useStableTokenEurBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'burn', TMode>({
    abi: stableTokenEurABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function useStableTokenEurCreditGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'creditGasFees'>['request']['abi'],
        'creditGasFees',
        TMode
      > & { functionName?: 'creditGasFees' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'creditGasFees', TMode> & {
        abi?: never
        functionName?: 'creditGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'creditGasFees', TMode>({
    abi: stableTokenEurABI,
    functionName: 'creditGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function useStableTokenEurDebitGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'debitGasFees'>['request']['abi'],
        'debitGasFees',
        TMode
      > & { functionName?: 'debitGasFees' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'debitGasFees', TMode> & {
        abi?: never
        functionName?: 'debitGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'debitGasFees', TMode>({
    abi: stableTokenEurABI,
    functionName: 'debitGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStableTokenEurDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'decreaseAllowance', TMode>({
    abi: stableTokenEurABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStableTokenEurIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'increaseAllowance', TMode>({
    abi: stableTokenEurABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"initialize"`.
 */
export function useStableTokenEurInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'initialize', TMode>({
    abi: stableTokenEurABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"mint"`.
 */
export function useStableTokenEurMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'mint', TMode>({
    abi: stableTokenEurABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStableTokenEurRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'renounceOwnership', TMode>({
    abi: stableTokenEurABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function useStableTokenEurSetInflationParameters<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenEurABI,
          'setInflationParameters'
        >['request']['abi'],
        'setInflationParameters',
        TMode
      > & { functionName?: 'setInflationParameters' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'setInflationParameters', TMode> & {
        abi?: never
        functionName?: 'setInflationParameters'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'setInflationParameters', TMode>({
    abi: stableTokenEurABI,
    functionName: 'setInflationParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useStableTokenEurSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'setRegistry', TMode>({
    abi: stableTokenEurABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transfer"`.
 */
export function useStableTokenEurTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'transfer', TMode>({
    abi: stableTokenEurABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStableTokenEurTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'transferFrom', TMode>({
    abi: stableTokenEurABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStableTokenEurTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenEurABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'transferOwnership', TMode>({
    abi: stableTokenEurABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function useStableTokenEurTransferWithComment<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenEurABI,
          'transferWithComment'
        >['request']['abi'],
        'transferWithComment',
        TMode
      > & { functionName?: 'transferWithComment' }
    : UseContractWriteConfig<typeof stableTokenEurABI, 'transferWithComment', TMode> & {
        abi?: never
        functionName?: 'transferWithComment'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenEurABI, 'transferWithComment', TMode>({
    abi: stableTokenEurABI,
    functionName: 'transferWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__.
 */
export function usePrepareStableTokenEurWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStableTokenEurApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStableTokenEurBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function usePrepareStableTokenEurCreditGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'creditGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'creditGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'creditGasFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function usePrepareStableTokenEurDebitGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'debitGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'debitGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'debitGasFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStableTokenEurDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStableTokenEurIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStableTokenEurInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareStableTokenEurMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStableTokenEurRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function usePrepareStableTokenEurSetInflationParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'setInflationParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'setInflationParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'setInflationParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareStableTokenEurSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStableTokenEurTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStableTokenEurTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStableTokenEurTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenEurABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function usePrepareStableTokenEurTransferWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferWithComment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenEurABI,
    functionName: 'transferWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenEurABI, 'transferWithComment'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__.
 */
export function useStableTokenEurEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenEurABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenEurABI, ...config } as UseContractEventConfig<
    typeof stableTokenEurABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"Approval"`.
 */
export function useStableTokenEurApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"InflationFactorUpdated"`.
 */
export function useStableTokenEurInflationFactorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'InflationFactorUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'InflationFactorUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'InflationFactorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"InflationParametersUpdated"`.
 */
export function useStableTokenEurInflationParametersUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'InflationParametersUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'InflationParametersUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'InflationParametersUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStableTokenEurOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useStableTokenEurRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStableTokenEurTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenEurABI}__ and `eventName` set to `"TransferComment"`.
 */
export function useStableTokenEurTransferCommentEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenEurABI, 'TransferComment'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenEurABI,
    eventName: 'TransferComment',
    ...config,
  } as UseContractEventConfig<typeof stableTokenEurABI, 'TransferComment'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__.
 */
export function useStableTokenBrlRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: stableTokenBrlABI, ...config } as UseContractReadConfig<
    typeof stableTokenBrlABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"allowance"`.
 */
export function useStableTokenBrlAllowance<
  TFunctionName extends 'allowance',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useStableTokenBrlBalanceOf<
  TFunctionName extends 'balanceOf',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"checkProofOfPossession"`.
 */
export function useStableTokenBrlCheckProofOfPossession<
  TFunctionName extends 'checkProofOfPossession',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'checkProofOfPossession',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"decimals"`.
 */
export function useStableTokenBrlDecimals<
  TFunctionName extends 'decimals',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"fractionMulExp"`.
 */
export function useStableTokenBrlFractionMulExp<
  TFunctionName extends 'fractionMulExp',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'fractionMulExp',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getBlockNumberFromHeader"`.
 */
export function useStableTokenBrlGetBlockNumberFromHeader<
  TFunctionName extends 'getBlockNumberFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getBlockNumberFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getEpochNumber"`.
 */
export function useStableTokenBrlGetEpochNumber<
  TFunctionName extends 'getEpochNumber',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getEpochNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getEpochNumberOfBlock"`.
 */
export function useStableTokenBrlGetEpochNumberOfBlock<
  TFunctionName extends 'getEpochNumberOfBlock',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getEpochNumberOfBlock',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getEpochSize"`.
 */
export function useStableTokenBrlGetEpochSize<
  TFunctionName extends 'getEpochSize',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getEpochSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getExchangeRegistryId"`.
 */
export function useStableTokenBrlGetExchangeRegistryId<
  TFunctionName extends 'getExchangeRegistryId',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getExchangeRegistryId',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getInflationParameters"`.
 */
export function useStableTokenBrlGetInflationParameters<
  TFunctionName extends 'getInflationParameters',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getInflationParameters',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getParentSealBitmap"`.
 */
export function useStableTokenBrlGetParentSealBitmap<
  TFunctionName extends 'getParentSealBitmap',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getParentSealBitmap',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getVerifiedSealBitmapFromHeader"`.
 */
export function useStableTokenBrlGetVerifiedSealBitmapFromHeader<
  TFunctionName extends 'getVerifiedSealBitmapFromHeader',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getVerifiedSealBitmapFromHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"hashHeader"`.
 */
export function useStableTokenBrlHashHeader<
  TFunctionName extends 'hashHeader',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'hashHeader',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"initialized"`.
 */
export function useStableTokenBrlInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"isOwner"`.
 */
export function useStableTokenBrlIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"minQuorumSize"`.
 */
export function useStableTokenBrlMinQuorumSize<
  TFunctionName extends 'minQuorumSize',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'minQuorumSize',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"minQuorumSizeInCurrentSet"`.
 */
export function useStableTokenBrlMinQuorumSizeInCurrentSet<
  TFunctionName extends 'minQuorumSizeInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'minQuorumSizeInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"name"`.
 */
export function useStableTokenBrlName<
  TFunctionName extends 'name',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"numberValidatorsInCurrentSet"`.
 */
export function useStableTokenBrlNumberValidatorsInCurrentSet<
  TFunctionName extends 'numberValidatorsInCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'numberValidatorsInCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"numberValidatorsInSet"`.
 */
export function useStableTokenBrlNumberValidatorsInSet<
  TFunctionName extends 'numberValidatorsInSet',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'numberValidatorsInSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"owner"`.
 */
export function useStableTokenBrlOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"registry"`.
 */
export function useStableTokenBrlRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"symbol"`.
 */
export function useStableTokenBrlSymbol<
  TFunctionName extends 'symbol',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useStableTokenBrlTotalSupply<
  TFunctionName extends 'totalSupply',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"unitsToValue"`.
 */
export function useStableTokenBrlUnitsToValue<
  TFunctionName extends 'unitsToValue',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'unitsToValue',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"validatorSignerAddressFromCurrentSet"`.
 */
export function useStableTokenBrlValidatorSignerAddressFromCurrentSet<
  TFunctionName extends 'validatorSignerAddressFromCurrentSet',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'validatorSignerAddressFromCurrentSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"validatorSignerAddressFromSet"`.
 */
export function useStableTokenBrlValidatorSignerAddressFromSet<
  TFunctionName extends 'validatorSignerAddressFromSet',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'validatorSignerAddressFromSet',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"valueToUnits"`.
 */
export function useStableTokenBrlValueToUnits<
  TFunctionName extends 'valueToUnits',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'valueToUnits',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useStableTokenBrlGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof stableTokenBrlABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: stableTokenBrlABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof stableTokenBrlABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__.
 */
export function useStableTokenBrlWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof stableTokenBrlABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, TFunctionName, TMode>({
    abi: stableTokenBrlABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"approve"`.
 */
export function useStableTokenBrlApprove<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'approve'>['request']['abi'],
        'approve',
        TMode
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'approve', TMode> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'approve', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"burn"`.
 */
export function useStableTokenBrlBurn<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'burn'>['request']['abi'],
        'burn',
        TMode
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'burn', TMode> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'burn', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function useStableTokenBrlCreditGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'creditGasFees'>['request']['abi'],
        'creditGasFees',
        TMode
      > & { functionName?: 'creditGasFees' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'creditGasFees', TMode> & {
        abi?: never
        functionName?: 'creditGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'creditGasFees', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'creditGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function useStableTokenBrlDebitGasFees<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'debitGasFees'>['request']['abi'],
        'debitGasFees',
        TMode
      > & { functionName?: 'debitGasFees' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'debitGasFees', TMode> & {
        abi?: never
        functionName?: 'debitGasFees'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'debitGasFees', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'debitGasFees',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useStableTokenBrlDecreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'decreaseAllowance'>['request']['abi'],
        'decreaseAllowance',
        TMode
      > & { functionName?: 'decreaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'decreaseAllowance', TMode> & {
        abi?: never
        functionName?: 'decreaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'decreaseAllowance', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useStableTokenBrlIncreaseAllowance<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'increaseAllowance'>['request']['abi'],
        'increaseAllowance',
        TMode
      > & { functionName?: 'increaseAllowance' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'increaseAllowance', TMode> & {
        abi?: never
        functionName?: 'increaseAllowance'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'increaseAllowance', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'increaseAllowance',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"initialize"`.
 */
export function useStableTokenBrlInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'initialize', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"mint"`.
 */
export function useStableTokenBrlMint<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'mint'>['request']['abi'],
        'mint',
        TMode
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'mint', TMode> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'mint', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useStableTokenBrlRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'renounceOwnership', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function useStableTokenBrlSetInflationParameters<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenBrlABI,
          'setInflationParameters'
        >['request']['abi'],
        'setInflationParameters',
        TMode
      > & { functionName?: 'setInflationParameters' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'setInflationParameters', TMode> & {
        abi?: never
        functionName?: 'setInflationParameters'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'setInflationParameters', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'setInflationParameters',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useStableTokenBrlSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'setRegistry', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transfer"`.
 */
export function useStableTokenBrlTransfer<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'transfer'>['request']['abi'],
        'transfer',
        TMode
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'transfer', TMode> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'transfer', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useStableTokenBrlTransferFrom<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'transferFrom'>['request']['abi'],
        'transferFrom',
        TMode
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'transferFrom', TMode> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'transferFrom', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useStableTokenBrlTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof stableTokenBrlABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'transferOwnership', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function useStableTokenBrlTransferWithComment<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof stableTokenBrlABI,
          'transferWithComment'
        >['request']['abi'],
        'transferWithComment',
        TMode
      > & { functionName?: 'transferWithComment' }
    : UseContractWriteConfig<typeof stableTokenBrlABI, 'transferWithComment', TMode> & {
        abi?: never
        functionName?: 'transferWithComment'
      } = {} as any
) {
  return useContractWrite<typeof stableTokenBrlABI, 'transferWithComment', TMode>({
    abi: stableTokenBrlABI,
    functionName: 'transferWithComment',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__.
 */
export function usePrepareStableTokenBrlWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareStableTokenBrlApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareStableTokenBrlBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"creditGasFees"`.
 */
export function usePrepareStableTokenBrlCreditGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'creditGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'creditGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'creditGasFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"debitGasFees"`.
 */
export function usePrepareStableTokenBrlDebitGasFees(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'debitGasFees'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'debitGasFees',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'debitGasFees'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareStableTokenBrlDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'decreaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'decreaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'decreaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareStableTokenBrlIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'increaseAllowance'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'increaseAllowance',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'increaseAllowance'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareStableTokenBrlInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareStableTokenBrlMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareStableTokenBrlRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"setInflationParameters"`.
 */
export function usePrepareStableTokenBrlSetInflationParameters(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'setInflationParameters'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'setInflationParameters',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'setInflationParameters'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareStableTokenBrlSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareStableTokenBrlTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareStableTokenBrlTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareStableTokenBrlTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link stableTokenBrlABI}__ and `functionName` set to `"transferWithComment"`.
 */
export function usePrepareStableTokenBrlTransferWithComment(
  config: Omit<
    UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferWithComment'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: stableTokenBrlABI,
    functionName: 'transferWithComment',
    ...config,
  } as UsePrepareContractWriteConfig<typeof stableTokenBrlABI, 'transferWithComment'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__.
 */
export function useStableTokenBrlEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof stableTokenBrlABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: stableTokenBrlABI, ...config } as UseContractEventConfig<
    typeof stableTokenBrlABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"Approval"`.
 */
export function useStableTokenBrlApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"InflationFactorUpdated"`.
 */
export function useStableTokenBrlInflationFactorUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'InflationFactorUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'InflationFactorUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'InflationFactorUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"InflationParametersUpdated"`.
 */
export function useStableTokenBrlInflationParametersUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'InflationParametersUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'InflationParametersUpdated',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'InflationParametersUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useStableTokenBrlOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useStableTokenBrlRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"Transfer"`.
 */
export function useStableTokenBrlTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link stableTokenBrlABI}__ and `eventName` set to `"TransferComment"`.
 */
export function useStableTokenBrlTransferCommentEvent(
  config: Omit<
    UseContractEventConfig<typeof stableTokenBrlABI, 'TransferComment'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: stableTokenBrlABI,
    eventName: 'TransferComment',
    ...config,
  } as UseContractEventConfig<typeof stableTokenBrlABI, 'TransferComment'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__.
 */
export function useSortedOraclesRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: sortedOraclesABI, ...config } as UseContractReadConfig<
    typeof sortedOraclesABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"initialized"`.
 */
export function useSortedOraclesInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"isOracle"`.
 */
export function useSortedOraclesIsOracle<
  TFunctionName extends 'isOracle',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'isOracle',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"isOwner"`.
 */
export function useSortedOraclesIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"oracles"`.
 */
export function useSortedOraclesOracles<
  TFunctionName extends 'oracles',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'oracles',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"owner"`.
 */
export function useSortedOraclesOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"reportExpirySeconds"`.
 */
export function useSortedOraclesReportExpirySeconds<
  TFunctionName extends 'reportExpirySeconds',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'reportExpirySeconds',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"tokenReportExpirySeconds"`.
 */
export function useSortedOraclesTokenReportExpirySeconds<
  TFunctionName extends 'tokenReportExpirySeconds',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'tokenReportExpirySeconds',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useSortedOraclesGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"isOldestReportExpired"`.
 */
export function useSortedOraclesIsOldestReportExpired<
  TFunctionName extends 'isOldestReportExpired',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'isOldestReportExpired',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"numRates"`.
 */
export function useSortedOraclesNumRates<
  TFunctionName extends 'numRates',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'numRates',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"medianRate"`.
 */
export function useSortedOraclesMedianRate<
  TFunctionName extends 'medianRate',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'medianRate',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"getRates"`.
 */
export function useSortedOraclesGetRates<
  TFunctionName extends 'getRates',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'getRates',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"numTimestamps"`.
 */
export function useSortedOraclesNumTimestamps<
  TFunctionName extends 'numTimestamps',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'numTimestamps',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"medianTimestamp"`.
 */
export function useSortedOraclesMedianTimestamp<
  TFunctionName extends 'medianTimestamp',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'medianTimestamp',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"getTimestamps"`.
 */
export function useSortedOraclesGetTimestamps<
  TFunctionName extends 'getTimestamps',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'getTimestamps',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"getOracles"`.
 */
export function useSortedOraclesGetOracles<
  TFunctionName extends 'getOracles',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'getOracles',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"getTokenReportExpirySeconds"`.
 */
export function useSortedOraclesGetTokenReportExpirySeconds<
  TFunctionName extends 'getTokenReportExpirySeconds',
  TSelectData = ReadContractResult<typeof sortedOraclesABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: sortedOraclesABI,
    functionName: 'getTokenReportExpirySeconds',
    ...config,
  } as UseContractReadConfig<typeof sortedOraclesABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__.
 */
export function useSortedOraclesWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof sortedOraclesABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, TFunctionName, TMode>({
    abi: sortedOraclesABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useSortedOraclesRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'renounceOwnership', TMode>({
    abi: sortedOraclesABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useSortedOraclesTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'transferOwnership', TMode>({
    abi: sortedOraclesABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"initialize"`.
 */
export function useSortedOraclesInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'initialize', TMode>({
    abi: sortedOraclesABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"setReportExpiry"`.
 */
export function useSortedOraclesSetReportExpiry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'setReportExpiry'>['request']['abi'],
        'setReportExpiry',
        TMode
      > & { functionName?: 'setReportExpiry' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'setReportExpiry', TMode> & {
        abi?: never
        functionName?: 'setReportExpiry'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'setReportExpiry', TMode>({
    abi: sortedOraclesABI,
    functionName: 'setReportExpiry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"setTokenReportExpiry"`.
 */
export function useSortedOraclesSetTokenReportExpiry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sortedOraclesABI,
          'setTokenReportExpiry'
        >['request']['abi'],
        'setTokenReportExpiry',
        TMode
      > & { functionName?: 'setTokenReportExpiry' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'setTokenReportExpiry', TMode> & {
        abi?: never
        functionName?: 'setTokenReportExpiry'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'setTokenReportExpiry', TMode>({
    abi: sortedOraclesABI,
    functionName: 'setTokenReportExpiry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"addOracle"`.
 */
export function useSortedOraclesAddOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'addOracle'>['request']['abi'],
        'addOracle',
        TMode
      > & { functionName?: 'addOracle' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'addOracle', TMode> & {
        abi?: never
        functionName?: 'addOracle'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'addOracle', TMode>({
    abi: sortedOraclesABI,
    functionName: 'addOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"removeOracle"`.
 */
export function useSortedOraclesRemoveOracle<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'removeOracle'>['request']['abi'],
        'removeOracle',
        TMode
      > & { functionName?: 'removeOracle' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'removeOracle', TMode> & {
        abi?: never
        functionName?: 'removeOracle'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'removeOracle', TMode>({
    abi: sortedOraclesABI,
    functionName: 'removeOracle',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"removeExpiredReports"`.
 */
export function useSortedOraclesRemoveExpiredReports<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof sortedOraclesABI,
          'removeExpiredReports'
        >['request']['abi'],
        'removeExpiredReports',
        TMode
      > & { functionName?: 'removeExpiredReports' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'removeExpiredReports', TMode> & {
        abi?: never
        functionName?: 'removeExpiredReports'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'removeExpiredReports', TMode>({
    abi: sortedOraclesABI,
    functionName: 'removeExpiredReports',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"report"`.
 */
export function useSortedOraclesReport<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof sortedOraclesABI, 'report'>['request']['abi'],
        'report',
        TMode
      > & { functionName?: 'report' }
    : UseContractWriteConfig<typeof sortedOraclesABI, 'report', TMode> & {
        abi?: never
        functionName?: 'report'
      } = {} as any
) {
  return useContractWrite<typeof sortedOraclesABI, 'report', TMode>({
    abi: sortedOraclesABI,
    functionName: 'report',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__.
 */
export function usePrepareSortedOraclesWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareSortedOraclesRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareSortedOraclesTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSortedOraclesInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"setReportExpiry"`.
 */
export function usePrepareSortedOraclesSetReportExpiry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'setReportExpiry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'setReportExpiry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'setReportExpiry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"setTokenReportExpiry"`.
 */
export function usePrepareSortedOraclesSetTokenReportExpiry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'setTokenReportExpiry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'setTokenReportExpiry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'setTokenReportExpiry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"addOracle"`.
 */
export function usePrepareSortedOraclesAddOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'addOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'addOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'addOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"removeOracle"`.
 */
export function usePrepareSortedOraclesRemoveOracle(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'removeOracle'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'removeOracle',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'removeOracle'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"removeExpiredReports"`.
 */
export function usePrepareSortedOraclesRemoveExpiredReports(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'removeExpiredReports'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'removeExpiredReports',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'removeExpiredReports'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sortedOraclesABI}__ and `functionName` set to `"report"`.
 */
export function usePrepareSortedOraclesReport(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'report'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sortedOraclesABI,
    functionName: 'report',
    ...config,
  } as UsePrepareContractWriteConfig<typeof sortedOraclesABI, 'report'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__.
 */
export function useSortedOraclesEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof sortedOraclesABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: sortedOraclesABI, ...config } as UseContractEventConfig<
    typeof sortedOraclesABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"MedianUpdated"`.
 */
export function useSortedOraclesMedianUpdatedEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'MedianUpdated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'MedianUpdated',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'MedianUpdated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"OracleAdded"`.
 */
export function useSortedOraclesOracleAddedEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'OracleAdded'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'OracleAdded',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'OracleAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"OracleRemoved"`.
 */
export function useSortedOraclesOracleRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'OracleRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'OracleRemoved',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'OracleRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"OracleReportRemoved"`.
 */
export function useSortedOraclesOracleReportRemovedEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'OracleReportRemoved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'OracleReportRemoved',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'OracleReportRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"OracleReported"`.
 */
export function useSortedOraclesOracleReportedEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'OracleReported'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'OracleReported',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'OracleReported'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useSortedOraclesOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"ReportExpirySet"`.
 */
export function useSortedOraclesReportExpirySetEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'ReportExpirySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'ReportExpirySet',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'ReportExpirySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sortedOraclesABI}__ and `eventName` set to `"TokenReportExpirySet"`.
 */
export function useSortedOraclesTokenReportExpirySetEvent(
  config: Omit<
    UseContractEventConfig<typeof sortedOraclesABI, 'TokenReportExpirySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: sortedOraclesABI,
    eventName: 'TokenReportExpirySet',
    ...config,
  } as UseContractEventConfig<typeof sortedOraclesABI, 'TokenReportExpirySet'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__.
 */
export function useGrandaMentoRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi'
  > = {} as any
) {
  return useContractRead({ abi: grandaMentoABI, ...config } as UseContractReadConfig<
    typeof grandaMentoABI,
    TFunctionName,
    TSelectData
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"activeProposalIdsSuperset"`.
 */
export function useGrandaMentoActiveProposalIdsSuperset<
  TFunctionName extends 'activeProposalIdsSuperset',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'activeProposalIdsSuperset',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"approver"`.
 */
export function useGrandaMentoApprover<
  TFunctionName extends 'approver',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'approver',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"exchangeProposalCount"`.
 */
export function useGrandaMentoExchangeProposalCount<
  TFunctionName extends 'exchangeProposalCount',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'exchangeProposalCount',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"exchangeProposals"`.
 */
export function useGrandaMentoExchangeProposals<
  TFunctionName extends 'exchangeProposals',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'exchangeProposals',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"initialized"`.
 */
export function useGrandaMentoInitialized<
  TFunctionName extends 'initialized',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'initialized',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"isOwner"`.
 */
export function useGrandaMentoIsOwner<
  TFunctionName extends 'isOwner',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'isOwner',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"maxApprovalExchangeRateChange"`.
 */
export function useGrandaMentoMaxApprovalExchangeRateChange<
  TFunctionName extends 'maxApprovalExchangeRateChange',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'maxApprovalExchangeRateChange',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"owner"`.
 */
export function useGrandaMentoOwner<
  TFunctionName extends 'owner',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"registry"`.
 */
export function useGrandaMentoRegistry<
  TFunctionName extends 'registry',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'registry',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"spread"`.
 */
export function useGrandaMentoSpread<
  TFunctionName extends 'spread',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'spread',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"stableTokenExchangeLimits"`.
 */
export function useGrandaMentoStableTokenExchangeLimits<
  TFunctionName extends 'stableTokenExchangeLimits',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'stableTokenExchangeLimits',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"vetoPeriodSeconds"`.
 */
export function useGrandaMentoVetoPeriodSeconds<
  TFunctionName extends 'vetoPeriodSeconds',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'vetoPeriodSeconds',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"getVersionNumber"`.
 */
export function useGrandaMentoGetVersionNumber<
  TFunctionName extends 'getVersionNumber',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'getVersionNumber',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"getBuyAmount"`.
 */
export function useGrandaMentoGetBuyAmount<
  TFunctionName extends 'getBuyAmount',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'getBuyAmount',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"getActiveProposalIds"`.
 */
export function useGrandaMentoGetActiveProposalIds<
  TFunctionName extends 'getActiveProposalIds',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'getActiveProposalIds',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"getStableTokenExchangeLimits"`.
 */
export function useGrandaMentoGetStableTokenExchangeLimits<
  TFunctionName extends 'getStableTokenExchangeLimits',
  TSelectData = ReadContractResult<typeof grandaMentoABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>,
    'abi' | 'functionName'
  > = {} as any
) {
  return useContractRead({
    abi: grandaMentoABI,
    functionName: 'getStableTokenExchangeLimits',
    ...config,
  } as UseContractReadConfig<typeof grandaMentoABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__.
 */
export function useGrandaMentoWrite<
  TFunctionName extends string,
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, string>['request']['abi'],
        TFunctionName,
        TMode
      >
    : UseContractWriteConfig<typeof grandaMentoABI, TFunctionName, TMode> & {
        abi?: never
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, TFunctionName, TMode>({
    abi: grandaMentoABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useGrandaMentoRenounceOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'renounceOwnership'>['request']['abi'],
        'renounceOwnership',
        TMode
      > & { functionName?: 'renounceOwnership' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'renounceOwnership', TMode> & {
        abi?: never
        functionName?: 'renounceOwnership'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'renounceOwnership', TMode>({
    abi: grandaMentoABI,
    functionName: 'renounceOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setRegistry"`.
 */
export function useGrandaMentoSetRegistry<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'setRegistry'>['request']['abi'],
        'setRegistry',
        TMode
      > & { functionName?: 'setRegistry' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setRegistry', TMode> & {
        abi?: never
        functionName?: 'setRegistry'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setRegistry', TMode>({
    abi: grandaMentoABI,
    functionName: 'setRegistry',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useGrandaMentoTransferOwnership<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'transferOwnership'>['request']['abi'],
        'transferOwnership',
        TMode
      > & { functionName?: 'transferOwnership' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'transferOwnership', TMode> & {
        abi?: never
        functionName?: 'transferOwnership'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'transferOwnership', TMode>({
    abi: grandaMentoABI,
    functionName: 'transferOwnership',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"initialize"`.
 */
export function useGrandaMentoInitialize<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'initialize'>['request']['abi'],
        'initialize',
        TMode
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'initialize', TMode> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'initialize', TMode>({
    abi: grandaMentoABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"createExchangeProposal"`.
 */
export function useGrandaMentoCreateExchangeProposal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'createExchangeProposal'
        >['request']['abi'],
        'createExchangeProposal',
        TMode
      > & { functionName?: 'createExchangeProposal' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'createExchangeProposal', TMode> & {
        abi?: never
        functionName?: 'createExchangeProposal'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'createExchangeProposal', TMode>({
    abi: grandaMentoABI,
    functionName: 'createExchangeProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"approveExchangeProposal"`.
 */
export function useGrandaMentoApproveExchangeProposal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'approveExchangeProposal'
        >['request']['abi'],
        'approveExchangeProposal',
        TMode
      > & { functionName?: 'approveExchangeProposal' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'approveExchangeProposal', TMode> & {
        abi?: never
        functionName?: 'approveExchangeProposal'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'approveExchangeProposal', TMode>({
    abi: grandaMentoABI,
    functionName: 'approveExchangeProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"cancelExchangeProposal"`.
 */
export function useGrandaMentoCancelExchangeProposal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'cancelExchangeProposal'
        >['request']['abi'],
        'cancelExchangeProposal',
        TMode
      > & { functionName?: 'cancelExchangeProposal' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'cancelExchangeProposal', TMode> & {
        abi?: never
        functionName?: 'cancelExchangeProposal'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'cancelExchangeProposal', TMode>({
    abi: grandaMentoABI,
    functionName: 'cancelExchangeProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"executeExchangeProposal"`.
 */
export function useGrandaMentoExecuteExchangeProposal<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'executeExchangeProposal'
        >['request']['abi'],
        'executeExchangeProposal',
        TMode
      > & { functionName?: 'executeExchangeProposal' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'executeExchangeProposal', TMode> & {
        abi?: never
        functionName?: 'executeExchangeProposal'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'executeExchangeProposal', TMode>({
    abi: grandaMentoABI,
    functionName: 'executeExchangeProposal',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"removeFromActiveProposalIdsSuperset"`.
 */
export function useGrandaMentoRemoveFromActiveProposalIdsSuperset<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'removeFromActiveProposalIdsSuperset'
        >['request']['abi'],
        'removeFromActiveProposalIdsSuperset',
        TMode
      > & { functionName?: 'removeFromActiveProposalIdsSuperset' }
    : UseContractWriteConfig<
        typeof grandaMentoABI,
        'removeFromActiveProposalIdsSuperset',
        TMode
      > & {
        abi?: never
        functionName?: 'removeFromActiveProposalIdsSuperset'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'removeFromActiveProposalIdsSuperset', TMode>({
    abi: grandaMentoABI,
    functionName: 'removeFromActiveProposalIdsSuperset',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setApprover"`.
 */
export function useGrandaMentoSetApprover<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'setApprover'>['request']['abi'],
        'setApprover',
        TMode
      > & { functionName?: 'setApprover' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setApprover', TMode> & {
        abi?: never
        functionName?: 'setApprover'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setApprover', TMode>({
    abi: grandaMentoABI,
    functionName: 'setApprover',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setMaxApprovalExchangeRateChange"`.
 */
export function useGrandaMentoSetMaxApprovalExchangeRateChange<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'setMaxApprovalExchangeRateChange'
        >['request']['abi'],
        'setMaxApprovalExchangeRateChange',
        TMode
      > & { functionName?: 'setMaxApprovalExchangeRateChange' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setMaxApprovalExchangeRateChange', TMode> & {
        abi?: never
        functionName?: 'setMaxApprovalExchangeRateChange'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setMaxApprovalExchangeRateChange', TMode>({
    abi: grandaMentoABI,
    functionName: 'setMaxApprovalExchangeRateChange',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setSpread"`.
 */
export function useGrandaMentoSetSpread<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'setSpread'>['request']['abi'],
        'setSpread',
        TMode
      > & { functionName?: 'setSpread' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setSpread', TMode> & {
        abi?: never
        functionName?: 'setSpread'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setSpread', TMode>({
    abi: grandaMentoABI,
    functionName: 'setSpread',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setStableTokenExchangeLimits"`.
 */
export function useGrandaMentoSetStableTokenExchangeLimits<
  TMode extends WriteContractMode = undefined
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<
          typeof grandaMentoABI,
          'setStableTokenExchangeLimits'
        >['request']['abi'],
        'setStableTokenExchangeLimits',
        TMode
      > & { functionName?: 'setStableTokenExchangeLimits' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setStableTokenExchangeLimits', TMode> & {
        abi?: never
        functionName?: 'setStableTokenExchangeLimits'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setStableTokenExchangeLimits', TMode>({
    abi: grandaMentoABI,
    functionName: 'setStableTokenExchangeLimits',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setVetoPeriodSeconds"`.
 */
export function useGrandaMentoSetVetoPeriodSeconds<TMode extends WriteContractMode = undefined>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        PrepareWriteContractResult<typeof grandaMentoABI, 'setVetoPeriodSeconds'>['request']['abi'],
        'setVetoPeriodSeconds',
        TMode
      > & { functionName?: 'setVetoPeriodSeconds' }
    : UseContractWriteConfig<typeof grandaMentoABI, 'setVetoPeriodSeconds', TMode> & {
        abi?: never
        functionName?: 'setVetoPeriodSeconds'
      } = {} as any
) {
  return useContractWrite<typeof grandaMentoABI, 'setVetoPeriodSeconds', TMode>({
    abi: grandaMentoABI,
    functionName: 'setVetoPeriodSeconds',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__.
 */
export function usePrepareGrandaMentoWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, TFunctionName>,
    'abi'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareGrandaMentoRenounceOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'renounceOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'renounceOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setRegistry"`.
 */
export function usePrepareGrandaMentoSetRegistry(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setRegistry'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setRegistry',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setRegistry'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareGrandaMentoTransferOwnership(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'transferOwnership'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'transferOwnership',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareGrandaMentoInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"createExchangeProposal"`.
 */
export function usePrepareGrandaMentoCreateExchangeProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'createExchangeProposal'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'createExchangeProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'createExchangeProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"approveExchangeProposal"`.
 */
export function usePrepareGrandaMentoApproveExchangeProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'approveExchangeProposal'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'approveExchangeProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'approveExchangeProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"cancelExchangeProposal"`.
 */
export function usePrepareGrandaMentoCancelExchangeProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'cancelExchangeProposal'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'cancelExchangeProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'cancelExchangeProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"executeExchangeProposal"`.
 */
export function usePrepareGrandaMentoExecuteExchangeProposal(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'executeExchangeProposal'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'executeExchangeProposal',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'executeExchangeProposal'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"removeFromActiveProposalIdsSuperset"`.
 */
export function usePrepareGrandaMentoRemoveFromActiveProposalIdsSuperset(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'removeFromActiveProposalIdsSuperset'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'removeFromActiveProposalIdsSuperset',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'removeFromActiveProposalIdsSuperset'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setApprover"`.
 */
export function usePrepareGrandaMentoSetApprover(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setApprover'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setApprover',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setApprover'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setMaxApprovalExchangeRateChange"`.
 */
export function usePrepareGrandaMentoSetMaxApprovalExchangeRateChange(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setMaxApprovalExchangeRateChange'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setMaxApprovalExchangeRateChange',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setMaxApprovalExchangeRateChange'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setSpread"`.
 */
export function usePrepareGrandaMentoSetSpread(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setSpread'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setSpread',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setSpread'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setStableTokenExchangeLimits"`.
 */
export function usePrepareGrandaMentoSetStableTokenExchangeLimits(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setStableTokenExchangeLimits'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setStableTokenExchangeLimits',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setStableTokenExchangeLimits'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link grandaMentoABI}__ and `functionName` set to `"setVetoPeriodSeconds"`.
 */
export function usePrepareGrandaMentoSetVetoPeriodSeconds(
  config: Omit<
    UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setVetoPeriodSeconds'>,
    'abi' | 'functionName'
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: grandaMentoABI,
    functionName: 'setVetoPeriodSeconds',
    ...config,
  } as UsePrepareContractWriteConfig<typeof grandaMentoABI, 'setVetoPeriodSeconds'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__.
 */
export function useGrandaMentoEvent<TEventName extends string>(
  config: Omit<UseContractEventConfig<typeof grandaMentoABI, TEventName>, 'abi'> = {} as any
) {
  return useContractEvent({ abi: grandaMentoABI, ...config } as UseContractEventConfig<
    typeof grandaMentoABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"ApproverSet"`.
 */
export function useGrandaMentoApproverSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'ApproverSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'ApproverSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'ApproverSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"ExchangeProposalApproved"`.
 */
export function useGrandaMentoExchangeProposalApprovedEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalApproved'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'ExchangeProposalApproved',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalApproved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"ExchangeProposalCancelled"`.
 */
export function useGrandaMentoExchangeProposalCancelledEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalCancelled'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'ExchangeProposalCancelled',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalCancelled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"ExchangeProposalCreated"`.
 */
export function useGrandaMentoExchangeProposalCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalCreated'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'ExchangeProposalCreated',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"ExchangeProposalExecuted"`.
 */
export function useGrandaMentoExchangeProposalExecutedEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalExecuted'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'ExchangeProposalExecuted',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'ExchangeProposalExecuted'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"MaxApprovalExchangeRateChangeSet"`.
 */
export function useGrandaMentoMaxApprovalExchangeRateChangeSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'MaxApprovalExchangeRateChangeSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'MaxApprovalExchangeRateChangeSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'MaxApprovalExchangeRateChangeSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useGrandaMentoOwnershipTransferredEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'OwnershipTransferred'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'OwnershipTransferred',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"RegistrySet"`.
 */
export function useGrandaMentoRegistrySetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'RegistrySet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'RegistrySet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'RegistrySet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"SpreadSet"`.
 */
export function useGrandaMentoSpreadSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'SpreadSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'SpreadSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'SpreadSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"StableTokenExchangeLimitsSet"`.
 */
export function useGrandaMentoStableTokenExchangeLimitsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'StableTokenExchangeLimitsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'StableTokenExchangeLimitsSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'StableTokenExchangeLimitsSet'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link grandaMentoABI}__ and `eventName` set to `"VetoPeriodSecondsSet"`.
 */
export function useGrandaMentoVetoPeriodSecondsSetEvent(
  config: Omit<
    UseContractEventConfig<typeof grandaMentoABI, 'VetoPeriodSecondsSet'>,
    'abi' | 'eventName'
  > = {} as any
) {
  return useContractEvent({
    abi: grandaMentoABI,
    eventName: 'VetoPeriodSecondsSet',
    ...config,
  } as UseContractEventConfig<typeof grandaMentoABI, 'VetoPeriodSecondsSet'>)
}
